/* eslint-disable */

/** 
* ФАЙЛ ГЕНЕРИРУЕТСЯ АВТОМАТИЧЕСКИ, ПРАВИТЬ ЕГО НЕ НУЖНО 
* Команда для генерирования этого файла: "yarn generate:types" 
*/


export type Maybe<T> = T | null;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string;
  String: string;
  Boolean: boolean;
  Int: number;
  Float: number;
  DateTime: globalThis.Date;
  Json: globalThis.Record<string, any> | globalThis.Array<any>;
  /** UserTechnologyLevel from 1 to 5 */
  UserTechnologyLevel: any;
  Long: number;
  /** The `Upload` scalar type represents a file upload. */
  Upload: globalThis.File;
};


export interface Query {
  __typename?: 'Query';
  /** Client api schema for @prisma-cms/front */
  apiSchema: Scalars['String'];
  galleries: Array<Maybe<Gallery>>;
  userGroups: Array<Maybe<UserGroup>>;
  worlds: Array<Maybe<World>>;
  notices: Array<Maybe<Notice>>;
  notificationTypes: Array<Maybe<NotificationType>>;
  resourceTags: Array<Maybe<ResourceTag>>;
  tags: Array<Maybe<Tag>>;
  votes: Array<Maybe<Vote>>;
  chatRooms: Array<Maybe<ChatRoom>>;
  games: Array<Maybe<Game>>;
  gameResults: Array<Maybe<GameResult>>;
  tournaments: Array<Maybe<Tournament>>;
  tournamentGroups: Array<Maybe<TournamentGroup>>;
  tourneys: Array<Maybe<Tourney>>;
  ethAccounts: Array<Maybe<EthAccount>>;
  ethContractSources: Array<Maybe<EthContractSource>>;
  ethTransactions: Array<Maybe<EthTransaction>>;
  callRequests: Array<Maybe<CallRequest>>;
  positions: Array<Maybe<Position>>;
  projectMembers: Array<Maybe<ProjectMember>>;
  services: Array<Maybe<Service>>;
  tasks: Array<Maybe<Task>>;
  taskReactions: Array<Maybe<TaskReaction>>;
  teamMembers: Array<Maybe<TeamMember>>;
  timers: Array<Maybe<Timer>>;
  routes: Array<Maybe<Route>>;
  codeChallenges: Array<Maybe<CodeChallenge>>;
  codeChallengeBlocks: Array<Maybe<CodeChallengeBlock>>;
  codeChallengeCompletions: Array<Maybe<CodeChallengeCompletion>>;
  comments: Array<Maybe<Comment>>;
  technologyLessons: Array<Maybe<TechnologyLesson>>;
  careers: Array<Maybe<Career>>;
  technologyLessonUsers: Array<Maybe<TechnologyLessonUser>>;
  userTechnologies: Array<Maybe<UserTechnology>>;
  tests: Array<Maybe<Test>>;
  taskTechnologies: Array<Maybe<TaskTechnology>>;
  technologies: Array<Maybe<Technology>>;
  ethBlocks: Array<Maybe<EthBlock>>;
  teams: Array<Maybe<Team>>;
  projects: Array<Maybe<Project>>;
  templates: Array<Maybe<Template>>;
  resources: Array<Maybe<Resource>>;
  chatMessages: Array<Maybe<ChatMessage>>;
  users: Array<Maybe<User>>;
  gallery?: Maybe<Gallery>;
  world?: Maybe<World>;
  notice?: Maybe<Notice>;
  notificationType?: Maybe<NotificationType>;
  resourceTag?: Maybe<ResourceTag>;
  tag?: Maybe<Tag>;
  vote?: Maybe<Vote>;
  chatRoom?: Maybe<ChatRoom>;
  game?: Maybe<Game>;
  gameResult?: Maybe<GameResult>;
  tournament?: Maybe<Tournament>;
  tournamentGroup?: Maybe<TournamentGroup>;
  tourney?: Maybe<Tourney>;
  ethAccount?: Maybe<EthAccount>;
  ethContractSource?: Maybe<EthContractSource>;
  ethTransaction?: Maybe<EthTransaction>;
  position?: Maybe<Position>;
  projectMember?: Maybe<ProjectMember>;
  service?: Maybe<Service>;
  task?: Maybe<Task>;
  taskReaction?: Maybe<TaskReaction>;
  teamMember?: Maybe<TeamMember>;
  timer?: Maybe<Timer>;
  route?: Maybe<Route>;
  codeChallenge?: Maybe<CodeChallenge>;
  codeChallengeBlock?: Maybe<CodeChallengeBlock>;
  codeChallengeCompletion?: Maybe<CodeChallengeCompletion>;
  comment?: Maybe<Comment>;
  technologyLesson?: Maybe<TechnologyLesson>;
  career?: Maybe<Career>;
  technologyLessonUser?: Maybe<TechnologyLessonUser>;
  userTechnology?: Maybe<UserTechnology>;
  test?: Maybe<Test>;
  taskTechnology?: Maybe<TaskTechnology>;
  file?: Maybe<File>;
  technology?: Maybe<Technology>;
  ethBlock?: Maybe<EthBlock>;
  team?: Maybe<Team>;
  project?: Maybe<Project>;
  template?: Maybe<Template>;
  resource?: Maybe<Resource>;
  chatMessage?: Maybe<ChatMessage>;
  user?: Maybe<User>;
  galleriesConnection: GalleryConnection;
  worldsConnection: WorldConnection;
  noticesConnection: NoticeConnection;
  notificationTypesConnection: NotificationTypeConnection;
  resourceTagsConnection: ResourceTagConnection;
  tagsConnection: TagConnection;
  votesConnection: VoteConnection;
  chatRoomsConnection: ChatRoomConnection;
  gamesConnection: GameConnection;
  gameResultsConnection: GameResultConnection;
  tournamentsConnection: TournamentConnection;
  tournamentGroupsConnection: TournamentGroupConnection;
  tourneysConnection: TourneyConnection;
  ethAccountsConnection: EthAccountConnection;
  ethContractSourcesConnection: EthContractSourceConnection;
  ethTransactionsConnection: EthTransactionConnection;
  callRequestsConnection: CallRequestConnection;
  positionsConnection: PositionConnection;
  projectMembersConnection: ProjectMemberConnection;
  servicesConnection: ServiceConnection;
  tasksConnection: TaskConnection;
  taskReactionsConnection: TaskReactionConnection;
  teamMembersConnection: TeamMemberConnection;
  timersConnection: TimerConnection;
  routesConnection: RouteConnection;
  codeChallengesConnection: CodeChallengeConnection;
  codeChallengeBlocksConnection: CodeChallengeBlockConnection;
  codeChallengeCompletionsConnection: CodeChallengeCompletionConnection;
  commentsConnection: CommentConnection;
  technologyLessonsConnection: TechnologyLessonConnection;
  careersConnection: CareerConnection;
  technologyLessonUsersConnection: TechnologyLessonUserConnection;
  userTechnologiesConnection: UserTechnologyConnection;
  testsConnection: TestConnection;
  taskTechnologiesConnection: TaskTechnologyConnection;
  technologiesConnection: TechnologyConnection;
  ethBlocksConnection: EthBlockConnection;
  teamsConnection: TeamConnection;
  projectsConnection: ProjectConnection;
  templatesConnection: TemplateConnection;
  resourcesConnection: ResourceConnection;
  chatMessagesConnection: ChatMessageConnection;
  usersConnection: UserConnection;
  myWorlds: User;
  me?: Maybe<User>;
  ethNet: EthNet;
  ethCoinbase?: Maybe<EthAccount>;
  ethPersonalAccounts: Array<Maybe<EthPersonalAccount>>;
  ethBalance?: Maybe<Scalars['Float']>;
  ethTransactionCount: Scalars['Int'];
  ethSyncState?: Maybe<EthSyncState>;
  ethGetBlockNumber: Scalars['Int'];
  ethGetBlock?: Maybe<Scalars['Json']>;
  ethGetBlockTransactionCount?: Maybe<Scalars['Int']>;
  ethGetTransaction?: Maybe<Scalars['Json']>;
}


export type QueryGalleriesArgs = {
  where?: Maybe<GalleryWhereInput>;
  orderBy?: Maybe<GalleryOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUserGroupsArgs = {
  where?: Maybe<UserGroupWhereInput>;
  orderBy?: Maybe<UserGroupOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryWorldsArgs = {
  where?: Maybe<WorldWhereInput>;
  orderBy?: Maybe<WorldOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryNoticesArgs = {
  where?: Maybe<NoticeWhereInput>;
  orderBy?: Maybe<NoticeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryNotificationTypesArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
  orderBy?: Maybe<NotificationTypeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryResourceTagsArgs = {
  where?: Maybe<ResourceTagWhereInput>;
  orderBy?: Maybe<ResourceTagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTagsArgs = {
  where?: Maybe<TagWhereInput>;
  orderBy?: Maybe<TagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryVotesArgs = {
  where?: Maybe<VoteWhereInput>;
  orderBy?: Maybe<VoteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryChatRoomsArgs = {
  where?: Maybe<ChatRoomWhereInput>;
  orderBy?: Maybe<ChatRoomOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGamesArgs = {
  where?: Maybe<GameWhereInput>;
  orderBy?: Maybe<GameOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGameResultsArgs = {
  where?: Maybe<GameResultWhereInput>;
  orderBy?: Maybe<GameResultOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTournamentsArgs = {
  where?: Maybe<TournamentWhereInput>;
  orderBy?: Maybe<TournamentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTournamentGroupsArgs = {
  where?: Maybe<TournamentGroupWhereInput>;
  orderBy?: Maybe<TournamentGroupOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTourneysArgs = {
  where?: Maybe<TourneyWhereInput>;
  orderBy?: Maybe<TourneyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthAccountsArgs = {
  where?: Maybe<EthAccountWhereInput>;
  orderBy?: Maybe<EthAccountOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthContractSourcesArgs = {
  where?: Maybe<EthContractSourceWhereInput>;
  orderBy?: Maybe<EthContractSourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthTransactionsArgs = {
  where?: Maybe<EthTransactionWhereInput>;
  orderBy?: Maybe<EthTransactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCallRequestsArgs = {
  where?: Maybe<CallRequestWhereInput>;
  orderBy?: Maybe<CallRequestOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryPositionsArgs = {
  where?: Maybe<PositionWhereInput>;
  orderBy?: Maybe<PositionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryProjectMembersArgs = {
  where?: Maybe<ProjectMemberWhereInput>;
  orderBy?: Maybe<ProjectMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryServicesArgs = {
  where?: Maybe<ServiceWhereInput>;
  orderBy?: Maybe<ServiceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTasksArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTaskReactionsArgs = {
  where?: Maybe<TaskReactionWhereInput>;
  orderBy?: Maybe<TaskReactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTeamMembersArgs = {
  where?: Maybe<TeamMemberWhereInput>;
  orderBy?: Maybe<TeamMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTimersArgs = {
  where?: Maybe<TimerWhereInput>;
  orderBy?: Maybe<TimerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryRoutesArgs = {
  where?: Maybe<RouteWhereInput>;
  orderBy?: Maybe<RouteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengesArgs = {
  where?: Maybe<CodeChallengeWhereInput>;
  orderBy?: Maybe<CodeChallengeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengeBlocksArgs = {
  where?: Maybe<CodeChallengeBlockWhereInput>;
  orderBy?: Maybe<CodeChallengeBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengeCompletionsArgs = {
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  orderBy?: Maybe<CodeChallengeCompletionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCommentsArgs = {
  where?: Maybe<CommentWhereInput>;
  orderBy?: Maybe<CommentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologyLessonsArgs = {
  where?: Maybe<TechnologyLessonWhereInput>;
  orderBy?: Maybe<TechnologyLessonOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCareersArgs = {
  where?: Maybe<CareerWhereInput>;
  orderBy?: Maybe<CareerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologyLessonUsersArgs = {
  where?: Maybe<TechnologyLessonUserWhereInput>;
  orderBy?: Maybe<TechnologyLessonUserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUserTechnologiesArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
  orderBy?: Maybe<UserTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTestsArgs = {
  where?: Maybe<TestWhereInput>;
  orderBy?: Maybe<TestOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTaskTechnologiesArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
  orderBy?: Maybe<TaskTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologiesArgs = {
  where?: Maybe<TechnologyWhereInput>;
  orderBy?: Maybe<TechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthBlocksArgs = {
  where?: Maybe<EthBlockWhereInput>;
  orderBy?: Maybe<EthBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTeamsArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryProjectsArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTemplatesArgs = {
  where?: Maybe<TemplateWhereInput>;
  orderBy?: Maybe<TemplateOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryResourcesArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryChatMessagesArgs = {
  where?: Maybe<ChatMessageWhereInput>;
  orderBy?: Maybe<ChatMessageOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGalleryArgs = {
  where: GalleryWhereUniqueInput;
};


export type QueryWorldArgs = {
  where: WorldWhereUniqueInput;
};


export type QueryNoticeArgs = {
  where: NoticeWhereUniqueInput;
};


export type QueryNotificationTypeArgs = {
  where: NotificationTypeWhereUniqueInput;
};


export type QueryResourceTagArgs = {
  where: ResourceTagWhereUniqueInput;
};


export type QueryTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryVoteArgs = {
  where: VoteWhereUniqueInput;
};


export type QueryChatRoomArgs = {
  where: ChatRoomWhereUniqueInput;
};


export type QueryGameArgs = {
  where: GameWhereUniqueInput;
};


export type QueryGameResultArgs = {
  where: GameResultWhereUniqueInput;
};


export type QueryTournamentArgs = {
  where: TournamentWhereUniqueInput;
};


export type QueryTournamentGroupArgs = {
  where: TournamentGroupWhereUniqueInput;
};


export type QueryTourneyArgs = {
  where: TourneyWhereUniqueInput;
};


export type QueryEthAccountArgs = {
  where: EthAccountWhereUniqueInput;
};


export type QueryEthContractSourceArgs = {
  where: EthContractSourceWhereUniqueInput;
};


export type QueryEthTransactionArgs = {
  where: EthTransactionWhereUniqueInput;
};


export type QueryPositionArgs = {
  where: PositionWhereUniqueInput;
};


export type QueryProjectMemberArgs = {
  where: ProjectMemberWhereUniqueInput;
};


export type QueryServiceArgs = {
  where: ServiceWhereUniqueInput;
};


export type QueryTaskArgs = {
  where: TaskWhereUniqueInput;
};


export type QueryTaskReactionArgs = {
  where: TaskReactionWhereUniqueInput;
};


export type QueryTeamMemberArgs = {
  where: TeamMemberWhereUniqueInput;
};


export type QueryTimerArgs = {
  where: TimerWhereUniqueInput;
};


export type QueryRouteArgs = {
  where: RouteWhereUniqueInput;
};


export type QueryCodeChallengeArgs = {
  where: CodeChallengeWhereUniqueInput;
};


export type QueryCodeChallengeBlockArgs = {
  where: CodeChallengeBlockWhereUniqueInput;
};


export type QueryCodeChallengeCompletionArgs = {
  where: CodeChallengeCompletionWhereUniqueInput;
};


export type QueryCommentArgs = {
  where: CommentWhereUniqueInput;
};


export type QueryTechnologyLessonArgs = {
  where: TechnologyLessonWhereUniqueInput;
};


export type QueryCareerArgs = {
  where: CareerWhereUniqueInput;
};


export type QueryTechnologyLessonUserArgs = {
  where: TechnologyLessonUserWhereUniqueInput;
};


export type QueryUserTechnologyArgs = {
  where: UserTechnologyWhereUniqueInput;
};


export type QueryTestArgs = {
  where: TestWhereUniqueInput;
};


export type QueryTaskTechnologyArgs = {
  where: TaskTechnologyWhereUniqueInput;
};


export type QueryFileArgs = {
  where: FileWhereUniqueInput;
};


export type QueryTechnologyArgs = {
  where: TechnologyWhereUniqueInput;
};


export type QueryEthBlockArgs = {
  where: EthBlockWhereUniqueInput;
};


export type QueryTeamArgs = {
  where: TeamWhereUniqueInput;
};


export type QueryProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type QueryTemplateArgs = {
  where: TemplateWhereUniqueInput;
};


export type QueryResourceArgs = {
  where: ResourceWhereUniqueInput;
};


export type QueryChatMessageArgs = {
  where: ChatMessageWhereUniqueInput;
};


export type QueryUserArgs = {
  where: UserWhereUniqueInput;
};


export type QueryGalleriesConnectionArgs = {
  where?: Maybe<GalleryWhereInput>;
  orderBy?: Maybe<GalleryOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryWorldsConnectionArgs = {
  where?: Maybe<WorldWhereInput>;
  orderBy?: Maybe<WorldOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryNoticesConnectionArgs = {
  where?: Maybe<NoticeWhereInput>;
  orderBy?: Maybe<NoticeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryNotificationTypesConnectionArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
  orderBy?: Maybe<NotificationTypeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryResourceTagsConnectionArgs = {
  where?: Maybe<ResourceTagWhereInput>;
  orderBy?: Maybe<ResourceTagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTagsConnectionArgs = {
  where?: Maybe<TagWhereInput>;
  orderBy?: Maybe<TagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryVotesConnectionArgs = {
  where?: Maybe<VoteWhereInput>;
  orderBy?: Maybe<VoteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryChatRoomsConnectionArgs = {
  where?: Maybe<ChatRoomWhereInput>;
  orderBy?: Maybe<ChatRoomOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGamesConnectionArgs = {
  where?: Maybe<GameWhereInput>;
  orderBy?: Maybe<GameOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryGameResultsConnectionArgs = {
  where?: Maybe<GameResultWhereInput>;
  orderBy?: Maybe<GameResultOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTournamentsConnectionArgs = {
  where?: Maybe<TournamentWhereInput>;
  orderBy?: Maybe<TournamentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTournamentGroupsConnectionArgs = {
  where?: Maybe<TournamentGroupWhereInput>;
  orderBy?: Maybe<TournamentGroupOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTourneysConnectionArgs = {
  where?: Maybe<TourneyWhereInput>;
  orderBy?: Maybe<TourneyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthAccountsConnectionArgs = {
  where?: Maybe<EthAccountWhereInput>;
  orderBy?: Maybe<EthAccountOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthContractSourcesConnectionArgs = {
  where?: Maybe<EthContractSourceWhereInput>;
  orderBy?: Maybe<EthContractSourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthTransactionsConnectionArgs = {
  where?: Maybe<EthTransactionWhereInput>;
  orderBy?: Maybe<EthTransactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCallRequestsConnectionArgs = {
  where?: Maybe<CallRequestWhereInput>;
  orderBy?: Maybe<CallRequestOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryPositionsConnectionArgs = {
  where?: Maybe<PositionWhereInput>;
  orderBy?: Maybe<PositionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryProjectMembersConnectionArgs = {
  where?: Maybe<ProjectMemberWhereInput>;
  orderBy?: Maybe<ProjectMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryServicesConnectionArgs = {
  where?: Maybe<ServiceWhereInput>;
  orderBy?: Maybe<ServiceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTasksConnectionArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTaskReactionsConnectionArgs = {
  where?: Maybe<TaskReactionWhereInput>;
  orderBy?: Maybe<TaskReactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTeamMembersConnectionArgs = {
  where?: Maybe<TeamMemberWhereInput>;
  orderBy?: Maybe<TeamMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTimersConnectionArgs = {
  where?: Maybe<TimerWhereInput>;
  orderBy?: Maybe<TimerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryRoutesConnectionArgs = {
  where?: Maybe<RouteWhereInput>;
  orderBy?: Maybe<RouteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengesConnectionArgs = {
  where?: Maybe<CodeChallengeWhereInput>;
  orderBy?: Maybe<CodeChallengeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengeBlocksConnectionArgs = {
  where?: Maybe<CodeChallengeBlockWhereInput>;
  orderBy?: Maybe<CodeChallengeBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCodeChallengeCompletionsConnectionArgs = {
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  orderBy?: Maybe<CodeChallengeCompletionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCommentsConnectionArgs = {
  where?: Maybe<CommentWhereInput>;
  orderBy?: Maybe<CommentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologyLessonsConnectionArgs = {
  where?: Maybe<TechnologyLessonWhereInput>;
  orderBy?: Maybe<TechnologyLessonOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryCareersConnectionArgs = {
  where?: Maybe<CareerWhereInput>;
  orderBy?: Maybe<CareerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologyLessonUsersConnectionArgs = {
  where?: Maybe<TechnologyLessonUserWhereInput>;
  orderBy?: Maybe<TechnologyLessonUserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUserTechnologiesConnectionArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
  orderBy?: Maybe<UserTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTestsConnectionArgs = {
  where?: Maybe<TestWhereInput>;
  orderBy?: Maybe<TestOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTaskTechnologiesConnectionArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
  orderBy?: Maybe<TaskTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTechnologiesConnectionArgs = {
  where?: Maybe<TechnologyWhereInput>;
  orderBy?: Maybe<TechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthBlocksConnectionArgs = {
  where?: Maybe<EthBlockWhereInput>;
  orderBy?: Maybe<EthBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTeamsConnectionArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryProjectsConnectionArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryTemplatesConnectionArgs = {
  where?: Maybe<TemplateWhereInput>;
  orderBy?: Maybe<TemplateOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryResourcesConnectionArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryChatMessagesConnectionArgs = {
  where?: Maybe<ChatMessageWhereInput>;
  orderBy?: Maybe<ChatMessageOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryUsersConnectionArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type QueryEthPersonalAccountsArgs = {
  where?: Maybe<Scalars['Boolean']>;
};


export type QueryEthBalanceArgs = {
  address: Scalars['String'];
  convert?: Maybe<EthAmountConvert>;
};


export type QueryEthTransactionCountArgs = {
  address: Scalars['String'];
};


export type QueryEthGetBlockArgs = {
  where: EthGetBlockWhereInput;
};


export type QueryEthGetBlockTransactionCountArgs = {
  where: EthGetBlockWhereInput;
};


export type QueryEthGetTransactionArgs = {
  where: EthGetTransactionWhereInput;
};

export interface GalleryWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GalleryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GalleryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GalleryWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  Files_every?: Maybe<FileWhereInput>;
  Files_some?: Maybe<FileWhereInput>;
  Files_none?: Maybe<FileWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
}


export interface FileWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FileWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FileWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FileWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  path?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  path_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  path_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  path_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  path_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  path_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  path_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  path_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  path_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  path_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  path_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  path_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  path_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  path_not_ends_with?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  filename_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  filename_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  filename_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  filename_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  filename_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  filename_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  filename_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  filename_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  filename_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  filename_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  filename_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  filename_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  filename_not_ends_with?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mimetype_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimetype_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mimetype_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mimetype_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mimetype_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  mimetype_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mimetype_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  mimetype_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimetype_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimetype_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mimetype_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimetype_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mimetype_not_ends_with?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  encoding_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  encoding_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  encoding_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  encoding_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  encoding_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  encoding_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  encoding_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  encoding_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  encoding_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  encoding_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  encoding_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  encoding_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  encoding_not_ends_with?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  hash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  hash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  hash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  hash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  hash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  hash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  hash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  hash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  hash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  hash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  hash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  hash_not_ends_with?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  ImageResource?: Maybe<ResourceWhereInput>;
}

export interface UserWhereInput {
  search?: Maybe<Scalars['String']>;
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  username_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  username_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  username_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  username_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  username_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  username_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  username_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  username_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  username_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  username_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  username_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  username_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  username_not_ends_with?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  phone_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showEmail_not?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showPhone_not?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  password_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  password_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  password_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  password_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  password_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  password_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  password_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  password_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  password_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  password_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  password_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  password_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  password_not_ends_with?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fullname_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fullname_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  fullname_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fullname_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fullname_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  fullname_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fullname_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  fullname_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  fullname_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  fullname_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  fullname_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  fullname_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fullname_not_ends_with?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  image_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  image_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  image_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  image_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  image_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  image_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  image_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  image_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  image_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  image_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  image_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  image_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  image_not_ends_with?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  active_not?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  activated_not?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleted_not?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hidden_not?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  sudo_not?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  marketplaceToken_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  marketplaceToken_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  marketplaceToken_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  marketplaceToken_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  marketplaceToken_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  marketplaceToken_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  marketplaceToken_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  marketplaceToken_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  marketplaceToken_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  marketplaceToken_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  marketplaceToken_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  marketplaceToken_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  marketplaceToken_not_ends_with?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptChatMessageAnonymous_not?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptNewChatRoomAnonymous_not?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptNewChatRoom_not?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  Groups_every?: Maybe<UserGroupWhereInput>;
  Groups_some?: Maybe<UserGroupWhereInput>;
  Groups_none?: Maybe<UserGroupWhereInput>;
  CreatedUsers_every?: Maybe<UserWhereInput>;
  CreatedUsers_some?: Maybe<UserWhereInput>;
  CreatedUsers_none?: Maybe<UserWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  LogedIns_every?: Maybe<LogedInWhereInput>;
  LogedIns_some?: Maybe<LogedInWhereInput>;
  LogedIns_none?: Maybe<LogedInWhereInput>;
  Files_every?: Maybe<FileWhereInput>;
  Files_some?: Maybe<FileWhereInput>;
  Files_none?: Maybe<FileWhereInput>;
  worlds_every?: Maybe<WorldWhereInput>;
  worlds_some?: Maybe<WorldWhereInput>;
  worlds_none?: Maybe<WorldWhereInput>;
  settings?: Maybe<SettingsWhereInput>;
  Resources_every?: Maybe<ResourceWhereInput>;
  Resources_some?: Maybe<ResourceWhereInput>;
  Resources_none?: Maybe<ResourceWhereInput>;
  Votes_every?: Maybe<VoteWhereInput>;
  Votes_some?: Maybe<VoteWhereInput>;
  Votes_none?: Maybe<VoteWhereInput>;
  NotificationTypes_every?: Maybe<NotificationTypeWhereInput>;
  NotificationTypes_some?: Maybe<NotificationTypeWhereInput>;
  NotificationTypes_none?: Maybe<NotificationTypeWhereInput>;
  NotificationTypesCreated_every?: Maybe<NotificationTypeWhereInput>;
  NotificationTypesCreated_some?: Maybe<NotificationTypeWhereInput>;
  NotificationTypesCreated_none?: Maybe<NotificationTypeWhereInput>;
  Tags_every?: Maybe<TagWhereInput>;
  Tags_some?: Maybe<TagWhereInput>;
  Tags_none?: Maybe<TagWhereInput>;
  ResourceTags_every?: Maybe<ResourceTagWhereInput>;
  ResourceTags_some?: Maybe<ResourceTagWhereInput>;
  ResourceTags_none?: Maybe<ResourceTagWhereInput>;
  Rooms_every?: Maybe<ChatRoomWhereInput>;
  Rooms_some?: Maybe<ChatRoomWhereInput>;
  Rooms_none?: Maybe<ChatRoomWhereInput>;
  CreatedRooms_every?: Maybe<ChatRoomWhereInput>;
  CreatedRooms_some?: Maybe<ChatRoomWhereInput>;
  CreatedRooms_none?: Maybe<ChatRoomWhereInput>;
  Messages_every?: Maybe<ChatMessageWhereInput>;
  Messages_some?: Maybe<ChatMessageWhereInput>;
  Messages_none?: Maybe<ChatMessageWhereInput>;
  ReadedMessages_every?: Maybe<ChatMessageReadedWhereInput>;
  ReadedMessages_some?: Maybe<ChatMessageReadedWhereInput>;
  ReadedMessages_none?: Maybe<ChatMessageReadedWhereInput>;
  Notices_every?: Maybe<NoticeWhereInput>;
  Notices_some?: Maybe<NoticeWhereInput>;
  Notices_none?: Maybe<NoticeWhereInput>;
  EthContractSourcesCreated_every?: Maybe<EthContractSourceWhereInput>;
  EthContractSourcesCreated_some?: Maybe<EthContractSourceWhereInput>;
  EthContractSourcesCreated_none?: Maybe<EthContractSourceWhereInput>;
  EthAccounts_every?: Maybe<EthAccountWhereInput>;
  EthAccounts_some?: Maybe<EthAccountWhereInput>;
  EthAccounts_none?: Maybe<EthAccountWhereInput>;
  Teams_every?: Maybe<TeamMemberWhereInput>;
  Teams_some?: Maybe<TeamMemberWhereInput>;
  Teams_none?: Maybe<TeamMemberWhereInput>;
  TeamsCreated_every?: Maybe<TeamWhereInput>;
  TeamsCreated_some?: Maybe<TeamWhereInput>;
  TeamsCreated_none?: Maybe<TeamWhereInput>;
  Projects_every?: Maybe<ProjectMemberWhereInput>;
  Projects_some?: Maybe<ProjectMemberWhereInput>;
  Projects_none?: Maybe<ProjectMemberWhereInput>;
  ProjectsCreated_every?: Maybe<ProjectWhereInput>;
  ProjectsCreated_some?: Maybe<ProjectWhereInput>;
  ProjectsCreated_none?: Maybe<ProjectWhereInput>;
  Tasks_every?: Maybe<TaskMemberWhereInput>;
  Tasks_some?: Maybe<TaskMemberWhereInput>;
  Tasks_none?: Maybe<TaskMemberWhereInput>;
  Timers_every?: Maybe<TimerWhereInput>;
  Timers_some?: Maybe<TimerWhereInput>;
  Timers_none?: Maybe<TimerWhereInput>;
  PositionsCreated_every?: Maybe<PositionWhereInput>;
  PositionsCreated_some?: Maybe<PositionWhereInput>;
  PositionsCreated_none?: Maybe<PositionWhereInput>;
  Positions_every?: Maybe<PositionWhereInput>;
  Positions_some?: Maybe<PositionWhereInput>;
  Positions_none?: Maybe<PositionWhereInput>;
  TasksReactions_every?: Maybe<TaskReactionWhereInput>;
  TasksReactions_some?: Maybe<TaskReactionWhereInput>;
  TasksReactions_none?: Maybe<TaskReactionWhereInput>;
  LettersCreated_every?: Maybe<LetterWhereInput>;
  LettersCreated_some?: Maybe<LetterWhereInput>;
  LettersCreated_none?: Maybe<LetterWhereInput>;
  EthAccountAuthed?: Maybe<EthAccountWhereInput>;
  CodeChallengeCompletions_every?: Maybe<CodeChallengeCompletionWhereInput>;
  CodeChallengeCompletions_some?: Maybe<CodeChallengeCompletionWhereInput>;
  CodeChallengeCompletions_none?: Maybe<CodeChallengeCompletionWhereInput>;
  PrismaProjects_every?: Maybe<ProjectWhereInput>;
  PrismaProjects_some?: Maybe<ProjectWhereInput>;
  PrismaProjects_none?: Maybe<ProjectWhereInput>;
  Imports_every?: Maybe<ImportWhereInput>;
  Imports_some?: Maybe<ImportWhereInput>;
  Imports_none?: Maybe<ImportWhereInput>;
  Career?: Maybe<CareerWhereInput>;
  UserTechnologies_every?: Maybe<UserTechnologyWhereInput>;
  UserTechnologies_some?: Maybe<UserTechnologyWhereInput>;
  UserTechnologies_none?: Maybe<UserTechnologyWhereInput>;
  TasksCreated_every?: Maybe<TaskWhereInput>;
  TasksCreated_some?: Maybe<TaskWhereInput>;
  TasksCreated_none?: Maybe<TaskWhereInput>;
  showHidden?: Maybe<Scalars['Boolean']>;
}

export interface UserGroupWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserGroupWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
}

export interface LogedInWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogedInWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogedInWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogedInWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  fake?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  fake_not?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserWhereInput>;
}

export interface WorldWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<WorldWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<WorldWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<WorldWhereInput>>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  seed_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  seed_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  seed_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  seed_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  seed_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  seed_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  seed_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  seed_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  seed_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  seed_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  seed_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  seed_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  seed_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<WorldType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<WorldType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<WorldType>>;
  time?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  time_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  time_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  time_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  time_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  time_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  time_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  time_gte?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  timeChanger_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  timeChanger_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  timeChanger_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  timeChanger_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  timeChanger_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  timeChanger_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  timeChanger_gte?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  days_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  days_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  days_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  days_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  days_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  days_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  days_gte?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  lastPlayed_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  lastPlayed_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  lastPlayed_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  lastPlayed_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  lastPlayed_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  lastPlayed_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  lastPlayed_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
  changedBlocks_every?: Maybe<BlockWhereInput>;
  changedBlocks_some?: Maybe<BlockWhereInput>;
  changedBlocks_none?: Maybe<BlockWhereInput>;
  players_every?: Maybe<PlayerWhereInput>;
  players_some?: Maybe<PlayerWhereInput>;
  players_none?: Maybe<PlayerWhereInput>;
  messages_every?: Maybe<MessageWhereInput>;
  messages_some?: Maybe<MessageWhereInput>;
  messages_none?: Maybe<MessageWhereInput>;
}

export enum WorldType {
  DEFAULT = 'DEFAULT',
  SUPERFLAT = 'SUPERFLAT'
}

export interface BlockWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<BlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<BlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<BlockWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  representation?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  representation_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  representation_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  representation_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  representation_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  representation_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  representation_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  representation_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  representation_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  representation_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  representation_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  representation_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  representation_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  representation_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  type_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  type_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  type_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  type_gte?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  x_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  x_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  x_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  x_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  x_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  x_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  x_gte?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  y_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  y_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  y_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  y_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  y_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  y_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  y_gte?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  z_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  z_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  z_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  z_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  z_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  z_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  z_gte?: Maybe<Scalars['Int']>;
  world?: Maybe<WorldWhereInput>;
}

export interface PlayerWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PlayerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PlayerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PlayerWhereInput>>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isAdmin_not?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  /** All values that are not equal to given value. */
  gamemode_not?: Maybe<Gamemode>;
  /** All values that are contained in given list. */
  gamemode_in?: Maybe<Array<Gamemode>>;
  /** All values that are not contained in given list. */
  gamemode_not_in?: Maybe<Array<Gamemode>>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  lastLogin_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  lastLogin_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  lastLogin_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  lastLogin_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  lastLogin_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  lastLogin_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  lastLogin_gte?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  x_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  x_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  x_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  x_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  x_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  x_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  x_gte?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  y_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  y_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  y_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  y_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  y_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  y_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  y_gte?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  z_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  z_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  z_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  z_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  z_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  z_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  z_gte?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dirx_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dirx_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  dirx_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dirx_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dirx_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dirx_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dirx_gte?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  diry_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  diry_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  diry_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  diry_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  diry_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  diry_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  diry_gte?: Maybe<Scalars['Float']>;
  user?: Maybe<UserWhereInput>;
  world?: Maybe<WorldWhereInput>;
  inventory?: Maybe<InventoryWhereInput>;
}

export enum Gamemode {
  SURVIVAL = 'SURVIVAL',
  CREATIVE = 'CREATIVE',
  ADVENTURE = 'ADVENTURE',
  SPECTATOR = 'SPECTATOR'
}

export interface InventoryWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<InventoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<InventoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<InventoryWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  cursor?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  cursor_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  cursor_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  cursor_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  cursor_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  cursor_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  cursor_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  cursor_gte?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  data_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  data_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  data_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  data_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  data_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  data_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  data_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  data_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  data_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  data_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  data_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  data_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  data_not_ends_with?: Maybe<Scalars['String']>;
  player?: Maybe<PlayerWhereInput>;
}

export interface MessageWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<MessageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<MessageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<MessageWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  type?: Maybe<MessageType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<MessageType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<MessageType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<MessageType>>;
  sender?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sender_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sender_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  sender_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sender_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sender_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  sender_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sender_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  sender_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  sender_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  sender_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  sender_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  sender_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sender_not_ends_with?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  body_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  body_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  body_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  body_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  body_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  body_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  body_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  body_not_ends_with?: Maybe<Scalars['String']>;
  world?: Maybe<WorldWhereInput>;
}

export enum MessageType {
  ERROR = 'ERROR',
  PLAYER = 'PLAYER',
  SERVER = 'SERVER',
  INFO = 'INFO'
}

export interface SettingsWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SettingsWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SettingsWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SettingsWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  renderDistance?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  renderDistance_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  renderDistance_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  renderDistance_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  renderDistance_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  renderDistance_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  renderDistance_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  renderDistance_gte?: Maybe<Scalars['Int']>;
  User?: Maybe<UserWhereInput>;
}

export interface ResourceWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<ResourceType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<ResourceType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<ResourceType>>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  longtitle_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  longtitle_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  longtitle_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  longtitle_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  longtitle_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  longtitle_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  longtitle_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  longtitle_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  longtitle_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  longtitle_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  longtitle_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  longtitle_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  longtitle_not_ends_with?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  published_not?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleted_not?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hidemenu_not?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  searchable_not?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  uri_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  uri_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  uri_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  uri_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  uri_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  uri_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  uri_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  uri_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  uri_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  uri_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  uri_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  uri_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  uri_not_ends_with?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isfolder_not?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  rating_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  rating_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  rating_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  rating_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  rating_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  rating_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  rating_gte?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  positiveVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  positiveVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  positiveVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  positiveVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  positiveVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  positiveVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  positiveVotesCount_gte?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  negativeVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  negativeVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  negativeVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  negativeVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  negativeVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  negativeVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  negativeVotesCount_gte?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  neutralVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  neutralVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  neutralVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  neutralVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  neutralVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  neutralVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  neutralVotesCount_gte?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  mockUpdate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  mockUpdate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  mockUpdate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  mockUpdate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  mockUpdate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  mockUpdate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  mockUpdate_gte?: Maybe<Scalars['DateTime']>;
  commentOldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  commentOldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  commentOldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  commentOldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  commentOldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  commentOldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  commentOldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  commentOldID_gte?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  class_key_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  class_key_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  class_key_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  class_key_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  class_key_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  class_key_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  class_key_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  class_key_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  class_key_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  class_key_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  class_key_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  class_key_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  class_key_not_ends_with?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  template_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  template_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  template_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  template_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  template_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  template_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  template_gte?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Parent?: Maybe<ResourceWhereInput>;
  Childs_every?: Maybe<ResourceWhereInput>;
  Childs_some?: Maybe<ResourceWhereInput>;
  Childs_none?: Maybe<ResourceWhereInput>;
  PrismaProject?: Maybe<ProjectWhereInput>;
  Topic?: Maybe<ResourceWhereInput>;
  Comments_every?: Maybe<ResourceWhereInput>;
  Comments_some?: Maybe<ResourceWhereInput>;
  Comments_none?: Maybe<ResourceWhereInput>;
  Votes_every?: Maybe<VoteWhereInput>;
  Votes_some?: Maybe<VoteWhereInput>;
  Votes_none?: Maybe<VoteWhereInput>;
  Tags_every?: Maybe<ResourceTagWhereInput>;
  Tags_some?: Maybe<ResourceTagWhereInput>;
  Tags_none?: Maybe<ResourceTagWhereInput>;
  Blog?: Maybe<ResourceWhereInput>;
  CodeChallenge?: Maybe<CodeChallengeWhereInput>;
  Galleries_every?: Maybe<GalleryWhereInput>;
  Galleries_some?: Maybe<GalleryWhereInput>;
  Galleries_none?: Maybe<GalleryWhereInput>;
  EthAccount?: Maybe<EthAccountWhereInput>;
  Image?: Maybe<FileWhereInput>;
  Service?: Maybe<ServiceWhereInput>;
  Team?: Maybe<TeamWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
  Task?: Maybe<TaskWhereInput>;
}

export enum ResourceType {
  BLOG = 'Blog',
  COMMENT = 'Comment',
  PERSONALBLOG = 'PersonalBlog',
  PROJECT = 'Project',
  RESOURCE = 'Resource',
  SERVICE = 'Service',
  TEAM = 'Team',
  TOPIC = 'Topic'
}

export interface ProjectWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  domain_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  domain_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  domain_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  domain_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  domain_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  domain_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  domain_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  domain_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  domain_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  domain_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  domain_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  domain_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  domain_not_ends_with?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sequence_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sequence_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sequence_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sequence_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sequence_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sequence_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sequence_gte?: Maybe<Scalars['Int']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ProjectStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ProjectStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ProjectStatus>>;
  public?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  public_not?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<ProjectType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<ProjectType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<ProjectType>>;
  PrismaTemplates_every?: Maybe<TemplateWhereInput>;
  PrismaTemplates_some?: Maybe<TemplateWhereInput>;
  PrismaTemplates_none?: Maybe<TemplateWhereInput>;
  PrismaUsers_every?: Maybe<UserWhereInput>;
  PrismaUsers_some?: Maybe<UserWhereInput>;
  PrismaUsers_none?: Maybe<UserWhereInput>;
  PrismaResources_every?: Maybe<ResourceWhereInput>;
  PrismaResources_some?: Maybe<ResourceWhereInput>;
  PrismaResources_none?: Maybe<ResourceWhereInput>;
  Members_every?: Maybe<ProjectMemberWhereInput>;
  Members_some?: Maybe<ProjectMemberWhereInput>;
  Members_none?: Maybe<ProjectMemberWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  ProjectTasks_every?: Maybe<ProjectTaskWhereInput>;
  ProjectTasks_some?: Maybe<ProjectTaskWhereInput>;
  ProjectTasks_none?: Maybe<ProjectTaskWhereInput>;
  Team?: Maybe<TeamWhereInput>;
  Customers_every?: Maybe<TeamWhereInput>;
  Customers_some?: Maybe<TeamWhereInput>;
  Customers_none?: Maybe<TeamWhereInput>;
  ChatRoom?: Maybe<ChatRoomWhereInput>;
  Image?: Maybe<FileWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
  EthAccounts_every?: Maybe<EthAccountWhereInput>;
  EthAccounts_some?: Maybe<EthAccountWhereInput>;
  EthAccounts_none?: Maybe<EthAccountWhereInput>;
  /** Поиск по нескольким полям */
  search?: Maybe<Scalars['String']>;
  /** Только активные проекты */
  active_only?: Maybe<Scalars['Boolean']>;
}

export enum ProjectStatus {
  NEW = 'New',
  ACCEPTED = 'Accepted',
  REJECTED = 'Rejected',
  PROCESSING = 'Processing',
  COMPLETED = 'Completed',
  REOPENED = 'Reopened'
}

export enum ProjectType {
  EDUCATION = 'Education'
}

export interface TemplateWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TemplateWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TemplateWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TemplateWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  component_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  component_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  component_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  component_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  component_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  component_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  component_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  component_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  component_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  component_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  component_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  component_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  component_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
  PrismaProject?: Maybe<ProjectWhereInput>;
}

export interface ProjectMemberWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectMemberWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectMemberWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectMemberWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<ProjectMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ProjectMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ProjectMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ProjectMemberStatus>>;
  CreatedBy?: Maybe<UserWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
  User?: Maybe<UserWhereInput>;
  Services_every?: Maybe<ServiceWhereInput>;
  Services_some?: Maybe<ServiceWhereInput>;
  Services_none?: Maybe<ServiceWhereInput>;
}

export enum ProjectMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired',
  QUIT = 'Quit'
}

export interface ServiceWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Projects_every?: Maybe<ProjectMemberWhereInput>;
  Projects_some?: Maybe<ProjectMemberWhereInput>;
  Projects_none?: Maybe<ProjectMemberWhereInput>;
  Parent?: Maybe<ServiceWhereInput>;
  Childs_every?: Maybe<ServiceWhereInput>;
  Childs_some?: Maybe<ServiceWhereInput>;
  Childs_none?: Maybe<ServiceWhereInput>;
  Category?: Maybe<ServiceCategoryWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
}

export interface ServiceCategoryWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceCategoryWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceCategoryWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceCategoryWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Services_every?: Maybe<ServiceWhereInput>;
  Services_some?: Maybe<ServiceWhereInput>;
  Services_none?: Maybe<ServiceWhereInput>;
  Parent?: Maybe<ServiceCategoryWhereInput>;
  Childs_every?: Maybe<ServiceCategoryWhereInput>;
  Childs_some?: Maybe<ServiceCategoryWhereInput>;
  Childs_none?: Maybe<ServiceCategoryWhereInput>;
}

export interface ProjectTaskWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectTaskWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectTaskWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectTaskWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
  Task?: Maybe<TaskWhereInput>;
}

export interface TaskWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TaskStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TaskStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TaskStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TaskStatus>>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDatePlaning_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDatePlaning_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startDatePlaning_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDatePlaning_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDatePlaning_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDatePlaning_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDatePlaning_gte?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDatePlaning_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDatePlaning_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endDatePlaning_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDatePlaning_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDatePlaning_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDatePlaning_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDatePlaning_gte?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startDate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endDate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  needHelp_not?: Maybe<Scalars['Boolean']>;
  TaskProjects_every?: Maybe<ProjectTaskWhereInput>;
  TaskProjects_some?: Maybe<ProjectTaskWhereInput>;
  TaskProjects_none?: Maybe<ProjectTaskWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Members_every?: Maybe<TaskMemberWhereInput>;
  Members_some?: Maybe<TaskMemberWhereInput>;
  Members_none?: Maybe<TaskMemberWhereInput>;
  Parent?: Maybe<TaskWhereInput>;
  Childs_every?: Maybe<TaskWhereInput>;
  Childs_some?: Maybe<TaskWhereInput>;
  Childs_none?: Maybe<TaskWhereInput>;
  RelatedFrom_every?: Maybe<TaskWhereInput>;
  RelatedFrom_some?: Maybe<TaskWhereInput>;
  RelatedFrom_none?: Maybe<TaskWhereInput>;
  RelatedTo_every?: Maybe<TaskWhereInput>;
  RelatedTo_some?: Maybe<TaskWhereInput>;
  RelatedTo_none?: Maybe<TaskWhereInput>;
  Timers_every?: Maybe<TimerWhereInput>;
  Timers_some?: Maybe<TimerWhereInput>;
  Timers_none?: Maybe<TimerWhereInput>;
  Reactions_every?: Maybe<TaskReactionWhereInput>;
  Reactions_some?: Maybe<TaskReactionWhereInput>;
  Reactions_none?: Maybe<TaskReactionWhereInput>;
  ChatRoom?: Maybe<ChatRoomWhereInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionWhereInput>;
  TaskTechnologies_every?: Maybe<TaskTechnologyWhereInput>;
  TaskTechnologies_some?: Maybe<TaskTechnologyWhereInput>;
  TaskTechnologies_none?: Maybe<TaskTechnologyWhereInput>;
  Comments_every?: Maybe<ResourceWhereInput>;
  Comments_some?: Maybe<ResourceWhereInput>;
  Comments_none?: Maybe<ResourceWhereInput>;
}

export enum TaskStatus {
  NEW = 'New',
  ACCEPTED = 'Accepted',
  REJECTED = 'Rejected',
  PROGRESS = 'Progress',
  PAUSED = 'Paused',
  DONE = 'Done',
  DISCUSS = 'Discuss',
  APPROVED = 'Approved',
  REVISIONSREQUIRED = 'RevisionsRequired',
  COMPLETED = 'Completed'
}

export interface TaskMemberWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskMemberWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskMemberWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskMemberWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TaskMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TaskMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TaskMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TaskMemberStatus>>;
  CreatedBy?: Maybe<UserWhereInput>;
  Task?: Maybe<TaskWhereInput>;
  User?: Maybe<UserWhereInput>;
}

export enum TaskMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired',
  QUIT = 'Quit'
}

export interface TimerWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TimerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TimerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TimerWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  stopedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  stopedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  stopedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  stopedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  stopedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  stopedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  stopedAt_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Task?: Maybe<TaskWhereInput>;
}

export interface TaskReactionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskReactionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskReactionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskReactionWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<TaskReactionType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<TaskReactionType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<TaskReactionType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<TaskReactionType>>;
  CreatedBy?: Maybe<UserWhereInput>;
  Task?: Maybe<TaskWhereInput>;
}

export enum TaskReactionType {
  UPVOTE = 'UpVote'
}

export interface ChatRoomWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  image_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  image_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  image_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  image_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  image_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  image_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  image_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  image_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  image_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  image_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  image_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  image_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  image_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublic_not?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  allowAnonymous_not?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  sandbox_not?: Maybe<Scalars['Boolean']>;
  Members_every?: Maybe<UserWhereInput>;
  Members_some?: Maybe<UserWhereInput>;
  Members_none?: Maybe<UserWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Messages_every?: Maybe<ChatMessageWhereInput>;
  Messages_some?: Maybe<ChatMessageWhereInput>;
  Messages_none?: Maybe<ChatMessageWhereInput>;
  Invitations_every?: Maybe<ChatRoomInvitationWhereInput>;
  Invitations_some?: Maybe<ChatRoomInvitationWhereInput>;
  Invitations_none?: Maybe<ChatRoomInvitationWhereInput>;
  CallRequests_every?: Maybe<CallRequestWhereInput>;
  CallRequests_some?: Maybe<CallRequestWhereInput>;
  CallRequests_none?: Maybe<CallRequestWhereInput>;
  Task?: Maybe<TaskWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
}

export interface ChatMessageWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Room?: Maybe<ChatRoomWhereInput>;
  ReadedBy_every?: Maybe<ChatMessageReadedWhereInput>;
  ReadedBy_some?: Maybe<ChatMessageReadedWhereInput>;
  ReadedBy_none?: Maybe<ChatMessageReadedWhereInput>;
}

export interface ChatMessageReadedWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageReadedWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageReadedWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageReadedWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  Message?: Maybe<ChatMessageWhereInput>;
  User?: Maybe<UserWhereInput>;
}

export interface ChatRoomInvitationWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomInvitationWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
  User?: Maybe<UserWhereInput>;
  ChatRoom?: Maybe<ChatRoomWhereInput>;
  Notice?: Maybe<NoticeWhereInput>;
}

export interface NoticeWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NoticeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NoticeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NoticeWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<NoticeType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<NoticeType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<NoticeType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<NoticeType>>;
  User?: Maybe<UserWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  ChatMessage?: Maybe<ChatMessageWhereInput>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitationWhereInput>;
}

export enum NoticeType {
  CHATMESSAGE = 'ChatMessage',
  CALL = 'Call',
  CALLREQUEST = 'CallRequest',
  CHATROOMINVITATION = 'ChatRoomInvitation'
}

export interface CallRequestWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CallRequestWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CallRequestWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CallRequestWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<CallRequestStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<CallRequestStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<CallRequestStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<CallRequestStatus>>;
  startedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startedAt_gte?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endedAt_gte?: Maybe<Scalars['DateTime']>;
  Called?: Maybe<UserWhereInput>;
  Caller?: Maybe<UserWhereInput>;
  Room?: Maybe<ChatRoomWhereInput>;
}

export enum CallRequestStatus {
  CREATED = 'Created',
  REJECTED = 'Rejected',
  ACCEPTED = 'Accepted',
  STARTED = 'Started',
  CANCELED = 'Canceled',
  MISSED = 'Missed',
  ENDED = 'Ended',
  ERROR = 'Error',
  BILLED = 'Billed'
}

export interface CodeChallengeCompletionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeCompletionWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  content?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  content_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  content_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  content_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  content_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  content_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  content_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  content_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  content_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  content_not_ends_with?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  success_not?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserWhereInput>;
  CodeChallenge?: Maybe<CodeChallengeWhereInput>;
  Task?: Maybe<TaskWhereInput>;
}

export interface CodeChallengeWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  dashedName_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  dashedName_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  dashedName_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  dashedName_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  dashedName_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  dashedName_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  dashedName_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  dashedName_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  dashedName_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  dashedName_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  dashedName_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  dashedName_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  dashedName_not_ends_with?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  localeTitle_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  localeTitle_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  localeTitle_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  localeTitle_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  localeTitle_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  localeTitle_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  localeTitle_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  localeTitle_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  localeTitle_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  localeTitle_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  localeTitle_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  localeTitle_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  localeTitle_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  challengeType_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  challengeType_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  challengeType_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  challengeType_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  challengeType_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  challengeType_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  challengeType_gte?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  forumTopicId_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  forumTopicId_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  forumTopicId_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  forumTopicId_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  forumTopicId_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  forumTopicId_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  forumTopicId_gte?: Maybe<Scalars['Int']>;
  instructions?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  instructions_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instructions_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  instructions_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  instructions_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  instructions_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  instructions_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  instructions_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  instructions_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  instructions_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  instructions_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  instructions_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  instructions_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  instructions_not_ends_with?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  videoUrl_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  videoUrl_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  videoUrl_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  videoUrl_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  videoUrl_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  videoUrl_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  videoUrl_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  videoUrl_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  videoUrl_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  videoUrl_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  videoUrl_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  videoUrl_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  videoUrl_not_ends_with?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  order_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  order_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  order_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  order_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  order_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  order_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  order_gte?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  superOrder_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  superOrder_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  superOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  superOrder_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  superOrder_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  superOrder_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  superOrder_gte?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  challengeOrder_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  challengeOrder_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  challengeOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  challengeOrder_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  challengeOrder_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  challengeOrder_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  challengeOrder_gte?: Maybe<Scalars['Int']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isRequired_not?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPrivate_not?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isBeta_not?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  template_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  template_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  template_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  template_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  template_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  template_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  template_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  template_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  template_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  template_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  template_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  template_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  template_not_ends_with?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  time_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  time_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  time_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  time_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  time_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  time_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  time_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  time_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  time_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  time_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  time_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  time_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  time_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Block?: Maybe<CodeChallengeBlockWhereInput>;
  Completions_every?: Maybe<CodeChallengeCompletionWhereInput>;
  Completions_some?: Maybe<CodeChallengeCompletionWhereInput>;
  Completions_none?: Maybe<CodeChallengeCompletionWhereInput>;
  Topic?: Maybe<ResourceWhereInput>;
}

export interface CodeChallengeBlockWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeBlockWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockWhereInput>;
  Children_every?: Maybe<CodeChallengeBlockWhereInput>;
  Children_some?: Maybe<CodeChallengeBlockWhereInput>;
  Children_none?: Maybe<CodeChallengeBlockWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Challenges_every?: Maybe<CodeChallengeWhereInput>;
  Challenges_some?: Maybe<CodeChallengeWhereInput>;
  Challenges_none?: Maybe<CodeChallengeWhereInput>;
}

export interface TaskTechnologyWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskTechnologyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskTechnologyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskTechnologyWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  level_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  level_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  level_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  level_gte?: Maybe<Scalars['Int']>;
  Task?: Maybe<TaskWhereInput>;
  Technology?: Maybe<TechnologyWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export interface TechnologyWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  site_url_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  site_url_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  site_url_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  site_url_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  site_url_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  site_url_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  site_url_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  site_url_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  site_url_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  site_url_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  site_url_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  site_url_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  site_url_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  UserTechnologies_every?: Maybe<UserTechnologyWhereInput>;
  UserTechnologies_some?: Maybe<UserTechnologyWhereInput>;
  UserTechnologies_none?: Maybe<UserTechnologyWhereInput>;
  TaskTechnologies_every?: Maybe<TaskTechnologyWhereInput>;
  TaskTechnologies_some?: Maybe<TaskTechnologyWhereInput>;
  TaskTechnologies_none?: Maybe<TaskTechnologyWhereInput>;
}

export interface UserTechnologyWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserTechnologyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserTechnologyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserTechnologyWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  date_from?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_from_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_from_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_from_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_from_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_from_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_from_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_from_gte?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_till_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_till_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_till_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_till_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_till_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_till_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_till_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<UserTechnologyStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<UserTechnologyStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<UserTechnologyStatus>>;
  level?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  level_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  level_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  level_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  level_gte?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Technology?: Maybe<TechnologyWhereInput>;
}

export enum UserTechnologyStatus {
  /** Планирую изучать */
  PLANTOSTUDY = 'PlanToStudy',
  /** Отказался изучать */
  REFUSEDTOSTUDY = 'RefusedToStudy',
  /** Изучаю */
  STUDY = 'Study',
  /** Иногда использую */
  RARELYUSE = 'RarelyUse',
  /** Активно использую */
  ACTIVEUSE = 'ActiveUse',
  /** Больше не использую */
  NOLONGERUSE = 'NoLongerUse'
}

export interface TeamWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TeamStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TeamStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TeamStatus>>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  website_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  website_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  website_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  website_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  website_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  website_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  website_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  website_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  website_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  website_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  website_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  website_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  website_not_ends_with?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  phone_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamWhereInput>;
  Childs_every?: Maybe<TeamWhereInput>;
  Childs_some?: Maybe<TeamWhereInput>;
  Childs_none?: Maybe<TeamWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Members_every?: Maybe<TeamMemberWhereInput>;
  Members_some?: Maybe<TeamMemberWhereInput>;
  Members_none?: Maybe<TeamMemberWhereInput>;
  Projects_every?: Maybe<ProjectWhereInput>;
  Projects_some?: Maybe<ProjectWhereInput>;
  Projects_none?: Maybe<ProjectWhereInput>;
  OrderedProjects_every?: Maybe<ProjectWhereInput>;
  OrderedProjects_some?: Maybe<ProjectWhereInput>;
  OrderedProjects_none?: Maybe<ProjectWhereInput>;
  Resource?: Maybe<ResourceWhereInput>;
}

export enum TeamStatus {
  ACTIVE = 'Active',
  INACTIVE = 'Inactive'
}

export interface TeamMemberWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamMemberWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamMemberWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamMemberWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TeamMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TeamMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TeamMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TeamMemberStatus>>;
  Team?: Maybe<TeamWhereInput>;
  User?: Maybe<UserWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum TeamMemberStatus {
  INVITED = 'Invited',
  ACTIVE = 'Active',
  FIRED = 'Fired'
}

export interface EthAccountWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthAccountWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthAccountWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthAccountWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<EthAccountType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<EthAccountType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<EthAccountType>>;
  source?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  source_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  source_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  bytecode_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bytecode_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  bytecode_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  bytecode_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  bytecode_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  bytecode_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  bytecode_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  bytecode_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  bytecode_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  bytecode_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  bytecode_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  bytecode_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  bytecode_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Transaction?: Maybe<EthTransactionWhereInput>;
  IncomeTransactions_every?: Maybe<EthTransactionWhereInput>;
  IncomeTransactions_some?: Maybe<EthTransactionWhereInput>;
  IncomeTransactions_none?: Maybe<EthTransactionWhereInput>;
  OutcomeTransactions_every?: Maybe<EthTransactionWhereInput>;
  OutcomeTransactions_some?: Maybe<EthTransactionWhereInput>;
  OutcomeTransactions_none?: Maybe<EthTransactionWhereInput>;
  ContractSource?: Maybe<EthContractSourceWhereInput>;
  BlocksMined_every?: Maybe<EthBlockWhereInput>;
  BlocksMined_some?: Maybe<EthBlockWhereInput>;
  BlocksMined_none?: Maybe<EthBlockWhereInput>;
  UserAuthed?: Maybe<UserWhereInput>;
  Project?: Maybe<ProjectWhereInput>;
  Resources_every?: Maybe<ResourceWhereInput>;
  Resources_some?: Maybe<ResourceWhereInput>;
  Resources_none?: Maybe<ResourceWhereInput>;
}

export enum EthAccountType {
  ACCOUNT = 'Account',
  CONTRACT = 'Contract'
}

export interface EthTransactionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthTransactionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthTransactionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthTransactionWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  chainId?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  chainId_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  chainId_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  chainId_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  chainId_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  chainId_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  chainId_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  chainId_gte?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  amount_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  amount_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  amount_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  amount_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  amount_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  amount_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  amount_gte?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  input_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  input_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  input_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  input_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  input_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  input_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  input_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  input_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  input_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  input_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  input_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  input_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  input_not_ends_with?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  index_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  index_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  index_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  index_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  index_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  index_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  index_gte?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<EthTransactionType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<EthTransactionType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<EthTransactionType>>;
  v?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  v_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  v_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  v_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  v_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  v_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  v_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  v_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  v_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  v_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  v_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  v_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  v_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  v_not_ends_with?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  r_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  r_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  r_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  r_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  r_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  r_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  r_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  r_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  r_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  r_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  r_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  r_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  r_not_ends_with?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  s_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  s_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  s_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  s_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  s_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  s_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  s_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  s_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  s_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  s_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  s_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  s_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  s_not_ends_with?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountWhereInput>;
  Receiver?: Maybe<EthAccountWhereInput>;
  Account?: Maybe<EthAccountWhereInput>;
  Block?: Maybe<EthBlockWhereInput>;
}

export enum EthTransactionType {
  CONTRACTCREATE = 'ContractCreate',
  CONTRACTREAD = 'ContractRead',
  CONTRACTCALL = 'ContractCall',
  SENDETH = 'SendEth',
  SENDTOKEN = 'SendToken'
}

export interface EthBlockWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthBlockWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthBlockWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthBlockWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  hash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  hash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  hash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  hash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  hash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  hash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  hash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  hash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  hash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  hash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  hash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  hash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  hash_not_ends_with?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  number_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  number_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  number_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  number_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  number_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  number_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  number_gte?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  difficulty_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  difficulty_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  difficulty_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  difficulty_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  difficulty_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  difficulty_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  difficulty_gte?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  totalDifficulty_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  totalDifficulty_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  totalDifficulty_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  totalDifficulty_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  totalDifficulty_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  totalDifficulty_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  totalDifficulty_gte?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  extraData_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  extraData_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  extraData_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  extraData_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  extraData_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  extraData_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  extraData_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  extraData_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  extraData_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  extraData_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  extraData_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  extraData_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  extraData_not_ends_with?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  gasLimit_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  gasLimit_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  gasLimit_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  gasLimit_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  gasLimit_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  gasLimit_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  gasLimit_gte?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  gasUsed_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  gasUsed_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  gasUsed_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  gasUsed_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  gasUsed_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  gasUsed_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  gasUsed_gte?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mixHash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mixHash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mixHash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mixHash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mixHash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  mixHash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mixHash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  mixHash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  mixHash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  mixHash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mixHash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  mixHash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mixHash_not_ends_with?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  nonce_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  nonce_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  nonce_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  nonce_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  nonce_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  nonce_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  nonce_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  nonce_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  nonce_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  nonce_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  nonce_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  nonce_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  nonce_not_ends_with?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  parentHash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  parentHash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  parentHash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  parentHash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  parentHash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  parentHash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  parentHash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  parentHash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  parentHash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  parentHash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  parentHash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  parentHash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  parentHash_not_ends_with?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  receiptsRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  receiptsRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  receiptsRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  receiptsRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  receiptsRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  receiptsRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  receiptsRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  receiptsRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  receiptsRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  receiptsRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  receiptsRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  receiptsRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  receiptsRoot_not_ends_with?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sha3Uncles_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sha3Uncles_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  sha3Uncles_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sha3Uncles_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sha3Uncles_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  sha3Uncles_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sha3Uncles_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  sha3Uncles_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  sha3Uncles_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  sha3Uncles_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  sha3Uncles_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  sha3Uncles_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sha3Uncles_not_ends_with?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  stateRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stateRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  stateRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  stateRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  stateRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  stateRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  stateRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  stateRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  stateRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  stateRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  stateRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  stateRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  stateRoot_not_ends_with?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  transactionsRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  transactionsRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  transactionsRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  transactionsRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  transactionsRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  transactionsRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  transactionsRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  transactionsRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  transactionsRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  transactionsRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  transactionsRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  transactionsRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  transactionsRoot_not_ends_with?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  transactions_count_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  transactions_count_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  transactions_count_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  transactions_count_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  transactions_count_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  transactions_count_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  transactions_count_gte?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountWhereInput>;
  Transactions_every?: Maybe<EthTransactionWhereInput>;
  Transactions_some?: Maybe<EthTransactionWhereInput>;
  Transactions_none?: Maybe<EthTransactionWhereInput>;
  Uncles_every?: Maybe<EthBlockWhereInput>;
  Uncles_some?: Maybe<EthBlockWhereInput>;
  Uncles_none?: Maybe<EthBlockWhereInput>;
}

export interface EthContractSourceWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthContractSourceWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthContractSourceWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthContractSourceWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  source_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  source_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Accounts_every?: Maybe<EthAccountWhereInput>;
  Accounts_some?: Maybe<EthAccountWhereInput>;
  Accounts_none?: Maybe<EthAccountWhereInput>;
}

export interface VoteWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<VoteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<VoteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<VoteWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  value?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  value_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  value_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  value_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  value_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  value_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  value_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  value_gte?: Maybe<Scalars['Float']>;
  Resource?: Maybe<ResourceWhereInput>;
  User?: Maybe<UserWhereInput>;
}

export interface ResourceTagWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceTagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceTagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceTagWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TagStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TagStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TagStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TagStatus>>;
  Resource?: Maybe<ResourceWhereInput>;
  Tag?: Maybe<TagWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum TagStatus {
  ACTIVE = 'Active',
  MODERATED = 'Moderated',
  BLOCKED = 'Blocked'
}

export interface TagWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TagWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TagWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TagWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TagStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TagStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TagStatus>>;
  Resources_every?: Maybe<ResourceTagWhereInput>;
  Resources_some?: Maybe<ResourceTagWhereInput>;
  Resources_none?: Maybe<ResourceTagWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export interface NotificationTypeWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NotificationTypeWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NotificationTypeWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NotificationTypeWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  comment_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  comment_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  comment_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  comment_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  comment_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  comment_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  comment_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  comment_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  comment_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  comment_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  comment_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  comment_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  comment_not_ends_with?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export interface PositionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PositionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PositionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PositionWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
}

export interface LetterWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetterWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetterWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetterWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  subject_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subject_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  subject_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  subject_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  subject_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  subject_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  subject_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  subject_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  subject_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  subject_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  subject_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  subject_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  subject_not_ends_with?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<LetterStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<LetterStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<LetterStatus>>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleteOnSend_not?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  replyTo_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  replyTo_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  replyTo_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  replyTo_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  replyTo_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  replyTo_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  replyTo_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  replyTo_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  replyTo_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  replyTo_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  replyTo_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  replyTo_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  replyTo_not_ends_with?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  returnTo_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  returnTo_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  returnTo_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  returnTo_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  returnTo_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  returnTo_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  returnTo_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  returnTo_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  returnTo_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  returnTo_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  returnTo_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  returnTo_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  returnTo_not_ends_with?: Maybe<Scalars['String']>;
  User?: Maybe<UserWhereInput>;
}

export enum LetterStatus {
  CREATED = 'Created',
  PROCESSING = 'Processing',
  SENDED = 'Sended',
  ERROR = 'Error'
}

export interface ImportWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ImportWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ImportWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ImportWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ImportStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ImportStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ImportStatus>>;
  Logs_every?: Maybe<LogWhereInput>;
  Logs_some?: Maybe<LogWhereInput>;
  Logs_none?: Maybe<LogWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum ImportStatus {
  CREATED = 'Created',
  STARTED = 'Started',
  ERROR = 'Error',
  COMPLETED = 'Completed',
  STOPED = 'Stoped'
}

export interface LogWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  level?: Maybe<LogLevel>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<LogLevel>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<LogLevel>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<LogLevel>>;
  objectType?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  objectType_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  objectType_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  objectType_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  objectType_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  objectType_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  objectType_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  objectType_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  objectType_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  objectType_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  objectType_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  objectType_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  objectType_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  objectType_not_ends_with?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  stack_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stack_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  stack_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  stack_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  stack_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  stack_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  stack_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  stack_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  stack_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  stack_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  stack_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  stack_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  stack_not_ends_with?: Maybe<Scalars['String']>;
  Import?: Maybe<ImportWhereInput>;
}

export enum LogLevel {
  INFO = 'Info',
  NOTICE = 'Notice',
  WARNING = 'Warning',
  ERROR = 'Error',
  FATAL = 'Fatal'
}

export interface CareerWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CareerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CareerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CareerWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  start_date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  start_date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_date_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum GalleryOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC'
}

export interface Gallery extends Node {
  __typename?: 'Gallery';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  Files?: Maybe<Array<File>>;
  CreatedBy?: Maybe<User>;
  Resource?: Maybe<Resource>;
}


export type GalleryFilesArgs = {
  where?: Maybe<FileWhereInput>;
  orderBy?: Maybe<FileOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

/** An object with an ID */
export type Node = {
  /** The id of the object. */
  id: Scalars['ID'];
};

export enum FileOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  PATH_ASC = 'path_ASC',
  PATH_DESC = 'path_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  FILENAME_ASC = 'filename_ASC',
  FILENAME_DESC = 'filename_DESC',
  MIMETYPE_ASC = 'mimetype_ASC',
  MIMETYPE_DESC = 'mimetype_DESC',
  ENCODING_ASC = 'encoding_ASC',
  ENCODING_DESC = 'encoding_DESC',
  HASH_ASC = 'hash_ASC',
  HASH_DESC = 'hash_DESC',
  SIZE_ASC = 'size_ASC',
  SIZE_DESC = 'size_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC'
}

export interface File extends Node {
  __typename?: 'File';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<Gallery>;
  CreatedBy: User;
  ImageResource?: Maybe<Resource>;
}

export interface User extends Node {
  __typename?: 'User';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  sudo?: Maybe<Scalars['Boolean']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  Groups?: Maybe<Array<UserGroup>>;
  CreatedUsers?: Maybe<Array<User>>;
  CreatedBy?: Maybe<User>;
  LogedIns?: Maybe<Array<LogedIn>>;
  Resources?: Maybe<Array<Resource>>;
  Votes?: Maybe<Array<Vote>>;
  NotificationTypes?: Maybe<Array<NotificationType>>;
  NotificationTypesCreated?: Maybe<Array<NotificationType>>;
  Tags?: Maybe<Array<Tag>>;
  ResourceTags?: Maybe<Array<ResourceTag>>;
  EthContractSourcesCreated?: Maybe<Array<EthContractSource>>;
  EthAccounts?: Maybe<Array<EthAccount>>;
  Teams?: Maybe<Array<TeamMember>>;
  TeamsCreated?: Maybe<Array<Team>>;
  Projects?: Maybe<Array<ProjectMember>>;
  ProjectsCreated?: Maybe<Array<Project>>;
  Tasks?: Maybe<Array<TaskMember>>;
  Timers?: Maybe<Array<Timer>>;
  PrismaProjects?: Maybe<Array<Project>>;
  CodeChallengeCompletions?: Maybe<Array<CodeChallengeCompletion>>;
  UserTechnologies?: Maybe<Array<UserTechnology>>;
  TasksCreated?: Maybe<Array<Task>>;
  /** Разрешены ли чат-сообщения от анонимных пользователей */
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли анонимному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли авторизованному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  hasEmail: Scalars['Boolean'];
  hasPhone: Scalars['Boolean'];
  marketplaceToken?: Maybe<Scalars['String']>;
  hidden?: Maybe<Scalars['Boolean']>;
  EthAccountAuthed?: Maybe<EthAccount>;
  worlds?: Maybe<Array<World>>;
  settings?: Maybe<Settings>;
}


export type UserGroupsArgs = {
  where?: Maybe<UserGroupWhereInput>;
  orderBy?: Maybe<UserGroupOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserCreatedUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserCreatedByArgs = {
  where?: Maybe<UserWhereInput>;
};


export type UserLogedInsArgs = {
  where?: Maybe<LogedInWhereInput>;
  orderBy?: Maybe<LogedInOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserResourcesArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserVotesArgs = {
  where?: Maybe<VoteWhereInput>;
  orderBy?: Maybe<VoteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserNotificationTypesArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
  orderBy?: Maybe<NotificationTypeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserNotificationTypesCreatedArgs = {
  where?: Maybe<NotificationTypeWhereInput>;
  orderBy?: Maybe<NotificationTypeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTagsArgs = {
  where?: Maybe<TagWhereInput>;
  orderBy?: Maybe<TagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserResourceTagsArgs = {
  where?: Maybe<ResourceTagWhereInput>;
  orderBy?: Maybe<ResourceTagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserEthContractSourcesCreatedArgs = {
  where?: Maybe<EthContractSourceWhereInput>;
  orderBy?: Maybe<EthContractSourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserEthAccountsArgs = {
  where?: Maybe<EthAccountWhereInput>;
  orderBy?: Maybe<EthAccountOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTeamsArgs = {
  where?: Maybe<TeamMemberWhereInput>;
  orderBy?: Maybe<TeamMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTeamsCreatedArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserProjectsArgs = {
  where?: Maybe<ProjectMemberWhereInput>;
  orderBy?: Maybe<ProjectMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserProjectsCreatedArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTasksArgs = {
  where?: Maybe<TaskMemberWhereInput>;
  orderBy?: Maybe<TaskMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTimersArgs = {
  where?: Maybe<TimerWhereInput>;
  orderBy?: Maybe<TimerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserPrismaProjectsArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserCodeChallengeCompletionsArgs = {
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  orderBy?: Maybe<CodeChallengeCompletionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserUserTechnologiesArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
  orderBy?: Maybe<UserTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserTasksCreatedArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserEthAccountAuthedArgs = {
  where?: Maybe<EthAccountWhereInput>;
};


export type UserWorldsArgs = {
  where?: Maybe<WorldWhereInput>;
  orderBy?: Maybe<WorldOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type UserSettingsArgs = {
  where?: Maybe<SettingsWhereInput>;
};

export enum UserGroupOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC'
}

export interface UserGroup extends Node {
  __typename?: 'UserGroup';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  Users?: Maybe<Array<User>>;
}


export type UserGroupUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum UserOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  USERNAME_ASC = 'username_ASC',
  USERNAME_DESC = 'username_DESC',
  EMAIL_ASC = 'email_ASC',
  EMAIL_DESC = 'email_DESC',
  PHONE_ASC = 'phone_ASC',
  PHONE_DESC = 'phone_DESC',
  SHOWEMAIL_ASC = 'showEmail_ASC',
  SHOWEMAIL_DESC = 'showEmail_DESC',
  SHOWPHONE_ASC = 'showPhone_ASC',
  SHOWPHONE_DESC = 'showPhone_DESC',
  PASSWORD_ASC = 'password_ASC',
  PASSWORD_DESC = 'password_DESC',
  FULLNAME_ASC = 'fullname_ASC',
  FULLNAME_DESC = 'fullname_DESC',
  IMAGE_ASC = 'image_ASC',
  IMAGE_DESC = 'image_DESC',
  ADDRESS_ASC = 'address_ASC',
  ADDRESS_DESC = 'address_DESC',
  ACTIVE_ASC = 'active_ASC',
  ACTIVE_DESC = 'active_DESC',
  ACTIVATED_ASC = 'activated_ASC',
  ACTIVATED_DESC = 'activated_DESC',
  DELETED_ASC = 'deleted_ASC',
  DELETED_DESC = 'deleted_DESC',
  HIDDEN_ASC = 'hidden_ASC',
  HIDDEN_DESC = 'hidden_DESC',
  SUDO_ASC = 'sudo_ASC',
  SUDO_DESC = 'sudo_DESC',
  MARKETPLACETOKEN_ASC = 'marketplaceToken_ASC',
  MARKETPLACETOKEN_DESC = 'marketplaceToken_DESC',
  ACCEPTCHATMESSAGEANONYMOUS_ASC = 'acceptChatMessageAnonymous_ASC',
  ACCEPTCHATMESSAGEANONYMOUS_DESC = 'acceptChatMessageAnonymous_DESC',
  ACCEPTNEWCHATROOMANONYMOUS_ASC = 'acceptNewChatRoomAnonymous_ASC',
  ACCEPTNEWCHATROOMANONYMOUS_DESC = 'acceptNewChatRoomAnonymous_DESC',
  ACCEPTNEWCHATROOM_ASC = 'acceptNewChatRoom_ASC',
  ACCEPTNEWCHATROOM_DESC = 'acceptNewChatRoom_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC'
}

export enum LogedInOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  FAKE_ASC = 'fake_ASC',
  FAKE_DESC = 'fake_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC'
}

export interface LogedIn extends Node {
  __typename?: 'LogedIn';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  fake?: Maybe<Scalars['Boolean']>;
  User: User;
  updatedAt: Scalars['DateTime'];
}

export enum ResourceOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  LONGTITLE_ASC = 'longtitle_ASC',
  LONGTITLE_DESC = 'longtitle_DESC',
  CONTENT_ASC = 'content_ASC',
  CONTENT_DESC = 'content_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC',
  PUBLISHED_ASC = 'published_ASC',
  PUBLISHED_DESC = 'published_DESC',
  DELETED_ASC = 'deleted_ASC',
  DELETED_DESC = 'deleted_DESC',
  HIDEMENU_ASC = 'hidemenu_ASC',
  HIDEMENU_DESC = 'hidemenu_DESC',
  SEARCHABLE_ASC = 'searchable_ASC',
  SEARCHABLE_DESC = 'searchable_DESC',
  URI_ASC = 'uri_ASC',
  URI_DESC = 'uri_DESC',
  ISFOLDER_ASC = 'isfolder_ASC',
  ISFOLDER_DESC = 'isfolder_DESC',
  RATING_ASC = 'rating_ASC',
  RATING_DESC = 'rating_DESC',
  POSITIVEVOTESCOUNT_ASC = 'positiveVotesCount_ASC',
  POSITIVEVOTESCOUNT_DESC = 'positiveVotesCount_DESC',
  NEGATIVEVOTESCOUNT_ASC = 'negativeVotesCount_ASC',
  NEGATIVEVOTESCOUNT_DESC = 'negativeVotesCount_DESC',
  NEUTRALVOTESCOUNT_ASC = 'neutralVotesCount_ASC',
  NEUTRALVOTESCOUNT_DESC = 'neutralVotesCount_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC',
  MOCKUPDATE_ASC = 'mockUpdate_ASC',
  MOCKUPDATE_DESC = 'mockUpdate_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  COMMENTOLDID_ASC = 'commentOldID_ASC',
  COMMENTOLDID_DESC = 'commentOldID_DESC',
  CLASS_KEY_ASC = 'class_key_ASC',
  CLASS_KEY_DESC = 'class_key_DESC',
  TEMPLATE_ASC = 'template_ASC',
  TEMPLATE_DESC = 'template_DESC'
}

export interface Resource extends Node {
  __typename?: 'Resource';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  deleted: Scalars['Boolean'];
  hidemenu: Scalars['Boolean'];
  searchable: Scalars['Boolean'];
  uri: Scalars['String'];
  isfolder: Scalars['Boolean'];
  CreatedBy: User;
  Parent?: Maybe<Resource>;
  Childs?: Maybe<Array<Resource>>;
  Image?: Maybe<File>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  CommentTarget?: Maybe<Resource>;
  Topic?: Maybe<Resource>;
  Comments?: Maybe<Array<Resource>>;
  Votes?: Maybe<Array<Vote>>;
  Tags?: Maybe<Array<ResourceTag>>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
  Topics?: Maybe<Array<Resource>>;
  Blog?: Maybe<Resource>;
  Service?: Maybe<Service>;
  Project?: Maybe<Project>;
  Team?: Maybe<Team>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  Galleries?: Maybe<Array<Gallery>>;
  CodeChallenge?: Maybe<CodeChallenge>;
  Task?: Maybe<Task>;
}


export type ResourceCreatedByArgs = {
  where?: Maybe<UserWhereInput>;
};


export type ResourceParentArgs = {
  where?: Maybe<ResourceWhereInput>;
};


export type ResourceChildsArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ResourceImageArgs = {
  where?: Maybe<FileWhereInput>;
};


export type ResourceCommentsArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ResourceVotesArgs = {
  where?: Maybe<VoteWhereInput>;
  orderBy?: Maybe<VoteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ResourceTagsArgs = {
  where?: Maybe<ResourceTagWhereInput>;
  orderBy?: Maybe<ResourceTagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ResourceTopicsArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ResourceBlogArgs = {
  where?: Maybe<ResourceWhereInput>;
};


export type ResourceServiceArgs = {
  where?: Maybe<ServiceWhereInput>;
};


export type ResourceProjectArgs = {
  where?: Maybe<ProjectWhereInput>;
};


export type ResourceTeamArgs = {
  where?: Maybe<TeamWhereInput>;
};


export type ResourceGalleriesArgs = {
  where?: Maybe<GalleryWhereInput>;
  orderBy?: Maybe<GalleryOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export enum VoteOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  VALUE_ASC = 'value_ASC',
  VALUE_DESC = 'value_DESC'
}

export interface Vote extends Node {
  __typename?: 'Vote';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  Resource: Resource;
  User: User;
  value: Scalars['Float'];
}

export enum ResourceTagOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export interface ResourceTag extends Node {
  __typename?: 'ResourceTag';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status: TagStatus;
  Resource: Resource;
  Tag: Tag;
  CreatedBy: User;
}

export interface Tag extends Node {
  __typename?: 'Tag';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  status: TagStatus;
  Resources?: Maybe<Array<ResourceTag>>;
  CreatedBy: User;
}


export type TagResourcesArgs = {
  where?: Maybe<ResourceTagWhereInput>;
  orderBy?: Maybe<ResourceTagOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface Service extends Node {
  __typename?: 'Service';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<User>;
  Projects?: Maybe<Array<ProjectMember>>;
  Parent?: Maybe<Service>;
  Childs?: Maybe<Array<Service>>;
  rank?: Maybe<Scalars['Int']>;
  Category?: Maybe<ServiceCategory>;
  oldID?: Maybe<Scalars['Int']>;
  Resource: Resource;
}


export type ServiceProjectsArgs = {
  where?: Maybe<ProjectMemberWhereInput>;
  orderBy?: Maybe<ProjectMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ServiceChildsArgs = {
  where?: Maybe<ServiceWhereInput>;
  orderBy?: Maybe<ServiceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum ProjectMemberOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export interface ProjectMember extends Node {
  __typename?: 'ProjectMember';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  Project: Project;
  User: User;
  Services?: Maybe<Array<Service>>;
  status?: Maybe<ProjectMemberStatus>;
}


export type ProjectMemberServicesArgs = {
  where?: Maybe<ServiceWhereInput>;
  orderBy?: Maybe<ServiceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface Project extends Node {
  __typename?: 'Project';
  id: Scalars['ID'];
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  PrismaTemplates?: Maybe<Array<Template>>;
  PrismaUsers?: Maybe<Array<User>>;
  PrismaResources?: Maybe<Array<Resource>>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  Members?: Maybe<Array<ProjectMember>>;
  CreatedBy?: Maybe<User>;
  ProjectTasks?: Maybe<Array<ProjectTask>>;
  Team?: Maybe<Team>;
  Customers?: Maybe<Array<Team>>;
  ChatRoom?: Maybe<ChatRoom>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Image?: Maybe<File>;
  Resource?: Maybe<Resource>;
  type?: Maybe<ProjectType>;
  EthAccounts?: Maybe<Array<EthAccount>>;
}


export type ProjectPrismaTemplatesArgs = {
  where?: Maybe<TemplateWhereInput>;
  orderBy?: Maybe<TemplateOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectPrismaUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectPrismaResourcesArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectMembersArgs = {
  where?: Maybe<ProjectMemberWhereInput>;
  orderBy?: Maybe<ProjectMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectProjectTasksArgs = {
  where?: Maybe<ProjectTaskWhereInput>;
  orderBy?: Maybe<ProjectTaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectCustomersArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ProjectEthAccountsArgs = {
  where?: Maybe<EthAccountWhereInput>;
  orderBy?: Maybe<EthAccountOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TemplateOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  EXTERNALKEY_ASC = 'externalKey_ASC',
  EXTERNALKEY_DESC = 'externalKey_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  COMPONENT_ASC = 'component_ASC',
  COMPONENT_DESC = 'component_DESC',
  PROPS_ASC = 'props_ASC',
  PROPS_DESC = 'props_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  VARS_ASC = 'vars_ASC',
  VARS_DESC = 'vars_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC'
}

export interface Template extends Node {
  __typename?: 'Template';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<Template>;
  CreatedBy?: Maybe<User>;
  Project?: Maybe<Project>;
  PrismaProject?: Maybe<Project>;
}

export enum ProjectTaskOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC'
}

export interface ProjectTask extends Node {
  __typename?: 'ProjectTask';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy: User;
  Project: Project;
  Task: Task;
}

export interface Task extends Node {
  __typename?: 'Task';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status: TaskStatus;
  TaskProjects?: Maybe<Array<ProjectTask>>;
  CreatedBy?: Maybe<User>;
  Members?: Maybe<Array<TaskMember>>;
  Parent?: Maybe<Task>;
  Childs?: Maybe<Array<Task>>;
  RelatedFrom?: Maybe<Array<Task>>;
  RelatedTo?: Maybe<Array<Task>>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  Timers?: Maybe<Array<Timer>>;
  Reactions?: Maybe<Array<TaskReaction>>;
  ChatRoom?: Maybe<ChatRoom>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletion>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskTechnologies?: Maybe<Array<TaskTechnology>>;
  Comments?: Maybe<Array<Resource>>;
}


export type TaskTaskProjectsArgs = {
  where?: Maybe<ProjectTaskWhereInput>;
  orderBy?: Maybe<ProjectTaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskMembersArgs = {
  where?: Maybe<TaskMemberWhereInput>;
  orderBy?: Maybe<TaskMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskChildsArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskRelatedFromArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskRelatedToArgs = {
  where?: Maybe<TaskWhereInput>;
  orderBy?: Maybe<TaskOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskTimersArgs = {
  where?: Maybe<TimerWhereInput>;
  orderBy?: Maybe<TimerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskReactionsArgs = {
  where?: Maybe<TaskReactionWhereInput>;
  orderBy?: Maybe<TaskReactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskTaskTechnologiesArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
  orderBy?: Maybe<TaskTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TaskCommentsArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TaskMemberOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export interface TaskMember extends Node {
  __typename?: 'TaskMember';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  Task: Task;
  User: User;
  status: TaskMemberStatus;
}

export enum TaskOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  CONTENT_ASC = 'content_ASC',
  CONTENT_DESC = 'content_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  STARTDATEPLANING_ASC = 'startDatePlaning_ASC',
  STARTDATEPLANING_DESC = 'startDatePlaning_DESC',
  ENDDATEPLANING_ASC = 'endDatePlaning_ASC',
  ENDDATEPLANING_DESC = 'endDatePlaning_DESC',
  STARTDATE_ASC = 'startDate_ASC',
  STARTDATE_DESC = 'startDate_DESC',
  ENDDATE_ASC = 'endDate_ASC',
  ENDDATE_DESC = 'endDate_DESC',
  NEEDHELP_ASC = 'needHelp_ASC',
  NEEDHELP_DESC = 'needHelp_DESC'
}

export enum TimerOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STOPEDAT_ASC = 'stopedAt_ASC',
  STOPEDAT_DESC = 'stopedAt_DESC'
}

export interface Timer extends Node {
  __typename?: 'Timer';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<User>;
  Task: Task;
}

export enum TaskReactionOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC'
}

export interface TaskReaction extends Node {
  __typename?: 'TaskReaction';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  Task: Task;
  type?: Maybe<TaskReactionType>;
}

export interface ChatRoom extends Node {
  __typename?: 'ChatRoom';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  Members?: Maybe<Array<User>>;
  CreatedBy: User;
  Messages?: Maybe<Array<ChatMessage>>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Invitations?: Maybe<Array<ChatRoomInvitation>>;
  CallRequests?: Maybe<Array<CallRequest>>;
  Task?: Maybe<Task>;
  Project?: Maybe<Project>;
}


export type ChatRoomMembersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ChatRoomMessagesArgs = {
  where?: Maybe<ChatMessageWhereInput>;
  orderBy?: Maybe<ChatMessageOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ChatRoomInvitationsArgs = {
  where?: Maybe<ChatRoomInvitationWhereInput>;
  orderBy?: Maybe<ChatRoomInvitationOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ChatRoomCallRequestsArgs = {
  where?: Maybe<CallRequestWhereInput>;
  orderBy?: Maybe<CallRequestOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum ChatMessageOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CONTENT_ASC = 'content_ASC',
  CONTENT_DESC = 'content_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC'
}

export interface ChatMessage extends Node {
  __typename?: 'ChatMessage';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  Room?: Maybe<ChatRoom>;
  ReadedBy?: Maybe<Array<ChatMessageReaded>>;
}


export type ChatMessageReadedByArgs = {
  where?: Maybe<ChatMessageReadedWhereInput>;
  orderBy?: Maybe<ChatMessageReadedOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum ChatMessageReadedOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC'
}

export interface ChatMessageReaded extends Node {
  __typename?: 'ChatMessageReaded';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  Message: ChatMessage;
  User: User;
  updatedAt: Scalars['DateTime'];
}

export enum ChatRoomInvitationOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC'
}

export interface ChatRoomInvitation extends Node {
  __typename?: 'ChatRoomInvitation';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy: User;
  User: User;
  ChatRoom: ChatRoom;
  Notice?: Maybe<Notice>;
}

export interface Notice extends Node {
  __typename?: 'Notice';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type: NoticeType;
  User: User;
  CreatedBy?: Maybe<User>;
  ChatMessage?: Maybe<ChatMessage>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitation>;
}

export enum CallRequestOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CALLED_DESCRIPTIONS_ASC = 'called_descriptions_ASC',
  CALLED_DESCRIPTIONS_DESC = 'called_descriptions_DESC',
  CALLER_DESCRIPTIONS_ASC = 'caller_descriptions_ASC',
  CALLER_DESCRIPTIONS_DESC = 'caller_descriptions_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  STARTEDAT_ASC = 'startedAt_ASC',
  STARTEDAT_DESC = 'startedAt_DESC',
  ENDEDAT_ASC = 'endedAt_ASC',
  ENDEDAT_DESC = 'endedAt_DESC'
}

export interface CallRequest extends Node {
  __typename?: 'CallRequest';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  called_descriptions: Scalars['Json'];
  caller_descriptions: Scalars['Json'];
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called: User;
  Caller?: Maybe<User>;
  Room?: Maybe<ChatRoom>;
}

export interface CodeChallengeCompletion extends Node {
  __typename?: 'CodeChallengeCompletion';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  CodeChallenge: CodeChallenge;
  Task: Task;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallenge extends Node {
  __typename?: 'CodeChallenge';
  id: Scalars['ID'];
  externalKey?: Maybe<Scalars['ID']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  rank?: Maybe<Scalars['Int']>;
  Block: CodeChallengeBlock;
  Completions?: Maybe<Array<CodeChallengeCompletion>>;
  Topic?: Maybe<Resource>;
}


export type CodeChallengeCompletionsArgs = {
  where?: Maybe<CodeChallengeCompletionWhereInput>;
  orderBy?: Maybe<CodeChallengeCompletionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface CodeChallengeBlock extends Node {
  __typename?: 'CodeChallengeBlock';
  id: Scalars['ID'];
  externalKey?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlock>;
  Children?: Maybe<Array<CodeChallengeBlock>>;
  CreatedBy?: Maybe<User>;
  Challenges?: Maybe<Array<CodeChallenge>>;
}


export type CodeChallengeBlockChildrenArgs = {
  where?: Maybe<CodeChallengeBlockWhereInput>;
  orderBy?: Maybe<CodeChallengeBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type CodeChallengeBlockChallengesArgs = {
  where?: Maybe<CodeChallengeWhereInput>;
  orderBy?: Maybe<CodeChallengeOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum CodeChallengeBlockOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  EXTERNALKEY_ASC = 'externalKey_ASC',
  EXTERNALKEY_DESC = 'externalKey_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC'
}

export enum CodeChallengeOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  EXTERNALKEY_ASC = 'externalKey_ASC',
  EXTERNALKEY_DESC = 'externalKey_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DASHEDNAME_ASC = 'dashedName_ASC',
  DASHEDNAME_DESC = 'dashedName_DESC',
  LOCALETITLE_ASC = 'localeTitle_ASC',
  LOCALETITLE_DESC = 'localeTitle_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  CHALLENGETYPE_ASC = 'challengeType_ASC',
  CHALLENGETYPE_DESC = 'challengeType_DESC',
  FORUMTOPICID_ASC = 'forumTopicId_ASC',
  FORUMTOPICID_DESC = 'forumTopicId_DESC',
  TRANSLATIONS_ASC = 'translations_ASC',
  TRANSLATIONS_DESC = 'translations_DESC',
  TESTS_ASC = 'tests_ASC',
  TESTS_DESC = 'tests_DESC',
  SOLUTIONS_ASC = 'solutions_ASC',
  SOLUTIONS_DESC = 'solutions_DESC',
  INSTRUCTIONS_ASC = 'instructions_ASC',
  INSTRUCTIONS_DESC = 'instructions_DESC',
  FILES_ASC = 'files_ASC',
  FILES_DESC = 'files_DESC',
  VIDEOURL_ASC = 'videoUrl_ASC',
  VIDEOURL_DESC = 'videoUrl_DESC',
  ORDER_ASC = 'order_ASC',
  ORDER_DESC = 'order_DESC',
  SUPERORDER_ASC = 'superOrder_ASC',
  SUPERORDER_DESC = 'superOrder_DESC',
  CHALLENGEORDER_ASC = 'challengeOrder_ASC',
  CHALLENGEORDER_DESC = 'challengeOrder_DESC',
  REQUIRED_ASC = 'required_ASC',
  REQUIRED_DESC = 'required_DESC',
  ISREQUIRED_ASC = 'isRequired_ASC',
  ISREQUIRED_DESC = 'isRequired_DESC',
  ISPRIVATE_ASC = 'isPrivate_ASC',
  ISPRIVATE_DESC = 'isPrivate_DESC',
  ISBETA_ASC = 'isBeta_ASC',
  ISBETA_DESC = 'isBeta_DESC',
  TEMPLATE_ASC = 'template_ASC',
  TEMPLATE_DESC = 'template_DESC',
  TIME_ASC = 'time_ASC',
  TIME_DESC = 'time_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC'
}

export enum CodeChallengeCompletionOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CONTENT_ASC = 'content_ASC',
  CONTENT_DESC = 'content_DESC',
  SUCCESS_ASC = 'success_ASC',
  SUCCESS_DESC = 'success_DESC'
}

export enum TaskTechnologyOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  LEVEL_ASC = 'level_ASC',
  LEVEL_DESC = 'level_DESC'
}

export interface TaskTechnology extends Node {
  __typename?: 'TaskTechnology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  Task: Task;
  Technology: Technology;
  CreatedBy?: Maybe<User>;
  /** Уровень знания технологии */
  level?: Maybe<Scalars['UserTechnologyLevel']>;
}

export interface Technology extends Node {
  __typename?: 'Technology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  UserTechnologies?: Maybe<Array<UserTechnology>>;
  TaskTechnologies?: Maybe<Array<TaskTechnology>>;
}


export type TechnologyUserTechnologiesArgs = {
  where?: Maybe<UserTechnologyWhereInput>;
  orderBy?: Maybe<UserTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TechnologyTaskTechnologiesArgs = {
  where?: Maybe<TaskTechnologyWhereInput>;
  orderBy?: Maybe<TaskTechnologyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum UserTechnologyOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  DATE_FROM_ASC = 'date_from_ASC',
  DATE_FROM_DESC = 'date_from_DESC',
  DATE_TILL_ASC = 'date_till_ASC',
  DATE_TILL_DESC = 'date_till_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  LEVEL_ASC = 'level_ASC',
  LEVEL_DESC = 'level_DESC'
}

export interface UserTechnology {
  __typename?: 'UserTechnology';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  Technology: Technology;
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  /** Уровень знания технологии */
  level?: Maybe<Scalars['UserTechnologyLevel']>;
}


export interface Team extends Node {
  __typename?: 'Team';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  Parent?: Maybe<Team>;
  Childs?: Maybe<Array<Team>>;
  CreatedBy?: Maybe<User>;
  Members?: Maybe<Array<TeamMember>>;
  Projects?: Maybe<Array<Project>>;
  OrderedProjects?: Maybe<Array<Project>>;
  status: TeamStatus;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Resource: Resource;
}


export type TeamChildsArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TeamMembersArgs = {
  where?: Maybe<TeamMemberWhereInput>;
  orderBy?: Maybe<TeamMemberOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TeamProjectsArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TeamOrderedProjectsArgs = {
  where?: Maybe<ProjectWhereInput>;
  orderBy?: Maybe<ProjectOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TeamOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC',
  ADDRESS_ASC = 'address_ASC',
  ADDRESS_DESC = 'address_DESC',
  WEBSITE_ASC = 'website_ASC',
  WEBSITE_DESC = 'website_DESC',
  EMAIL_ASC = 'email_ASC',
  EMAIL_DESC = 'email_DESC',
  PHONE_ASC = 'phone_ASC',
  PHONE_DESC = 'phone_DESC'
}

export enum TeamMemberOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export interface TeamMember extends Node {
  __typename?: 'TeamMember';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  Team: Team;
  User: User;
  CreatedBy?: Maybe<User>;
  status?: Maybe<TeamMemberStatus>;
}

export enum ProjectOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DOMAIN_ASC = 'domain_ASC',
  DOMAIN_DESC = 'domain_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  URL_ASC = 'url_ASC',
  URL_DESC = 'url_DESC',
  SEQUENCE_ASC = 'sequence_ASC',
  SEQUENCE_DESC = 'sequence_DESC',
  CONTENT_ASC = 'content_ASC',
  CONTENT_DESC = 'content_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  PUBLIC_ASC = 'public_ASC',
  PUBLIC_DESC = 'public_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC'
}

export enum EthAccountOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  ADDRESS_ASC = 'address_ASC',
  ADDRESS_DESC = 'address_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  SOURCE_ASC = 'source_ASC',
  SOURCE_DESC = 'source_DESC',
  BYTECODE_ASC = 'bytecode_ASC',
  BYTECODE_DESC = 'bytecode_DESC',
  ABI_ASC = 'abi_ASC',
  ABI_DESC = 'abi_DESC'
}

export interface EthAccount extends Node {
  __typename?: 'EthAccount';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  CreatedBy?: Maybe<User>;
  Transaction?: Maybe<EthTransaction>;
  IncomeTransactions?: Maybe<Array<EthTransaction>>;
  OutcomeTransactions?: Maybe<Array<EthTransaction>>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  ContractSource?: Maybe<EthContractSource>;
  BlocksMined?: Maybe<Array<EthBlock>>;
  UserAuthed?: Maybe<User>;
  Project?: Maybe<Project>;
  Resources?: Maybe<Array<Resource>>;
  balance?: Maybe<Scalars['Float']>;
}


export type EthAccountIncomeTransactionsArgs = {
  where?: Maybe<EthTransactionWhereInput>;
  orderBy?: Maybe<EthTransactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type EthAccountOutcomeTransactionsArgs = {
  where?: Maybe<EthTransactionWhereInput>;
  orderBy?: Maybe<EthTransactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type EthAccountBlocksMinedArgs = {
  where?: Maybe<EthBlockWhereInput>;
  orderBy?: Maybe<EthBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type EthAccountResourcesArgs = {
  where?: Maybe<ResourceWhereInput>;
  orderBy?: Maybe<ResourceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type EthAccountBalanceArgs = {
  convert?: Maybe<EthAmountConvert>;
};

export interface EthTransaction extends Node {
  __typename?: 'EthTransaction';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  Sender?: Maybe<EthAccount>;
  Receiver?: Maybe<EthAccount>;
  Account?: Maybe<EthAccount>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Block?: Maybe<EthBlock>;
}

export interface EthBlock extends Node {
  __typename?: 'EthBlock';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  Miner?: Maybe<EthAccount>;
  Transactions?: Maybe<Array<EthTransaction>>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Uncles?: Maybe<Array<EthBlock>>;
}


export type EthBlockTransactionsArgs = {
  where?: Maybe<EthTransactionWhereInput>;
  orderBy?: Maybe<EthTransactionOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type EthBlockUnclesArgs = {
  where?: Maybe<EthBlockWhereInput>;
  orderBy?: Maybe<EthBlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum EthTransactionOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CHAINID_ASC = 'chainId_ASC',
  CHAINID_DESC = 'chainId_DESC',
  AMOUNT_ASC = 'amount_ASC',
  AMOUNT_DESC = 'amount_DESC',
  INPUT_ASC = 'input_ASC',
  INPUT_DESC = 'input_DESC',
  INDEX_ASC = 'index_ASC',
  INDEX_DESC = 'index_DESC',
  ADDRESS_ASC = 'address_ASC',
  ADDRESS_DESC = 'address_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  V_ASC = 'v_ASC',
  V_DESC = 'v_DESC',
  R_ASC = 'r_ASC',
  R_DESC = 'r_DESC',
  S_ASC = 's_ASC',
  S_DESC = 's_DESC'
}

export enum EthBlockOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  HASH_ASC = 'hash_ASC',
  HASH_DESC = 'hash_DESC',
  NUMBER_ASC = 'number_ASC',
  NUMBER_DESC = 'number_DESC',
  DIFFICULTY_ASC = 'difficulty_ASC',
  DIFFICULTY_DESC = 'difficulty_DESC',
  TOTALDIFFICULTY_ASC = 'totalDifficulty_ASC',
  TOTALDIFFICULTY_DESC = 'totalDifficulty_DESC',
  EXTRADATA_ASC = 'extraData_ASC',
  EXTRADATA_DESC = 'extraData_DESC',
  GASLIMIT_ASC = 'gasLimit_ASC',
  GASLIMIT_DESC = 'gasLimit_DESC',
  GASUSED_ASC = 'gasUsed_ASC',
  GASUSED_DESC = 'gasUsed_DESC',
  MIXHASH_ASC = 'mixHash_ASC',
  MIXHASH_DESC = 'mixHash_DESC',
  NONCE_ASC = 'nonce_ASC',
  NONCE_DESC = 'nonce_DESC',
  PARENTHASH_ASC = 'parentHash_ASC',
  PARENTHASH_DESC = 'parentHash_DESC',
  RECEIPTSROOT_ASC = 'receiptsRoot_ASC',
  RECEIPTSROOT_DESC = 'receiptsRoot_DESC',
  SHA3UNCLES_ASC = 'sha3Uncles_ASC',
  SHA3UNCLES_DESC = 'sha3Uncles_DESC',
  SIZE_ASC = 'size_ASC',
  SIZE_DESC = 'size_DESC',
  STATEROOT_ASC = 'stateRoot_ASC',
  STATEROOT_DESC = 'stateRoot_DESC',
  DATE_ASC = 'date_ASC',
  DATE_DESC = 'date_DESC',
  TRANSACTIONSROOT_ASC = 'transactionsRoot_ASC',
  TRANSACTIONSROOT_DESC = 'transactionsRoot_DESC',
  TRANSACTIONS_COUNT_ASC = 'transactions_count_ASC',
  TRANSACTIONS_COUNT_DESC = 'transactions_count_DESC'
}

export interface EthContractSource extends Node {
  __typename?: 'EthContractSource';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  CreatedBy: User;
  Accounts?: Maybe<Array<EthAccount>>;
}


export type EthContractSourceAccountsArgs = {
  where?: Maybe<EthAccountWhereInput>;
  orderBy?: Maybe<EthAccountOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum EthAmountConvert {
  WEI = 'wei',
  KWEI = 'Kwei',
  MWEI = 'Mwei',
  GWEI = 'Gwei',
  NANO = 'nano',
  ETHER = 'ether',
  KETHER = 'kether',
  METHER = 'mether',
  GETHER = 'gether',
  TETHER = 'tether'
}

export enum ServiceOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC'
}

export interface ServiceCategory extends Node {
  __typename?: 'ServiceCategory';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<User>;
  Services?: Maybe<Array<Service>>;
  Parent?: Maybe<ServiceCategory>;
  Childs?: Maybe<Array<ServiceCategory>>;
}


export type ServiceCategoryServicesArgs = {
  where?: Maybe<ServiceWhereInput>;
  orderBy?: Maybe<ServiceOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type ServiceCategoryChildsArgs = {
  where?: Maybe<ServiceCategoryWhereInput>;
  orderBy?: Maybe<ServiceCategoryOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum ServiceCategoryOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC'
}

export enum NotificationTypeOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  COMMENT_ASC = 'comment_ASC',
  COMMENT_DESC = 'comment_DESC',
  OLDID_ASC = 'oldID_ASC',
  OLDID_DESC = 'oldID_DESC'
}

export interface NotificationType extends Node {
  __typename?: 'NotificationType';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  Users?: Maybe<Array<User>>;
  CreatedBy: User;
  oldID?: Maybe<Scalars['Int']>;
}


export type NotificationTypeUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TagOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export enum EthContractSourceOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  SOURCE_ASC = 'source_ASC',
  SOURCE_DESC = 'source_DESC'
}

export enum WorldOrderByInput {
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  SEED_ASC = 'seed_ASC',
  SEED_DESC = 'seed_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  TIME_ASC = 'time_ASC',
  TIME_DESC = 'time_DESC',
  TIMECHANGER_ASC = 'timeChanger_ASC',
  TIMECHANGER_DESC = 'timeChanger_DESC',
  DAYS_ASC = 'days_ASC',
  DAYS_DESC = 'days_DESC',
  LASTPLAYED_ASC = 'lastPlayed_ASC',
  LASTPLAYED_DESC = 'lastPlayed_DESC'
}

export interface World extends Node {
  __typename?: 'World';
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  id: Scalars['ID'];
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  changedBlocks?: Maybe<Array<Block>>;
  players?: Maybe<Array<Player>>;
  messages?: Maybe<Array<Message>>;
}


export type WorldChangedBlocksArgs = {
  where?: Maybe<BlockWhereInput>;
  orderBy?: Maybe<BlockOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type WorldPlayersArgs = {
  where?: Maybe<PlayerWhereInput>;
  orderBy?: Maybe<PlayerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type WorldMessagesArgs = {
  where?: Maybe<MessageWhereInput>;
  orderBy?: Maybe<MessageOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum BlockOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  REPRESENTATION_ASC = 'representation_ASC',
  REPRESENTATION_DESC = 'representation_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  X_ASC = 'x_ASC',
  X_DESC = 'x_DESC',
  Y_ASC = 'y_ASC',
  Y_DESC = 'y_DESC',
  Z_ASC = 'z_ASC',
  Z_DESC = 'z_DESC'
}

export interface Block extends Node {
  __typename?: 'Block';
  id: Scalars['ID'];
  representation: Scalars['String'];
  type: Scalars['Int'];
  world: World;
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
}

export enum PlayerOrderByInput {
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  ISADMIN_ASC = 'isAdmin_ASC',
  ISADMIN_DESC = 'isAdmin_DESC',
  GAMEMODE_ASC = 'gamemode_ASC',
  GAMEMODE_DESC = 'gamemode_DESC',
  LASTLOGIN_ASC = 'lastLogin_ASC',
  LASTLOGIN_DESC = 'lastLogin_DESC',
  X_ASC = 'x_ASC',
  X_DESC = 'x_DESC',
  Y_ASC = 'y_ASC',
  Y_DESC = 'y_DESC',
  Z_ASC = 'z_ASC',
  Z_DESC = 'z_DESC',
  DIRX_ASC = 'dirx_ASC',
  DIRX_DESC = 'dirx_DESC',
  DIRY_ASC = 'diry_ASC',
  DIRY_DESC = 'diry_DESC'
}

export interface Player extends Node {
  __typename?: 'Player';
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  id: Scalars['ID'];
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  user: User;
  world: World;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Float'];
  y: Scalars['Float'];
  z: Scalars['Float'];
  dirx: Scalars['Float'];
  diry: Scalars['Float'];
  inventory?: Maybe<Inventory>;
}

export interface Inventory extends Node {
  __typename?: 'Inventory';
  id: Scalars['ID'];
  player?: Maybe<Player>;
  cursor: Scalars['Int'];
  data: Scalars['String'];
}

export enum MessageOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC',
  SENDER_ASC = 'sender_ASC',
  SENDER_DESC = 'sender_DESC',
  BODY_ASC = 'body_ASC',
  BODY_DESC = 'body_DESC'
}

export interface Message extends Node {
  __typename?: 'Message';
  id: Scalars['ID'];
  world: World;
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
}

export interface Settings extends Node {
  __typename?: 'Settings';
  id: Scalars['ID'];
  renderDistance: Scalars['Int'];
  User: User;
}

export enum NoticeOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  TYPE_ASC = 'type_ASC',
  TYPE_DESC = 'type_DESC'
}

export enum ChatRoomOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  IMAGE_ASC = 'image_ASC',
  IMAGE_DESC = 'image_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  ISPUBLIC_ASC = 'isPublic_ASC',
  ISPUBLIC_DESC = 'isPublic_DESC',
  ALLOWANONYMOUS_ASC = 'allowAnonymous_ASC',
  ALLOWANONYMOUS_DESC = 'allowAnonymous_DESC',
  SANDBOX_ASC = 'sandbox_ASC',
  SANDBOX_DESC = 'sandbox_DESC'
}

export interface GameWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  start_date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  start_date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_date_gte?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  end_date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  end_date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_date_gte?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sequence_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sequence_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sequence_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sequence_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sequence_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sequence_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sequence_gte?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Tourney?: Maybe<TourneyWhereInput>;
  Users_every?: Maybe<UserWhereInput>;
  Users_some?: Maybe<UserWhereInput>;
  Users_none?: Maybe<UserWhereInput>;
  Teams_every?: Maybe<TeamWhereInput>;
  Teams_some?: Maybe<TeamWhereInput>;
  Teams_none?: Maybe<TeamWhereInput>;
  Parent?: Maybe<GameWhereInput>;
  Childs_every?: Maybe<GameWhereInput>;
  Childs_some?: Maybe<GameWhereInput>;
  Childs_none?: Maybe<GameWhereInput>;
  Results_every?: Maybe<GameResultWhereInput>;
  Results_some?: Maybe<GameResultWhereInput>;
  Results_none?: Maybe<GameResultWhereInput>;
}

export interface TourneyWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneyWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneyWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneyWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_till_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_till_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_till_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_till_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_till_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_till_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_till_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Tournament?: Maybe<TournamentWhereInput>;
  Players_every?: Maybe<TourneyPlayerWhereInput>;
  Players_some?: Maybe<TourneyPlayerWhereInput>;
  Players_none?: Maybe<TourneyPlayerWhereInput>;
  Games_every?: Maybe<GameWhereInput>;
  Games_some?: Maybe<GameWhereInput>;
  Games_none?: Maybe<GameWhereInput>;
}

export interface TournamentWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TournamentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TournamentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TournamentWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Tourneys_every?: Maybe<TourneyWhereInput>;
  Tourneys_some?: Maybe<TourneyWhereInput>;
  Tourneys_none?: Maybe<TourneyWhereInput>;
  Group?: Maybe<TournamentGroupWhereInput>;
}

export interface TournamentGroupWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TournamentGroupWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TournamentGroupWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TournamentGroupWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserWhereInput>;
  Tournaments_every?: Maybe<TournamentWhereInput>;
  Tournaments_some?: Maybe<TournamentWhereInput>;
  Tournaments_none?: Maybe<TournamentWhereInput>;
}

export interface TourneyPlayerWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneyPlayerWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneyPlayerWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneyPlayerWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  Tourney?: Maybe<TourneyWhereInput>;
  User?: Maybe<UserWhereInput>;
}

export interface GameResultWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameResultWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameResultWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameResultWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  value_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  value_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  value_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  value_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  value_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  value_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  value_gte?: Maybe<Scalars['Float']>;
  CreatedBy?: Maybe<UserWhereInput>;
  User?: Maybe<UserWhereInput>;
  Team?: Maybe<TeamWhereInput>;
  Game?: Maybe<GameWhereInput>;
}

export enum GameOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  START_DATE_ASC = 'start_date_ASC',
  START_DATE_DESC = 'start_date_DESC',
  END_DATE_ASC = 'end_date_ASC',
  END_DATE_DESC = 'end_date_DESC',
  SEQUENCE_ASC = 'sequence_ASC',
  SEQUENCE_DESC = 'sequence_DESC'
}

export interface Game extends Node {
  __typename?: 'Game';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<User>;
  Tourney?: Maybe<Tourney>;
  Users?: Maybe<Array<User>>;
  Teams?: Maybe<Array<Team>>;
  Parent?: Maybe<Game>;
  Childs?: Maybe<Array<Game>>;
  Results?: Maybe<Array<GameResult>>;
}


export type GameUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type GameTeamsArgs = {
  where?: Maybe<TeamWhereInput>;
  orderBy?: Maybe<TeamOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type GameChildsArgs = {
  where?: Maybe<GameWhereInput>;
  orderBy?: Maybe<GameOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type GameResultsArgs = {
  where?: Maybe<GameResultWhereInput>;
  orderBy?: Maybe<GameResultOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface Tourney extends Node {
  __typename?: 'Tourney';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<User>;
  Tournament?: Maybe<Tournament>;
  Players?: Maybe<Array<TourneyPlayer>>;
  Games?: Maybe<Array<Game>>;
}


export type TourneyPlayersArgs = {
  where?: Maybe<TourneyPlayerWhereInput>;
  orderBy?: Maybe<TourneyPlayerOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TourneyGamesArgs = {
  where?: Maybe<GameWhereInput>;
  orderBy?: Maybe<GameOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface Tournament extends Node {
  __typename?: 'Tournament';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<User>;
  Tourneys?: Maybe<Array<Tourney>>;
  Group?: Maybe<TournamentGroup>;
}


export type TournamentTourneysArgs = {
  where?: Maybe<TourneyWhereInput>;
  orderBy?: Maybe<TourneyOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TourneyOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  DATE_ASC = 'date_ASC',
  DATE_DESC = 'date_DESC',
  DATE_TILL_ASC = 'date_till_ASC',
  DATE_TILL_DESC = 'date_till_DESC'
}

export interface TournamentGroup extends Node {
  __typename?: 'TournamentGroup';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<User>;
  Tournaments?: Maybe<Array<Tournament>>;
}


export type TournamentGroupTournamentsArgs = {
  where?: Maybe<TournamentWhereInput>;
  orderBy?: Maybe<TournamentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TournamentOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC'
}

export enum TourneyPlayerOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC'
}

export interface TourneyPlayer extends Node {
  __typename?: 'TourneyPlayer';
  id: Scalars['ID'];
  Tourney: Tourney;
  User: User;
}

export enum GameResultOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  DATE_ASC = 'date_ASC',
  DATE_DESC = 'date_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  VALUE_ASC = 'value_ASC',
  VALUE_DESC = 'value_DESC'
}

export interface GameResult extends Node {
  __typename?: 'GameResult';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  User?: Maybe<User>;
  Team?: Maybe<Team>;
  Game: Game;
  value?: Maybe<Scalars['Float']>;
}

export enum TournamentGroupOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC'
}

export enum PositionOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC'
}

export interface Position extends Node {
  __typename?: 'Position';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  CreatedBy?: Maybe<User>;
  Users?: Maybe<Array<User>>;
}


export type PositionUsersArgs = {
  where?: Maybe<UserWhereInput>;
  orderBy?: Maybe<UserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface RouteWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RouteWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RouteWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RouteWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  path_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  path_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  path_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  path_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  path_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  path_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  path_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  path_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  path_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  path_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  path_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  path_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  path_not_ends_with?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  exact_not?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  component_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  component_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  component_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  component_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  component_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  component_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  component_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  component_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  component_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  component_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  component_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  component_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  component_not_ends_with?: Maybe<Scalars['String']>;
  Parent?: Maybe<RouteWhereInput>;
  Childs_every?: Maybe<RouteWhereInput>;
  Childs_some?: Maybe<RouteWhereInput>;
  Childs_none?: Maybe<RouteWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum RouteOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  PATH_ASC = 'path_ASC',
  PATH_DESC = 'path_DESC',
  EXACT_ASC = 'exact_ASC',
  EXACT_DESC = 'exact_DESC',
  COMPONENT_ASC = 'component_ASC',
  COMPONENT_DESC = 'component_DESC'
}

export interface Route extends Node {
  __typename?: 'Route';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
  Parent?: Maybe<Route>;
  Childs?: Maybe<Array<Route>>;
  CreatedBy?: Maybe<User>;
}


export type RouteChildsArgs = {
  where?: Maybe<RouteWhereInput>;
  orderBy?: Maybe<RouteOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export interface CommentWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CommentWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CommentWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CommentWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
  TechnologyLesson?: Maybe<TechnologyLessonWhereInput>;
}

export interface TechnologyLessonWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyLessonWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyLessonWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyLessonWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Users_every?: Maybe<TechnologyLessonUserWhereInput>;
  Users_some?: Maybe<TechnologyLessonUserWhereInput>;
  Users_none?: Maybe<TechnologyLessonUserWhereInput>;
  Comments_every?: Maybe<CommentWhereInput>;
  Comments_some?: Maybe<CommentWhereInput>;
  Comments_none?: Maybe<CommentWhereInput>;
}

export interface TechnologyLessonUserWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyLessonUserWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TechnologyLessonUserStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TechnologyLessonUserStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TechnologyLessonUserStatus>>;
  completedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  completedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  completedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  completedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  completedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  completedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  completedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  completedAt_gte?: Maybe<Scalars['DateTime']>;
  Lesson?: Maybe<TechnologyLessonWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum TechnologyLessonUserStatus {
  ACCEPTED = 'Accepted',
  COMPLETED = 'Completed'
}

export enum CommentOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC'
}

export interface Comment extends Node {
  __typename?: 'Comment';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<User>;
  TechnologyLesson?: Maybe<TechnologyLesson>;
}

export interface TechnologyLesson extends Node {
  __typename?: 'TechnologyLesson';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<Technology>;
  CreatedBy?: Maybe<User>;
  Users?: Maybe<Array<TechnologyLessonUser>>;
  Comments?: Maybe<Array<Comment>>;
}


export type TechnologyLessonUsersArgs = {
  where?: Maybe<TechnologyLessonUserWhereInput>;
  orderBy?: Maybe<TechnologyLessonUserOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};


export type TechnologyLessonCommentsArgs = {
  where?: Maybe<CommentWhereInput>;
  orderBy?: Maybe<CommentOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum TechnologyLessonUserOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  COMPLETEDAT_ASC = 'completedAt_ASC',
  COMPLETEDAT_DESC = 'completedAt_DESC'
}

export interface TechnologyLessonUser extends Node {
  __typename?: 'TechnologyLessonUser';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  Lesson: TechnologyLesson;
  CreatedBy?: Maybe<User>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
}

export enum TechnologyLessonOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC'
}

export enum CareerOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  START_DATE_ASC = 'start_date_ASC',
  START_DATE_DESC = 'start_date_DESC'
}

export interface Career extends Node {
  __typename?: 'Career';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  CreatedBy?: Maybe<User>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface TestWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TestWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TestWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TestWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  text_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  text_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  text_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  text_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  text_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  text_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  text_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  text_not_ends_with?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  quantity_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  quantity_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  quantity_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  quantity_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  quantity_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  quantity_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  quantity_gte?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum TestOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  TEXT_ASC = 'text_ASC',
  TEXT_DESC = 'text_DESC',
  QUANTITY_ASC = 'quantity_ASC',
  QUANTITY_DESC = 'quantity_DESC',
  DATE_ASC = 'date_ASC',
  DATE_DESC = 'date_DESC'
}

export interface Test extends Node {
  __typename?: 'Test';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<User>;
}

export enum TechnologyOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  COMPONENTS_ASC = 'components_ASC',
  COMPONENTS_DESC = 'components_DESC',
  CONTENTTEXT_ASC = 'contentText_ASC',
  CONTENTTEXT_DESC = 'contentText_DESC',
  SITE_URL_ASC = 'site_url_ASC',
  SITE_URL_DESC = 'site_url_DESC'
}

export interface GalleryWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface WorldWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface NoticeWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface NotificationTypeWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface ResourceTagWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TagWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}

export interface VoteWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface ChatRoomWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface GameWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface GameResultWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TournamentWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TournamentGroupWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TourneyWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface EthAccountWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  address?: Maybe<Scalars['String']>;
}

export interface EthContractSourceWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface EthTransactionWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  address?: Maybe<Scalars['String']>;
}

export interface PositionWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ProjectMemberWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface ServiceWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface TaskWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TaskReactionWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TeamMemberWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TimerWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface RouteWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  path?: Maybe<Scalars['String']>;
}

export interface CodeChallengeWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  dashedName?: Maybe<Scalars['String']>;
}

export interface CodeChallengeBlockWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCompletionWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface CommentWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TechnologyLessonWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface CareerWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TechnologyLessonUserWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface UserTechnologyWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TestWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TaskTechnologyWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface FileWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  path?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
}

export interface TechnologyWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface EthBlockWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
}

export interface TeamWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface ProjectWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  domain?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface TemplateWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface ResourceWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  uri?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  commentOldID?: Maybe<Scalars['Int']>;
}

export interface ChatMessageWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface UserWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

/** A connection to a list of items. */
export interface GalleryConnection {
  __typename?: 'GalleryConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<GalleryEdge>>;
  aggregate: AggregateGallery;
}

/** Information about pagination in a connection. */
export interface PageInfo {
  __typename?: 'PageInfo';
  /** When paginating forwards, are there more items? */
  hasNextPage: Scalars['Boolean'];
  /** When paginating backwards, are there more items? */
  hasPreviousPage: Scalars['Boolean'];
  /** When paginating backwards, the cursor to continue. */
  startCursor?: Maybe<Scalars['String']>;
  /** When paginating forwards, the cursor to continue. */
  endCursor?: Maybe<Scalars['String']>;
}

/** An edge in a connection. */
export interface GalleryEdge {
  __typename?: 'GalleryEdge';
  /** The item at the end of the edge. */
  node: Gallery;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateGallery {
  __typename?: 'AggregateGallery';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface WorldConnection {
  __typename?: 'WorldConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<WorldEdge>>;
  aggregate: AggregateWorld;
}

/** An edge in a connection. */
export interface WorldEdge {
  __typename?: 'WorldEdge';
  /** The item at the end of the edge. */
  node: World;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateWorld {
  __typename?: 'AggregateWorld';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface NoticeConnection {
  __typename?: 'NoticeConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<NoticeEdge>>;
  aggregate: AggregateNotice;
}

/** An edge in a connection. */
export interface NoticeEdge {
  __typename?: 'NoticeEdge';
  /** The item at the end of the edge. */
  node: Notice;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateNotice {
  __typename?: 'AggregateNotice';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface NotificationTypeConnection {
  __typename?: 'NotificationTypeConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<NotificationTypeEdge>>;
  aggregate: AggregateNotificationType;
}

/** An edge in a connection. */
export interface NotificationTypeEdge {
  __typename?: 'NotificationTypeEdge';
  /** The item at the end of the edge. */
  node: NotificationType;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateNotificationType {
  __typename?: 'AggregateNotificationType';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ResourceTagConnection {
  __typename?: 'ResourceTagConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ResourceTagEdge>>;
  aggregate: AggregateResourceTag;
}

/** An edge in a connection. */
export interface ResourceTagEdge {
  __typename?: 'ResourceTagEdge';
  /** The item at the end of the edge. */
  node: ResourceTag;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateResourceTag {
  __typename?: 'AggregateResourceTag';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TagConnection {
  __typename?: 'TagConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TagEdge>>;
  aggregate: AggregateTag;
}

/** An edge in a connection. */
export interface TagEdge {
  __typename?: 'TagEdge';
  /** The item at the end of the edge. */
  node: Tag;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTag {
  __typename?: 'AggregateTag';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface VoteConnection {
  __typename?: 'VoteConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<VoteEdge>>;
  aggregate: AggregateVote;
}

/** An edge in a connection. */
export interface VoteEdge {
  __typename?: 'VoteEdge';
  /** The item at the end of the edge. */
  node: Vote;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateVote {
  __typename?: 'AggregateVote';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ChatRoomConnection {
  __typename?: 'ChatRoomConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ChatRoomEdge>>;
  aggregate: AggregateChatRoom;
}

/** An edge in a connection. */
export interface ChatRoomEdge {
  __typename?: 'ChatRoomEdge';
  /** The item at the end of the edge. */
  node: ChatRoom;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateChatRoom {
  __typename?: 'AggregateChatRoom';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface GameConnection {
  __typename?: 'GameConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<GameEdge>>;
  aggregate: AggregateGame;
}

/** An edge in a connection. */
export interface GameEdge {
  __typename?: 'GameEdge';
  /** The item at the end of the edge. */
  node: Game;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateGame {
  __typename?: 'AggregateGame';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface GameResultConnection {
  __typename?: 'GameResultConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<GameResultEdge>>;
  aggregate: AggregateGameResult;
}

/** An edge in a connection. */
export interface GameResultEdge {
  __typename?: 'GameResultEdge';
  /** The item at the end of the edge. */
  node: GameResult;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateGameResult {
  __typename?: 'AggregateGameResult';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TournamentConnection {
  __typename?: 'TournamentConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TournamentEdge>>;
  aggregate: AggregateTournament;
}

/** An edge in a connection. */
export interface TournamentEdge {
  __typename?: 'TournamentEdge';
  /** The item at the end of the edge. */
  node: Tournament;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTournament {
  __typename?: 'AggregateTournament';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TournamentGroupConnection {
  __typename?: 'TournamentGroupConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TournamentGroupEdge>>;
  aggregate: AggregateTournamentGroup;
}

/** An edge in a connection. */
export interface TournamentGroupEdge {
  __typename?: 'TournamentGroupEdge';
  /** The item at the end of the edge. */
  node: TournamentGroup;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTournamentGroup {
  __typename?: 'AggregateTournamentGroup';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TourneyConnection {
  __typename?: 'TourneyConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TourneyEdge>>;
  aggregate: AggregateTourney;
}

/** An edge in a connection. */
export interface TourneyEdge {
  __typename?: 'TourneyEdge';
  /** The item at the end of the edge. */
  node: Tourney;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTourney {
  __typename?: 'AggregateTourney';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface EthAccountConnection {
  __typename?: 'EthAccountConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<EthAccountEdge>>;
  aggregate: AggregateEthAccount;
}

/** An edge in a connection. */
export interface EthAccountEdge {
  __typename?: 'EthAccountEdge';
  /** The item at the end of the edge. */
  node: EthAccount;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateEthAccount {
  __typename?: 'AggregateEthAccount';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface EthContractSourceConnection {
  __typename?: 'EthContractSourceConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<EthContractSourceEdge>>;
  aggregate: AggregateEthContractSource;
}

/** An edge in a connection. */
export interface EthContractSourceEdge {
  __typename?: 'EthContractSourceEdge';
  /** The item at the end of the edge. */
  node: EthContractSource;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateEthContractSource {
  __typename?: 'AggregateEthContractSource';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface EthTransactionConnection {
  __typename?: 'EthTransactionConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<EthTransactionEdge>>;
  aggregate: AggregateEthTransaction;
}

/** An edge in a connection. */
export interface EthTransactionEdge {
  __typename?: 'EthTransactionEdge';
  /** The item at the end of the edge. */
  node: EthTransaction;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateEthTransaction {
  __typename?: 'AggregateEthTransaction';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CallRequestConnection {
  __typename?: 'CallRequestConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CallRequestEdge>>;
  aggregate: AggregateCallRequest;
}

/** An edge in a connection. */
export interface CallRequestEdge {
  __typename?: 'CallRequestEdge';
  /** The item at the end of the edge. */
  node: CallRequest;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateCallRequest {
  __typename?: 'AggregateCallRequest';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface PositionConnection {
  __typename?: 'PositionConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<PositionEdge>>;
  aggregate: AggregatePosition;
}

/** An edge in a connection. */
export interface PositionEdge {
  __typename?: 'PositionEdge';
  /** The item at the end of the edge. */
  node: Position;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregatePosition {
  __typename?: 'AggregatePosition';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ProjectMemberConnection {
  __typename?: 'ProjectMemberConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ProjectMemberEdge>>;
  aggregate: AggregateProjectMember;
}

/** An edge in a connection. */
export interface ProjectMemberEdge {
  __typename?: 'ProjectMemberEdge';
  /** The item at the end of the edge. */
  node: ProjectMember;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateProjectMember {
  __typename?: 'AggregateProjectMember';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ServiceConnection {
  __typename?: 'ServiceConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ServiceEdge>>;
  aggregate: AggregateService;
}

/** An edge in a connection. */
export interface ServiceEdge {
  __typename?: 'ServiceEdge';
  /** The item at the end of the edge. */
  node: Service;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateService {
  __typename?: 'AggregateService';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TaskConnection {
  __typename?: 'TaskConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TaskEdge>>;
  aggregate: AggregateTask;
}

/** An edge in a connection. */
export interface TaskEdge {
  __typename?: 'TaskEdge';
  /** The item at the end of the edge. */
  node: Task;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTask {
  __typename?: 'AggregateTask';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TaskReactionConnection {
  __typename?: 'TaskReactionConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TaskReactionEdge>>;
  aggregate: AggregateTaskReaction;
}

/** An edge in a connection. */
export interface TaskReactionEdge {
  __typename?: 'TaskReactionEdge';
  /** The item at the end of the edge. */
  node: TaskReaction;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTaskReaction {
  __typename?: 'AggregateTaskReaction';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TeamMemberConnection {
  __typename?: 'TeamMemberConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TeamMemberEdge>>;
  aggregate: AggregateTeamMember;
}

/** An edge in a connection. */
export interface TeamMemberEdge {
  __typename?: 'TeamMemberEdge';
  /** The item at the end of the edge. */
  node: TeamMember;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTeamMember {
  __typename?: 'AggregateTeamMember';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TimerConnection {
  __typename?: 'TimerConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TimerEdge>>;
  aggregate: AggregateTimer;
}

/** An edge in a connection. */
export interface TimerEdge {
  __typename?: 'TimerEdge';
  /** The item at the end of the edge. */
  node: Timer;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTimer {
  __typename?: 'AggregateTimer';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface RouteConnection {
  __typename?: 'RouteConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<RouteEdge>>;
  aggregate: AggregateRoute;
}

/** An edge in a connection. */
export interface RouteEdge {
  __typename?: 'RouteEdge';
  /** The item at the end of the edge. */
  node: Route;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateRoute {
  __typename?: 'AggregateRoute';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CodeChallengeConnection {
  __typename?: 'CodeChallengeConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CodeChallengeEdge>>;
  aggregate: AggregateCodeChallenge;
}

/** An edge in a connection. */
export interface CodeChallengeEdge {
  __typename?: 'CodeChallengeEdge';
  /** The item at the end of the edge. */
  node: CodeChallenge;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateCodeChallenge {
  __typename?: 'AggregateCodeChallenge';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CodeChallengeBlockConnection {
  __typename?: 'CodeChallengeBlockConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CodeChallengeBlockEdge>>;
  aggregate: AggregateCodeChallengeBlock;
}

/** An edge in a connection. */
export interface CodeChallengeBlockEdge {
  __typename?: 'CodeChallengeBlockEdge';
  /** The item at the end of the edge. */
  node: CodeChallengeBlock;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateCodeChallengeBlock {
  __typename?: 'AggregateCodeChallengeBlock';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CodeChallengeCompletionConnection {
  __typename?: 'CodeChallengeCompletionConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CodeChallengeCompletionEdge>>;
  aggregate: AggregateCodeChallengeCompletion;
}

/** An edge in a connection. */
export interface CodeChallengeCompletionEdge {
  __typename?: 'CodeChallengeCompletionEdge';
  /** The item at the end of the edge. */
  node: CodeChallengeCompletion;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateCodeChallengeCompletion {
  __typename?: 'AggregateCodeChallengeCompletion';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CommentConnection {
  __typename?: 'CommentConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CommentEdge>>;
  aggregate: AggregateComment;
}

/** An edge in a connection. */
export interface CommentEdge {
  __typename?: 'CommentEdge';
  /** The item at the end of the edge. */
  node: Comment;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateComment {
  __typename?: 'AggregateComment';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TechnologyLessonConnection {
  __typename?: 'TechnologyLessonConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TechnologyLessonEdge>>;
  aggregate: AggregateTechnologyLesson;
}

/** An edge in a connection. */
export interface TechnologyLessonEdge {
  __typename?: 'TechnologyLessonEdge';
  /** The item at the end of the edge. */
  node: TechnologyLesson;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTechnologyLesson {
  __typename?: 'AggregateTechnologyLesson';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface CareerConnection {
  __typename?: 'CareerConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<CareerEdge>>;
  aggregate: AggregateCareer;
}

/** An edge in a connection. */
export interface CareerEdge {
  __typename?: 'CareerEdge';
  /** The item at the end of the edge. */
  node: Career;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateCareer {
  __typename?: 'AggregateCareer';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TechnologyLessonUserConnection {
  __typename?: 'TechnologyLessonUserConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TechnologyLessonUserEdge>>;
  aggregate: AggregateTechnologyLessonUser;
}

/** An edge in a connection. */
export interface TechnologyLessonUserEdge {
  __typename?: 'TechnologyLessonUserEdge';
  /** The item at the end of the edge. */
  node: TechnologyLessonUser;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTechnologyLessonUser {
  __typename?: 'AggregateTechnologyLessonUser';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface UserTechnologyConnection {
  __typename?: 'UserTechnologyConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<UserTechnologyEdge>>;
  aggregate: AggregateUserTechnology;
}

/** An edge in a connection. */
export interface UserTechnologyEdge {
  __typename?: 'UserTechnologyEdge';
  /** The item at the end of the edge. */
  node: UserTechnology;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateUserTechnology {
  __typename?: 'AggregateUserTechnology';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TestConnection {
  __typename?: 'TestConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TestEdge>>;
  aggregate: AggregateTest;
}

/** An edge in a connection. */
export interface TestEdge {
  __typename?: 'TestEdge';
  /** The item at the end of the edge. */
  node: Test;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTest {
  __typename?: 'AggregateTest';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TaskTechnologyConnection {
  __typename?: 'TaskTechnologyConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TaskTechnologyEdge>>;
  aggregate: AggregateTaskTechnology;
}

/** An edge in a connection. */
export interface TaskTechnologyEdge {
  __typename?: 'TaskTechnologyEdge';
  /** The item at the end of the edge. */
  node: TaskTechnology;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTaskTechnology {
  __typename?: 'AggregateTaskTechnology';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TechnologyConnection {
  __typename?: 'TechnologyConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TechnologyEdge>>;
  aggregate: AggregateTechnology;
}

/** An edge in a connection. */
export interface TechnologyEdge {
  __typename?: 'TechnologyEdge';
  /** The item at the end of the edge. */
  node: Technology;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTechnology {
  __typename?: 'AggregateTechnology';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface EthBlockConnection {
  __typename?: 'EthBlockConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<EthBlockEdge>>;
  aggregate: AggregateEthBlock;
}

/** An edge in a connection. */
export interface EthBlockEdge {
  __typename?: 'EthBlockEdge';
  /** The item at the end of the edge. */
  node: EthBlock;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateEthBlock {
  __typename?: 'AggregateEthBlock';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TeamConnection {
  __typename?: 'TeamConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TeamEdge>>;
  aggregate: AggregateTeam;
}

/** An edge in a connection. */
export interface TeamEdge {
  __typename?: 'TeamEdge';
  /** The item at the end of the edge. */
  node: Team;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTeam {
  __typename?: 'AggregateTeam';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ProjectConnection {
  __typename?: 'ProjectConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ProjectEdge>>;
  aggregate: AggregateProject;
}

/** An edge in a connection. */
export interface ProjectEdge {
  __typename?: 'ProjectEdge';
  /** The item at the end of the edge. */
  node: Project;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateProject {
  __typename?: 'AggregateProject';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface TemplateConnection {
  __typename?: 'TemplateConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TemplateEdge>>;
  aggregate: AggregateTemplate;
}

/** An edge in a connection. */
export interface TemplateEdge {
  __typename?: 'TemplateEdge';
  /** The item at the end of the edge. */
  node: Template;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateTemplate {
  __typename?: 'AggregateTemplate';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ResourceConnection {
  __typename?: 'ResourceConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ResourceEdge>>;
  aggregate: AggregateResource;
}

/** An edge in a connection. */
export interface ResourceEdge {
  __typename?: 'ResourceEdge';
  /** The item at the end of the edge. */
  node: Resource;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateResource {
  __typename?: 'AggregateResource';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface ChatMessageConnection {
  __typename?: 'ChatMessageConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ChatMessageEdge>>;
  aggregate: AggregateChatMessage;
}

/** An edge in a connection. */
export interface ChatMessageEdge {
  __typename?: 'ChatMessageEdge';
  /** The item at the end of the edge. */
  node: ChatMessage;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateChatMessage {
  __typename?: 'AggregateChatMessage';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface UserConnection {
  __typename?: 'UserConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<UserEdge>>;
  aggregate: AggregateUser;
}

/** An edge in a connection. */
export interface UserEdge {
  __typename?: 'UserEdge';
  /** The item at the end of the edge. */
  node: User;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface AggregateUser {
  __typename?: 'AggregateUser';
  count: Scalars['Int'];
}

export interface EthNet {
  __typename?: 'ethNet';
  id: Scalars['Int'];
  isListening: Scalars['Boolean'];
  peerCount: Scalars['Int'];
  networkType: Scalars['String'];
}

export interface EthPersonalAccount {
  __typename?: 'EthPersonalAccount';
  address: Scalars['String'];
  balance?: Maybe<Scalars['Float']>;
}


export type EthPersonalAccountBalanceArgs = {
  convert?: Maybe<EthAmountConvert>;
};

export interface EthSyncState {
  __typename?: 'ethSyncState';
  /** The block number where the sync started */
  startingBlock: Scalars['Int'];
  /** The block number where at which block the node currently synced to already */
  currentBlock: Scalars['Int'];
  /** The estimated block number to sync to */
  highestBlock: Scalars['Int'];
  /** The estimated states to download */
  knownStates: Scalars['Int'];
  /** The already downloaded states */
  pulledStates: Scalars['Int'];
}

export interface EthGetBlockWhereInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
}

export interface EthGetTransactionWhereInput {
  hash: Scalars['String'];
}

export interface Mutation {
  __typename?: 'Mutation';
  createBlogProcessor: ResourceResponse;
  updateBlogProcessor: ResourceResponse;
  createTopicProcessor: ResourceResponse;
  updateTopicProcessor: ResourceResponse;
  createCommentProcessor: ResourceResponse;
  updateCommentProcessor: ResourceResponse;
  createTestProcessor: TestResponse;
  updateTestProcessor: TestResponse;
  /** Signin or Signup via Ethereum */
  ethSigninOrSignup: AuthPayload;
  ethConnectAuthAccount: EthAccountResponse;
  createCodeChallengeCompletionProcessor: CodeChallengeCompletionResponse;
  updateCodeChallengeCompletionProcessor: CodeChallengeCompletionResponse;
  fccImportChallengs?: Maybe<Scalars['Json']>;
  createCareerProcessor: CareerResponse;
  updateCareerProcessor: CareerResponse;
  createTaskTechnologyProcessor: TaskTechnologyResponse;
  updateTaskTechnologyProcessor: TaskTechnologyResponse;
  createUserTechnologyProcessor: UserTechnologyResponse;
  updateUserTechnologyProcessor: UserTechnologyResponse;
  createTechnologyLessonProcessor: TechnologyLessonResponse;
  updateTechnologyLessonProcessor: TechnologyLessonResponse;
  createTechnologyProcessor: TechnologyResponse;
  updateTechnologyProcessor: TechnologyResponse;
  createTechnologyLessonCommentProcessor: CommentResponse;
  updateTechnologyLessonCommentProcessor: CommentResponse;
  createTechnologyLessonUserProcessor: TechnologyLessonUserResponse;
  updateTechnologyLessonUserProcessor: TechnologyLessonUserResponse;
  createPlayer: Player;
  createWorld: World;
  createSettings: Settings;
  createCallRequest: CallRequest;
  createUser: User;
  updatePlayer?: Maybe<Player>;
  updateWorld?: Maybe<World>;
  updateSettings?: Maybe<Settings>;
  updateCallRequest?: Maybe<CallRequest>;
  updateUser?: Maybe<User>;
  deleteGallery?: Maybe<Gallery>;
  deleteWorld?: Maybe<World>;
  deleteNotice?: Maybe<Notice>;
  deleteGame?: Maybe<Game>;
  deleteGameResult?: Maybe<GameResult>;
  deleteTournament?: Maybe<Tournament>;
  deleteTournamentGroup?: Maybe<TournamentGroup>;
  deleteTourney?: Maybe<Tourney>;
  deleteProjectMember?: Maybe<ProjectMember>;
  deleteTaskReaction?: Maybe<TaskReaction>;
  deleteTeamMember?: Maybe<TeamMember>;
  deleteRoute?: Maybe<Route>;
  deleteCodeChallenge?: Maybe<CodeChallenge>;
  deleteCodeChallengeBlock?: Maybe<CodeChallengeBlock>;
  deleteTechnologyLesson?: Maybe<TechnologyLesson>;
  deleteCareer?: Maybe<Career>;
  deleteTechnologyLessonUser?: Maybe<TechnologyLessonUser>;
  deleteUserTechnology?: Maybe<UserTechnology>;
  deleteTest?: Maybe<Test>;
  deleteTaskTechnology?: Maybe<TaskTechnology>;
  deleteFile?: Maybe<File>;
  deleteTechnology?: Maybe<Technology>;
  deleteTemplate?: Maybe<Template>;
  deleteResource?: Maybe<Resource>;
  deleteUser?: Maybe<User>;
  deleteManyNotices: BatchPayload;
  deleteManyRoutes: BatchPayload;
  deleteManyTests: BatchPayload;
  runCommand: Scalars['Boolean'];
  login: McJsAuthPayload;
  createFileProcessor: FileResponse;
  updateFileProcessor: FileResponse;
  singleUpload?: Maybe<File>;
  multipleUpload?: Maybe<Array<File>>;
  createSmsMessageProcessor: SmsMessageResponse;
  createSmsProviderProcessor: SmsProviderResponse;
  updateSmsProviderProcessor: SmsProviderResponse;
  signup: AuthPayload;
  signin: AuthPayload;
  createUserProcessor: UserResponse;
  updateUserProcessor: UserResponse;
  resetPasswordProcessor: AuthPayload;
  createResetPasswordProcessor: ResetPasswordResponse;
  createTemplateProcessor: TemplateResponse;
  updateTemplateProcessor: TemplateResponse;
  createGalleryProcessor: GalleryResponse;
  updateGalleryProcessor: GalleryResponse;
  createResourceProcessor: ResourceResponse;
  updateResourceProcessor: ResourceResponse;
  createGameProcessor: GameResponse;
  updateGameProcessor: GameResponse;
  createGameResultProcessor: GameResultResponse;
  updateGameResultProcessor: GameResultResponse;
  createTournamentProcessor: TournamentResponse;
  updateTournamentProcessor: TournamentResponse;
  createTournamentGroupProcessor: TournamentGroupResponse;
  updateTournamentGroupProcessor: TournamentGroupResponse;
  createTourneyProcessor: TourneyResponse;
  updateTourneyProcessor: TourneyResponse;
  createChatRoomProcessor: ChatRoomResponse;
  updateChatRoomProcessor: ChatRoomResponse;
  inviteChatRoomProcessor: Scalars['Boolean'];
  joinChatRoom?: Maybe<ChatRoom>;
  leaveChatRoom?: Maybe<ChatRoom>;
  createChatMessageReadedProcessor: ChatMessageReadedResponse;
  createChatMessageProcessor: ChatMessageResponse;
  updateChatMessageProcessor: ChatMessageResponse;
  markAsReadedChatMessage: Scalars['Boolean'];
  createEthContractSourceProcessor: EthContractSourceResponse;
  updateEthContractSourceProcessor: EthContractSourceResponse;
  ethUnlockPersonalAccount: Scalars['Boolean'];
  createEthAccountProcessor: EthAccountResponse;
  updateEthAccountProcessor: EthAccountResponse;
  createEthTransactionProcessor: EthTransactionResponse;
  ethRecoverPersonalSignature?: Maybe<Scalars['String']>;
  createCallRequestProcessor: CallRequestResponse;
  createProjectProcessor: ProjectResponse;
  updateProjectProcessor: ProjectResponse;
  createProjectMemberProcessor: ProjectMemberResponse;
  updateProjectMemberProcessor: ProjectMemberResponse;
  createTaskProcessor: TaskResponse;
  updateTaskProcessor: TaskResponse;
  createTaskReactionProcessor: TaskReactionResponse;
  updateTaskReactionProcessor: TaskReactionResponse;
  createTimerProcessor: TimerResponse;
  updateTimerProcessor: TimerResponse;
  createTeamProcessor: TeamResponse;
  updateTeamProcessor: TeamResponse;
  createTeamMemberProcessor: TeamMemberResponse;
  updateTeamMemberProcessor: TeamMemberResponse;
  createServiceProcessor: ServiceResponse;
  updateServiceProcessor: ServiceResponse;
  createPositionProcessor: PositionResponse;
  updatePositionProcessor: PositionResponse;
  createRouteProcessor: RouteResponse;
  updateRouteProcessor: RouteResponse;
}


export type MutationCreateBlogProcessorArgs = {
  data: BlogCreateInput;
};


export type MutationUpdateBlogProcessorArgs = {
  data: BlogUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateTopicProcessorArgs = {
  data: TopicCreateInput;
};


export type MutationUpdateTopicProcessorArgs = {
  data: TopicUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateCommentProcessorArgs = {
  data: CommentCreateInput;
};


export type MutationUpdateCommentProcessorArgs = {
  data: CommentUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateTestProcessorArgs = {
  data: TestCreateInput;
};


export type MutationUpdateTestProcessorArgs = {
  data: TestUpdateInput;
  where: TestWhereUniqueInput;
};


export type MutationEthSigninOrSignupArgs = {
  data: EthRecoverPersonalSignatureDataInput;
};


export type MutationEthConnectAuthAccountArgs = {
  data: EthRecoverPersonalSignatureDataInput;
};


export type MutationCreateCodeChallengeCompletionProcessorArgs = {
  data: CodeChallengeCompletionCreateInput;
};


export type MutationUpdateCodeChallengeCompletionProcessorArgs = {
  data: CodeChallengeCompletionUpdateInput;
  where: CodeChallengeCompletionWhereUniqueInput;
};


export type MutationCreateCareerProcessorArgs = {
  data: CareerCreateInput;
};


export type MutationUpdateCareerProcessorArgs = {
  data: CareerUpdateInput;
  where: CareerWhereUniqueInput;
};


export type MutationCreateTaskTechnologyProcessorArgs = {
  data: TaskTechnologyCreateInput;
};


export type MutationUpdateTaskTechnologyProcessorArgs = {
  data: TaskTechnologyUpdateInput;
  where: TaskTechnologyWhereUniqueInput;
};


export type MutationCreateUserTechnologyProcessorArgs = {
  data: UserTechnologyCreateInput;
};


export type MutationUpdateUserTechnologyProcessorArgs = {
  data: UserTechnologyUpdateInput;
  where: UserTechnologyWhereUniqueInput;
};


export type MutationCreateTechnologyLessonProcessorArgs = {
  data: TechnologyLessonCreateInput;
};


export type MutationUpdateTechnologyLessonProcessorArgs = {
  data: TechnologyLessonUpdateInput;
  where: TechnologyLessonWhereUniqueInput;
};


export type MutationCreateTechnologyProcessorArgs = {
  data: TechnologyCreateInput;
};


export type MutationUpdateTechnologyProcessorArgs = {
  data: TechnologyUpdateInput;
  where: TechnologyWhereUniqueInput;
};


export type MutationCreateTechnologyLessonCommentProcessorArgs = {
  data: TechnologyLessonCommentCreateInput;
};


export type MutationUpdateTechnologyLessonCommentProcessorArgs = {
  data: TechnologyLessonCommentUpdateInput;
  where: TechnologyLessonWhereUniqueInput;
};


export type MutationCreateTechnologyLessonUserProcessorArgs = {
  data: TechnologyLessonUserCreateInput;
};


export type MutationUpdateTechnologyLessonUserProcessorArgs = {
  data: TechnologyLessonUserUpdateInput;
  where: TechnologyLessonUserWhereUniqueInput;
};


export type MutationCreatePlayerArgs = {
  data: PlayerCreateInput;
};


export type MutationCreateWorldArgs = {
  data: WorldCreateInput;
};


export type MutationCreateSettingsArgs = {
  data: SettingsCreateInput;
};


export type MutationCreateCallRequestArgs = {
  data: CallRequestCreateInput;
};


export type MutationCreateUserArgs = {
  data: UserCreateInput;
};


export type MutationUpdatePlayerArgs = {
  data: PlayerUpdateInput;
  where: PlayerWhereUniqueInput;
};


export type MutationUpdateWorldArgs = {
  data: WorldUpdateInput;
  where: WorldWhereUniqueInput;
};


export type MutationUpdateSettingsArgs = {
  data: SettingsUpdateInput;
  where: SettingsWhereUniqueInput;
};


export type MutationUpdateCallRequestArgs = {
  data: CallRequestUpdateInput;
  where: CallRequestWhereUniqueInput;
};


export type MutationUpdateUserArgs = {
  data: UserUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationDeleteGalleryArgs = {
  where: GalleryWhereUniqueInput;
};


export type MutationDeleteWorldArgs = {
  where: WorldWhereUniqueInput;
};


export type MutationDeleteNoticeArgs = {
  where: NoticeWhereUniqueInput;
};


export type MutationDeleteGameArgs = {
  where: GameWhereUniqueInput;
};


export type MutationDeleteGameResultArgs = {
  where: GameResultWhereUniqueInput;
};


export type MutationDeleteTournamentArgs = {
  where: TournamentWhereUniqueInput;
};


export type MutationDeleteTournamentGroupArgs = {
  where: TournamentGroupWhereUniqueInput;
};


export type MutationDeleteTourneyArgs = {
  where: TourneyWhereUniqueInput;
};


export type MutationDeleteProjectMemberArgs = {
  where: ProjectMemberWhereUniqueInput;
};


export type MutationDeleteTaskReactionArgs = {
  where: TaskReactionWhereUniqueInput;
};


export type MutationDeleteTeamMemberArgs = {
  where: TeamMemberWhereUniqueInput;
};


export type MutationDeleteRouteArgs = {
  where: RouteWhereUniqueInput;
};


export type MutationDeleteCodeChallengeArgs = {
  where: CodeChallengeWhereUniqueInput;
};


export type MutationDeleteCodeChallengeBlockArgs = {
  where: CodeChallengeBlockWhereUniqueInput;
};


export type MutationDeleteTechnologyLessonArgs = {
  where: TechnologyLessonWhereUniqueInput;
};


export type MutationDeleteCareerArgs = {
  where: CareerWhereUniqueInput;
};


export type MutationDeleteTechnologyLessonUserArgs = {
  where: TechnologyLessonUserWhereUniqueInput;
};


export type MutationDeleteUserTechnologyArgs = {
  where: UserTechnologyWhereUniqueInput;
};


export type MutationDeleteTestArgs = {
  where: TestWhereUniqueInput;
};


export type MutationDeleteTaskTechnologyArgs = {
  where: TaskTechnologyWhereUniqueInput;
};


export type MutationDeleteFileArgs = {
  where: FileWhereUniqueInput;
};


export type MutationDeleteTechnologyArgs = {
  where: TechnologyWhereUniqueInput;
};


export type MutationDeleteTemplateArgs = {
  where: TemplateWhereUniqueInput;
};


export type MutationDeleteResourceArgs = {
  where: ResourceWhereUniqueInput;
};


export type MutationDeleteUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteManyNoticesArgs = {
  where?: Maybe<NoticeWhereInput>;
};


export type MutationDeleteManyRoutesArgs = {
  where?: Maybe<RouteWhereInput>;
};


export type MutationDeleteManyTestsArgs = {
  where?: Maybe<TestWhereInput>;
};


export type MutationRunCommandArgs = {
  data: RunCommandInput;
};


export type MutationLoginArgs = {
  data: LoginUserInput;
};


export type MutationCreateFileProcessorArgs = {
  data: FileCreateInput;
};


export type MutationUpdateFileProcessorArgs = {
  data: FileUpdateInput;
  where: FileWhereUniqueInput;
};


export type MutationSingleUploadArgs = {
  file?: Maybe<Scalars['Upload']>;
  data?: Maybe<SingleUploadInput>;
};


export type MutationMultipleUploadArgs = {
  files: Array<Scalars['Upload']>;
};


export type MutationCreateSmsMessageProcessorArgs = {
  data: SmsMessageCreateInput;
};


export type MutationCreateSmsProviderProcessorArgs = {
  data: SmsProviderCreateInput;
};


export type MutationUpdateSmsProviderProcessorArgs = {
  data: SmsProviderUpdateInput;
  where: SmsProviderWhereUniqueInput;
};


export type MutationSignupArgs = {
  data: UserCreateInput;
};


export type MutationSigninArgs = {
  where: UserWhereUniqueInput;
  data: SigninDataInput;
};


export type MutationCreateUserProcessorArgs = {
  data: UserCreateInput;
};


export type MutationUpdateUserProcessorArgs = {
  where?: Maybe<UserWhereUniqueInput>;
  data: UserUpdateInput;
};


export type MutationResetPasswordProcessorArgs = {
  data: ResetPasswordInput;
  where: UserWhereUniqueInput;
};


export type MutationCreateResetPasswordProcessorArgs = {
  data: ResetPasswordCreateInput;
};


export type MutationCreateTemplateProcessorArgs = {
  data: TemplateCreateInput;
};


export type MutationUpdateTemplateProcessorArgs = {
  data: TemplateUpdateInput;
  where: TemplateWhereUniqueInput;
};


export type MutationCreateGalleryProcessorArgs = {
  data: GalleryCreateInput;
};


export type MutationUpdateGalleryProcessorArgs = {
  data: GalleryUpdateInput;
  where: GalleryWhereUniqueInput;
};


export type MutationCreateResourceProcessorArgs = {
  data: ResourceCreateInput;
};


export type MutationUpdateResourceProcessorArgs = {
  data: ResourceUpdateInput;
  where: ResourceWhereUniqueInput;
};


export type MutationCreateGameProcessorArgs = {
  data: GameCreateInput;
};


export type MutationUpdateGameProcessorArgs = {
  data: GameUpdateInput;
  where: GameWhereUniqueInput;
};


export type MutationCreateGameResultProcessorArgs = {
  data: GameResultCreateInput;
};


export type MutationUpdateGameResultProcessorArgs = {
  data: GameResultUpdateInput;
  where: GameResultWhereUniqueInput;
};


export type MutationCreateTournamentProcessorArgs = {
  data: TournamentCreateInput;
};


export type MutationUpdateTournamentProcessorArgs = {
  data: TournamentUpdateInput;
  where: TournamentWhereUniqueInput;
};


export type MutationCreateTournamentGroupProcessorArgs = {
  data: TournamentGroupCreateInput;
};


export type MutationUpdateTournamentGroupProcessorArgs = {
  data: TournamentGroupUpdateInput;
  where: TournamentGroupWhereUniqueInput;
};


export type MutationCreateTourneyProcessorArgs = {
  data: TourneyCreateInput;
};


export type MutationUpdateTourneyProcessorArgs = {
  data: TourneyUpdateInput;
  where: TourneyWhereUniqueInput;
};


export type MutationCreateChatRoomProcessorArgs = {
  data: ChatRoomCreateInput;
};


export type MutationUpdateChatRoomProcessorArgs = {
  data: ChatRoomUpdateInput;
  where: ChatRoomWhereUniqueInput;
};


export type MutationInviteChatRoomProcessorArgs = {
  data: ChatRoomInviteInput;
  where: ChatRoomWhereUniqueInput;
};


export type MutationJoinChatRoomArgs = {
  where: ChatRoomWhereUniqueInput;
};


export type MutationLeaveChatRoomArgs = {
  where: ChatRoomWhereUniqueInput;
};


export type MutationCreateChatMessageReadedProcessorArgs = {
  data: ChatMessageReadedCreateInput;
};


export type MutationCreateChatMessageProcessorArgs = {
  data: ChatMessageCreateInput;
};


export type MutationUpdateChatMessageProcessorArgs = {
  data: ChatMessageUpdateInput;
  where: ChatMessageWhereUniqueInput;
};


export type MutationMarkAsReadedChatMessageArgs = {
  where: ChatMessageWhereUniqueInput;
};


export type MutationCreateEthContractSourceProcessorArgs = {
  data: EthContractSourceCreateInput;
};


export type MutationUpdateEthContractSourceProcessorArgs = {
  data: EthContractSourceUpdateInput;
  where: EthContractSourceWhereUniqueInput;
};


export type MutationEthUnlockPersonalAccountArgs = {
  address: Scalars['String'];
  password: Scalars['String'];
  duration?: Maybe<Scalars['Int']>;
};


export type MutationCreateEthAccountProcessorArgs = {
  data: EthAccountCreateInput;
};


export type MutationUpdateEthAccountProcessorArgs = {
  where: EthAccountWhereUniqueInput;
  data: EthAccountUpdateInput;
};


export type MutationCreateEthTransactionProcessorArgs = {
  data: EthTransactionCreateInput;
};


export type MutationEthRecoverPersonalSignatureArgs = {
  data: EthRecoverPersonalSignatureDataInput;
};


export type MutationCreateCallRequestProcessorArgs = {
  data: CallRequestCreateInput;
};


export type MutationCreateProjectProcessorArgs = {
  data: ProjectCreateInput;
};


export type MutationUpdateProjectProcessorArgs = {
  data: ProjectUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationCreateProjectMemberProcessorArgs = {
  data: ProjectMemberCreateInput;
};


export type MutationUpdateProjectMemberProcessorArgs = {
  data: ProjectMemberUpdateInput;
  where: ProjectMemberWhereUniqueInput;
};


export type MutationCreateTaskProcessorArgs = {
  data: TaskCreateInput;
};


export type MutationUpdateTaskProcessorArgs = {
  data: TaskUpdateInput;
  where: TaskWhereUniqueInput;
};


export type MutationCreateTaskReactionProcessorArgs = {
  data: TaskReactionCreateInput;
};


export type MutationUpdateTaskReactionProcessorArgs = {
  data: TaskReactionUpdateInput;
  where: TaskReactionWhereUniqueInput;
};


export type MutationCreateTimerProcessorArgs = {
  data: TimerCreateInput;
};


export type MutationUpdateTimerProcessorArgs = {
  data: TimerUpdateInput;
  where: TimerWhereUniqueInput;
};


export type MutationCreateTeamProcessorArgs = {
  data: TeamCreateInput;
};


export type MutationUpdateTeamProcessorArgs = {
  data: TeamUpdateInput;
  where: TeamWhereUniqueInput;
};


export type MutationCreateTeamMemberProcessorArgs = {
  data: TeamMemberCreateInput;
};


export type MutationUpdateTeamMemberProcessorArgs = {
  data: TeamMemberUpdateInput;
  where: TeamMemberWhereUniqueInput;
};


export type MutationCreateServiceProcessorArgs = {
  data: ServiceCreateInput;
};


export type MutationUpdateServiceProcessorArgs = {
  data: ServiceUpdateInput;
  where: ServiceWhereUniqueInput;
};


export type MutationCreatePositionProcessorArgs = {
  data: PositionCreateInput;
};


export type MutationUpdatePositionProcessorArgs = {
  data: PositionUpdateInput;
  where: PositionWhereUniqueInput;
};


export type MutationCreateRouteProcessorArgs = {
  data: RouteCreateInput;
};


export type MutationUpdateRouteProcessorArgs = {
  data: RouteUpdateInput;
  where: RouteWhereUniqueInput;
};

export interface BlogCreateInput {
  name: Scalars['String'];
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  published?: Maybe<Scalars['Boolean']>;
}

export interface ResourceResponse {
  __typename?: 'ResourceResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Resource>;
}

export interface Error {
  __typename?: 'Error';
  key: Scalars['String'];
  message: Scalars['String'];
}

export interface BlogUpdateInput {
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  published?: Maybe<Scalars['Boolean']>;
}

export interface TopicCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  published?: Maybe<Scalars['Boolean']>;
  topic_tags?: Maybe<Array<Scalars['String']>>;
  blogID?: Maybe<Scalars['ID']>;
  /** Урок, для которого создается топик */
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  /** УРЛ страницы */
  uri?: Maybe<Scalars['String']>;
}

export interface CodeChallengeCreateOneWithoutTopicInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface TopicUpdateInput {
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  published?: Maybe<Scalars['Boolean']>;
  blogID?: Maybe<Scalars['ID']>;
}

export interface CommentCreateInput {
  text?: Maybe<Scalars['Json']>;
  content?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  topicID?: Maybe<Scalars['ID']>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface TaskCreateOneWithoutCommentsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface CommentUpdateInput {
  content?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
}

export interface TestCreateInput {
  name?: Maybe<Scalars['String']>;
  id?: Maybe<Scalars['ID']>;
  text?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface UserCreateOneInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TestResponse {
  __typename?: 'TestResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Test>;
}

export interface TestUpdateInput {
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface UserUpdateOneInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthRecoverPersonalSignatureDataInput {
  from: Scalars['String'];
  message: Scalars['String'];
  signature: Scalars['String'];
}

export interface AuthPayload {
  __typename?: 'AuthPayload';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  token?: Maybe<Scalars['String']>;
  data?: Maybe<User>;
}

export interface EthAccountResponse {
  __typename?: 'EthAccountResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<EthAccount>;
}

export interface CodeChallengeCompletionCreateInput {
  CodeChallenge: CodeChallengeCreateOneWithoutCompletionsInput;
}

export interface CodeChallengeCreateOneWithoutCompletionsInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface CodeChallengeCompletionResponse {
  __typename?: 'CodeChallengeCompletionResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<CodeChallengeCompletion>;
}

export interface CodeChallengeCompletionUpdateInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CareerCreateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Дата начала карьеры */
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface CareerResponse {
  __typename?: 'CareerResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Career>;
}

export interface CareerUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** Дата начала карьеры */
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface TaskTechnologyCreateInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  Task: TaskCreateOneWithoutTaskTechnologiesInput;
  Technology: TechnologyCreateOneWithoutTaskTechnologiesInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TaskCreateOneWithoutTaskTechnologiesInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TechnologyCreateOneWithoutTaskTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TaskTechnologyResponse {
  __typename?: 'TaskTechnologyResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<TaskTechnology>;
}

export interface TaskTechnologyUpdateInput {
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTaskTechnologiesInput>;
  Technology?: Maybe<TechnologyUpdateOneRequiredWithoutTaskTechnologiesInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TaskUpdateOneRequiredWithoutTaskTechnologiesInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TechnologyUpdateOneRequiredWithoutTaskTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface UserTechnologyCreateInput {
  id?: Maybe<Scalars['ID']>;
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Technology: TechnologyCreateOneWithoutUserTechnologiesInput;
}

export interface TechnologyCreateOneWithoutUserTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface UserTechnologyResponse {
  __typename?: 'UserTechnologyResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<UserTechnology>;
}

export interface UserTechnologyUpdateInput {
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['UserTechnologyLevel']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Technology?: Maybe<TechnologyUpdateOneRequiredWithoutUserTechnologiesInput>;
}

export interface TechnologyUpdateOneRequiredWithoutUserTechnologiesInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyLessonCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyCreateOneInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Users?: Maybe<TechnologyLessonUserCreateManyWithoutLessonInput>;
  Comments?: Maybe<CommentCreateManyWithoutTechnologyLessonInput>;
}

export interface TechnologyCreateOneInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
}

export interface TechnologyLessonUserCreateManyWithoutLessonInput {
  connect?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
}

export interface CommentCreateManyWithoutTechnologyLessonInput {
  connect?: Maybe<Array<CommentWhereUniqueInput>>;
}

export interface TechnologyLessonResponse {
  __typename?: 'TechnologyLessonResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<TechnologyLesson>;
}

export interface TechnologyLessonUpdateInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Users?: Maybe<TechnologyLessonUserUpdateManyWithoutLessonInput>;
  Comments?: Maybe<CommentUpdateManyWithoutTechnologyLessonInput>;
}

export interface TechnologyUpdateOneInput {
  connect?: Maybe<TechnologyWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonUserUpdateManyWithoutLessonInput {
  connect?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
  set?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
  disconnect?: Maybe<Array<TechnologyLessonUserWhereUniqueInput>>;
  updateMany?: Maybe<Array<TechnologyLessonUserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TechnologyLessonUserScalarWhereInput>>;
}

export interface TechnologyLessonUserUpdateManyWithWhereNestedInput {
  where: TechnologyLessonUserScalarWhereInput;
  data: TechnologyLessonUserUpdateManyDataInput;
}

export interface TechnologyLessonUserScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyLessonUserScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyLessonUserScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyLessonUserScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TechnologyLessonUserStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TechnologyLessonUserStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TechnologyLessonUserStatus>>;
  completedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  completedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  completedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  completedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  completedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  completedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  completedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  completedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface TechnologyLessonUserUpdateManyDataInput {
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
}

export interface CommentUpdateManyWithoutTechnologyLessonInput {
  connect?: Maybe<Array<CommentWhereUniqueInput>>;
  set?: Maybe<Array<CommentWhereUniqueInput>>;
  disconnect?: Maybe<Array<CommentWhereUniqueInput>>;
  updateMany?: Maybe<Array<CommentUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CommentScalarWhereInput>>;
}

export interface CommentUpdateManyWithWhereNestedInput {
  where: CommentScalarWhereInput;
  data: CommentUpdateManyDataInput;
}

export interface CommentScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CommentScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CommentScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CommentScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
}

export interface CommentUpdateManyDataInput {
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface TechnologyCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutTechnologyInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTechnologyInput>;
}

export interface UserTechnologyCreateManyWithoutTechnologyInput {
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
}

export interface TaskTechnologyCreateManyWithoutTechnologyInput {
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
}

export interface TechnologyResponse {
  __typename?: 'TechnologyResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Technology>;
}

export interface TechnologyUpdateInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutTechnologyInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTechnologyInput>;
}

export interface UserTechnologyUpdateManyWithoutTechnologyInput {
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  set?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserTechnologyUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserTechnologyScalarWhereInput>>;
}

export interface UserTechnologyUpdateManyWithWhereNestedInput {
  where: UserTechnologyScalarWhereInput;
  data: UserTechnologyUpdateManyDataInput;
}

export interface UserTechnologyScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserTechnologyScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserTechnologyScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserTechnologyScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  date_from?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_from_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_from_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_from_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_from_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_from_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_from_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_from_gte?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_till_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_till_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_till_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_till_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_till_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_till_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_till_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<UserTechnologyStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<UserTechnologyStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<UserTechnologyStatus>>;
  level?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  level_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  level_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  level_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  level_gte?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyUpdateManyDataInput {
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
}

export interface TaskTechnologyUpdateManyWithoutTechnologyInput {
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  set?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskTechnologyUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskTechnologyScalarWhereInput>>;
}

export interface TaskTechnologyUpdateManyWithWhereNestedInput {
  where: TaskTechnologyScalarWhereInput;
  data: TaskTechnologyUpdateManyDataInput;
}

export interface TaskTechnologyScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskTechnologyScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskTechnologyScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskTechnologyScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  level?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  level_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  level_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  level_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  level_gte?: Maybe<Scalars['Int']>;
}

export interface TaskTechnologyUpdateManyDataInput {
  level?: Maybe<Scalars['Int']>;
}

export interface TechnologyLessonCommentCreateInput {
  components?: Maybe<Scalars['Json']>;
  TechnologyLesson?: Maybe<TechnologyLessonCreateOneWithoutCommentsInput>;
}

export interface TechnologyLessonCreateOneWithoutCommentsInput {
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
}

export interface CommentResponse {
  __typename?: 'CommentResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Comment>;
}

export interface TechnologyLessonCommentUpdateInput {
  components?: Maybe<Scalars['Json']>;
}

export interface TechnologyLessonUserCreateInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  Lesson: TechnologyLessonCreateOneWithoutUsersInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TechnologyLessonCreateOneWithoutUsersInput {
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
}

export interface TechnologyLessonUserResponse {
  __typename?: 'TechnologyLessonUserResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<TechnologyLessonUser>;
}

export interface TechnologyLessonUserUpdateInput {
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  Lesson?: Maybe<TechnologyLessonUpdateOneRequiredWithoutUsersInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TechnologyLessonUpdateOneRequiredWithoutUsersInput {
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
}

export interface PlayerCreateInput {
  worldId: Scalars['ID'];
  gamemode: Gamemode;
}

export interface WorldCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  CreatedBy?: Maybe<UserCreateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockCreateManyWithoutWorldInput>;
  players?: Maybe<PlayerCreateManyWithoutWorldInput>;
  messages?: Maybe<MessageCreateManyWithoutWorldInput>;
  gamemode: Gamemode;
}

export interface UserCreateOneWithoutWorldsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface BlockCreateManyWithoutWorldInput {
  connect?: Maybe<Array<BlockWhereUniqueInput>>;
}

export interface BlockWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  representation?: Maybe<Scalars['String']>;
}

export interface PlayerCreateManyWithoutWorldInput {
  connect?: Maybe<Array<PlayerWhereUniqueInput>>;
}

export interface PlayerWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface MessageCreateManyWithoutWorldInput {
  connect?: Maybe<Array<MessageWhereUniqueInput>>;
}

export interface MessageWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface SettingsCreateInput {
  renderDistance?: Maybe<Scalars['Int']>;
}

export interface CallRequestCreateInput {
  id?: Maybe<Scalars['ID']>;
  called_descriptions: Scalars['Json'];
  caller_descriptions: Scalars['Json'];
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called: UserCreateOneInput;
  Caller?: Maybe<UserCreateOneInput>;
  Room?: Maybe<ChatRoomCreateOneWithoutCallRequestsInput>;
}

export interface ChatRoomCreateOneWithoutCallRequestsInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface UserCreateInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  /** Разрешены ли чат-сообщения от анонимных пользователей */
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли анонимному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли авторизованному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
}

export interface PlayerUpdateInput {
  isAdmin?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  world?: Maybe<WorldUpdateOneRequiredWithoutPlayersInput>;
  inventory?: Maybe<InventoryUpdateOneWithoutPlayerInput>;
  cursor?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
}

export interface UserUpdateOneRequiredInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface WorldUpdateOneRequiredWithoutPlayersInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface InventoryUpdateOneWithoutPlayerInput {
  connect?: Maybe<InventoryWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface InventoryWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface WorldUpdateInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockUpdateManyWithoutWorldInput>;
  players?: Maybe<PlayerUpdateManyWithoutWorldInput>;
  messages?: Maybe<MessageUpdateManyWithoutWorldInput>;
}

export interface UserUpdateOneWithoutWorldsInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface BlockUpdateManyWithoutWorldInput {
  connect?: Maybe<Array<BlockWhereUniqueInput>>;
  set?: Maybe<Array<BlockWhereUniqueInput>>;
  disconnect?: Maybe<Array<BlockWhereUniqueInput>>;
  updateMany?: Maybe<Array<BlockUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<BlockScalarWhereInput>>;
}

export interface BlockUpdateManyWithWhereNestedInput {
  where: BlockScalarWhereInput;
  data: BlockUpdateManyDataInput;
}

export interface BlockScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<BlockScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<BlockScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<BlockScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  representation?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  representation_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  representation_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  representation_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  representation_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  representation_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  representation_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  representation_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  representation_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  representation_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  representation_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  representation_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  representation_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  representation_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  type_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  type_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  type_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  type_gte?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  x_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  x_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  x_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  x_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  x_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  x_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  x_gte?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  y_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  y_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  y_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  y_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  y_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  y_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  y_gte?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  z_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  z_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  z_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  z_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  z_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  z_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  z_gte?: Maybe<Scalars['Int']>;
}

export interface BlockUpdateManyDataInput {
  representation?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
}

export interface PlayerUpdateManyWithoutWorldInput {
  connect?: Maybe<Array<PlayerWhereUniqueInput>>;
  set?: Maybe<Array<PlayerWhereUniqueInput>>;
  disconnect?: Maybe<Array<PlayerWhereUniqueInput>>;
  updateMany?: Maybe<Array<PlayerUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<PlayerScalarWhereInput>>;
}

export interface PlayerUpdateManyWithWhereNestedInput {
  where: PlayerScalarWhereInput;
  data: PlayerUpdateManyDataInput;
}

export interface PlayerScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PlayerScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PlayerScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PlayerScalarWhereInput>>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  isAdmin?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isAdmin_not?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  /** All values that are not equal to given value. */
  gamemode_not?: Maybe<Gamemode>;
  /** All values that are contained in given list. */
  gamemode_in?: Maybe<Array<Gamemode>>;
  /** All values that are not contained in given list. */
  gamemode_not_in?: Maybe<Array<Gamemode>>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  lastLogin_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  lastLogin_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  lastLogin_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  lastLogin_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  lastLogin_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  lastLogin_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  lastLogin_gte?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  x_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  x_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  x_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  x_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  x_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  x_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  x_gte?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  y_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  y_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  y_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  y_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  y_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  y_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  y_gte?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  z_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  z_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  z_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  z_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  z_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  z_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  z_gte?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  dirx_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  dirx_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  dirx_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  dirx_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  dirx_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  dirx_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  dirx_gte?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  diry_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  diry_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  diry_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  diry_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  diry_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  diry_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  diry_gte?: Maybe<Scalars['Float']>;
}

export interface PlayerUpdateManyDataInput {
  isAdmin?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
}

export interface MessageUpdateManyWithoutWorldInput {
  connect?: Maybe<Array<MessageWhereUniqueInput>>;
  set?: Maybe<Array<MessageWhereUniqueInput>>;
  disconnect?: Maybe<Array<MessageWhereUniqueInput>>;
  updateMany?: Maybe<Array<MessageUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<MessageScalarWhereInput>>;
}

export interface MessageUpdateManyWithWhereNestedInput {
  where: MessageScalarWhereInput;
  data: MessageUpdateManyDataInput;
}

export interface MessageScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<MessageScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<MessageScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<MessageScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  type?: Maybe<MessageType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<MessageType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<MessageType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<MessageType>>;
  sender?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sender_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sender_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  sender_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sender_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sender_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  sender_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sender_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  sender_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  sender_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  sender_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  sender_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  sender_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sender_not_ends_with?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  body_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  body_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  body_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  body_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  body_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  body_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  body_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  body_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  body_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  body_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  body_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  body_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  body_not_ends_with?: Maybe<Scalars['String']>;
}

export interface MessageUpdateManyDataInput {
  type?: Maybe<MessageType>;
  sender?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
}

export interface SettingsUpdateInput {
  renderDistance?: Maybe<Scalars['Int']>;
}

export interface SettingsWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface CallRequestUpdateInput {
  called_descriptions?: Maybe<Scalars['Json']>;
  caller_descriptions?: Maybe<Scalars['Json']>;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called?: Maybe<UserUpdateOneRequiredInput>;
  Caller?: Maybe<UserUpdateOneInput>;
  Room?: Maybe<ChatRoomUpdateOneWithoutCallRequestsInput>;
}

export interface ChatRoomUpdateOneWithoutCallRequestsInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CallRequestWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface UserUpdateInput {
  username?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  ethWalletPK?: Maybe<Scalars['String']>;
  ethWalletPKSendEmail?: Maybe<Scalars['Boolean']>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  marketplaceToken?: Maybe<Scalars['String']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  /** Разрешены ли чат-сообщения от анонимных пользователей */
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли анонимному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  /** Разрешено ли авторизованному пользователю начать новый диалог с данным пользователем */
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
}

export interface NotificationTypeUpdateManyWithoutUsersInput {
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  set?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  disconnect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  updateMany?: Maybe<Array<NotificationTypeUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<NotificationTypeScalarWhereInput>>;
}

export interface NotificationTypeUpdateManyWithWhereNestedInput {
  where: NotificationTypeScalarWhereInput;
  data: NotificationTypeUpdateManyDataInput;
}

export interface NotificationTypeScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NotificationTypeScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NotificationTypeScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NotificationTypeScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  comment_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  comment_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  comment_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  comment_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  comment_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  comment_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  comment_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  comment_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  comment_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  comment_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  comment_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  comment_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  comment_not_ends_with?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface UserGroupUpdateManyWithoutUsersInput {
  connect?: Maybe<Array<UserGroupWhereUniqueInput>>;
  set?: Maybe<Array<UserGroupWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserGroupWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserGroupUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserGroupScalarWhereInput>>;
}

export interface UserGroupWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}

export interface UserGroupUpdateManyWithWhereNestedInput {
  where: UserGroupScalarWhereInput;
  data: UserGroupUpdateManyDataInput;
}

export interface UserGroupScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserGroupScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserGroupScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserGroupScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
}

export interface UserGroupUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
}

export interface BatchPayload {
  __typename?: 'BatchPayload';
  /** The number of nodes that have been affected by the Batch operation. */
  count: Scalars['Long'];
}


export interface RunCommandInput {
  playerId: Scalars['ID'];
  worldId: Scalars['ID'];
  command: Scalars['String'];
}

export interface LoginUserInput {
  email: Scalars['String'];
  password: Scalars['String'];
}

export interface McJsAuthPayload {
  __typename?: 'McJsAuthPayload';
  token: Scalars['String'];
  user: User;
}

export interface FileCreateInput {
  id?: Maybe<Scalars['ID']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryCreateOneWithoutFilesInput>;
  CreatedBy: UserCreateOneWithoutFilesInput;
  ImageResource?: Maybe<ResourceCreateOneWithoutImageInput>;
}

export interface GalleryCreateOneWithoutFilesInput {
  connect?: Maybe<GalleryWhereUniqueInput>;
}

export interface UserCreateOneWithoutFilesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResourceCreateOneWithoutImageInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface FileResponse {
  __typename?: 'FileResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<File>;
}

export interface FileUpdateInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryUpdateOneWithoutFilesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutFilesInput>;
  ImageResource?: Maybe<ResourceUpdateOneWithoutImageInput>;
}

export interface GalleryUpdateOneWithoutFilesInput {
  connect?: Maybe<GalleryWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface UserUpdateOneRequiredWithoutFilesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResourceUpdateOneWithoutImageInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}


export interface SingleUploadInput {
  file?: Maybe<Scalars['Upload']>;
  name?: Maybe<Scalars['String']>;
  directory?: Maybe<Scalars['String']>;
}

export interface SmsMessageCreateInput {
  id?: Maybe<Scalars['ID']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<SmsMessageCreaterecipientsInput>;
  Provider: SmsProviderCreateOneInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Status?: Maybe<LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput>;
}

export interface SmsMessageCreaterecipientsInput {
  set?: Maybe<Array<Scalars['String']>>;
}

export interface SmsProviderCreateOneInput {
  connect?: Maybe<SmsProviderWhereUniqueInput>;
}

export interface SmsProviderWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}

export interface LetsadsSmsMessageStatusCreateOneWithoutSmsMessageInput {
  connect?: Maybe<LetsadsSmsMessageStatusWhereUniqueInput>;
}

export interface LetsadsSmsMessageStatusWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface SmsMessageResponse {
  __typename?: 'SmsMessageResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<SmsMessage>;
}

export interface SmsMessage extends Node {
  __typename?: 'SmsMessage';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  from: Scalars['String'];
  text: Scalars['String'];
  recipients: Array<Scalars['String']>;
  Provider: SmsProvider;
  deletOnSend?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<User>;
  Status?: Maybe<LetsadsSmsMessageStatus>;
}

export interface SmsProvider extends Node {
  __typename?: 'SmsProvider';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  credentials?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<User>;
}

export interface LetsadsSmsMessageStatus extends Node {
  __typename?: 'LetsadsSmsMessageStatus';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  SmsMessage: SmsMessage;
  Items?: Maybe<Array<LetsadsSmsMessageStatusItem>>;
}


export type LetsadsSmsMessageStatusItemsArgs = {
  where?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
  orderBy?: Maybe<LetsadsSmsMessageStatusItemOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum LetsadsSmsMessageStatusEnum {
  COMPLETE = 'Complete',
  ERROR = 'Error'
}

export enum LetsadsSmsMessageStatusErrorCodeEnum {
  NO_DATA = 'NO_DATA',
  WRONG_DATA_FORMAT = 'WRONG_DATA_FORMAT',
  REQUEST_FORMAT = 'REQUEST_FORMAT',
  AUTH_DATA = 'AUTH_DATA',
  API_DISABLED = 'API_DISABLED',
  USER_NOT_MODERATED = 'USER_NOT_MODERATED',
  INCORRECT_FROM = 'INCORRECT_FROM',
  INVALID_FROM = 'INVALID_FROM',
  MESSAGE_TOO_LONG = 'MESSAGE_TOO_LONG',
  NO_MESSAGE = 'NO_MESSAGE',
  MAX_MESSAGES_COUNT = 'MAX_MESSAGES_COUNT',
  NOT_ENOUGH_MONEY = 'NOT_ENOUGH_MONEY',
  UNKNOWN_ERROR = 'UNKNOWN_ERROR'
}

export interface LetsadsSmsMessageStatusItemWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetsadsSmsMessageStatusItemWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  sms_id?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sms_id_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sms_id_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sms_id_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sms_id_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sms_id_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sms_id_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sms_id_gte?: Maybe<Scalars['Int']>;
  Status?: Maybe<LetsadsSmsMessageStatusWhereInput>;
}

export interface LetsadsSmsMessageStatusWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetsadsSmsMessageStatusWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<LetsadsSmsMessageStatusEnum>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<LetsadsSmsMessageStatusEnum>>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  /** All values that are not equal to given value. */
  errorCode_not?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  /** All values that are contained in given list. */
  errorCode_in?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  /** All values that are not contained in given list. */
  errorCode_not_in?: Maybe<Array<LetsadsSmsMessageStatusErrorCodeEnum>>;
  SmsMessage?: Maybe<SmsMessageWhereInput>;
  Items_every?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
  Items_some?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
  Items_none?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
}

export interface SmsMessageWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SmsMessageWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SmsMessageWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SmsMessageWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  from?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  from_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  from_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  from_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  from_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  from_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  from_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  from_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  from_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  from_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  from_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  from_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  from_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  from_not_ends_with?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  text_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  text_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  text_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  text_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  text_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  text_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  text_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  text_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  text_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  text_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  text_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  text_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  text_not_ends_with?: Maybe<Scalars['String']>;
  deletOnSend?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deletOnSend_not?: Maybe<Scalars['Boolean']>;
  Provider?: Maybe<SmsProviderWhereInput>;
  CreatedBy?: Maybe<UserWhereInput>;
  Status?: Maybe<LetsadsSmsMessageStatusWhereInput>;
}

export interface SmsProviderWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SmsProviderWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SmsProviderWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SmsProviderWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserWhereInput>;
}

export enum LetsadsSmsMessageStatusItemOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  SMS_ID_ASC = 'sms_id_ASC',
  SMS_ID_DESC = 'sms_id_DESC'
}

export interface LetsadsSmsMessageStatusItem extends Node {
  __typename?: 'LetsadsSmsMessageStatusItem';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  sms_id: Scalars['Int'];
  Status?: Maybe<LetsadsSmsMessageStatus>;
}

export interface SmsProviderCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  credentials?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface SmsProviderResponse {
  __typename?: 'SmsProviderResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<SmsProvider>;
}

export interface SmsProviderUpdateInput {
  name?: Maybe<Scalars['String']>;
  credentials?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface SigninDataInput {
  password: Scalars['String'];
}

export interface UserResponse {
  __typename?: 'UserResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<User>;
}

export interface ResetPasswordInput {
  code: Scalars['ID'];
}

export interface ResetPasswordCreateInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserCreateOneInput>;
}

export interface ResetPasswordResponse {
  __typename?: 'ResetPasswordResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<ResetPassword>;
}

export interface ResetPassword extends Node {
  __typename?: 'ResetPassword';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  code?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
  User?: Maybe<User>;
}

export interface TemplateCreateInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateCreateOneInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Project?: Maybe<ProjectCreateOneInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaTemplatesInput>;
}

export interface TemplateCreateOneInput {
  connect?: Maybe<TemplateWhereUniqueInput>;
}

export interface ProjectCreateOneInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ProjectCreateOneWithoutPrismaTemplatesInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface TemplateResponse {
  __typename?: 'TemplateResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Template>;
}

export interface TemplateUpdateInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaTemplatesInput>;
}

export interface TemplateUpdateOneInput {
  connect?: Maybe<TemplateWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectUpdateOneInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectUpdateOneWithoutPrismaTemplatesInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface GalleryCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  Files?: Maybe<FileCreateManyWithoutGalleryInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutGalleriesInput>;
}

export interface FileCreateManyWithoutGalleryInput {
  connect?: Maybe<Array<FileWhereUniqueInput>>;
}

export interface ResourceCreateOneWithoutGalleriesInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface GalleryResponse {
  __typename?: 'GalleryResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Gallery>;
}

export interface GalleryUpdateInput {
  name?: Maybe<Scalars['String']>;
  Files?: Maybe<FileUpdateManyWithoutGalleryInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutGalleriesInput>;
}

export interface FileUpdateManyWithoutGalleryInput {
  connect?: Maybe<Array<FileWhereUniqueInput>>;
  set?: Maybe<Array<FileWhereUniqueInput>>;
  disconnect?: Maybe<Array<FileWhereUniqueInput>>;
  updateMany?: Maybe<Array<FileUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<FileScalarWhereInput>>;
}

export interface FileUpdateManyWithWhereNestedInput {
  where: FileScalarWhereInput;
  data: FileUpdateManyDataInput;
}

export interface FileScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FileScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FileScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FileScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  path?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  path_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  path_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  path_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  path_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  path_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  path_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  path_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  path_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  path_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  path_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  path_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  path_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  path_not_ends_with?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  filename_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  filename_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  filename_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  filename_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  filename_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  filename_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  filename_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  filename_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  filename_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  filename_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  filename_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  filename_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  filename_not_ends_with?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mimetype_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mimetype_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mimetype_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mimetype_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mimetype_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  mimetype_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mimetype_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  mimetype_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  mimetype_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  mimetype_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mimetype_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  mimetype_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mimetype_not_ends_with?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  encoding_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  encoding_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  encoding_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  encoding_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  encoding_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  encoding_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  encoding_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  encoding_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  encoding_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  encoding_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  encoding_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  encoding_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  encoding_not_ends_with?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  hash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  hash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  hash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  hash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  hash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  hash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  hash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  hash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  hash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  hash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  hash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  hash_not_ends_with?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
}

export interface FileUpdateManyDataInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface ResourceUpdateOneWithoutGalleriesInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceCreateInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface UserCreateOneWithoutResourcesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResourceCreateOneWithoutChildsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateManyWithoutParentInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ProjectCreateOneWithoutPrismaResourcesInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ResourceCreateOneWithoutCommentsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateManyWithoutTopicInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface VoteCreateManyWithoutResourceInput {
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
}

export interface ResourceTagCreateManyWithoutResourceInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceCreateOneInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface GalleryCreateManyWithoutResourceInput {
  connect?: Maybe<Array<GalleryWhereUniqueInput>>;
}

export interface EthAccountCreateOneWithoutResourcesInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface FileCreateOneWithoutImageResourceInput {
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface ServiceCreateOneWithoutResourceInput {
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface TeamCreateOneWithoutResourceInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface ProjectCreateOneWithoutResourceInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ResourceUpdateInput {
  blogID?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface UserUpdateOneWithoutResourcesInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateOneWithoutChildsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateManyWithoutParentInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface ResourceUpdateManyWithWhereNestedInput {
  where: ResourceScalarWhereInput;
  data: ResourceUpdateManyDataInput;
}

export interface ResourceScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<ResourceType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<ResourceType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<ResourceType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<ResourceType>>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  longtitle_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  longtitle_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  longtitle_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  longtitle_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  longtitle_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  longtitle_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  longtitle_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  longtitle_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  longtitle_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  longtitle_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  longtitle_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  longtitle_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  longtitle_not_ends_with?: Maybe<Scalars['String']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  published_not?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleted_not?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hidemenu_not?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  searchable_not?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  uri_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  uri_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  uri_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  uri_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  uri_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  uri_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  uri_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  uri_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  uri_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  uri_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  uri_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  uri_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  uri_not_ends_with?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isfolder_not?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  rating_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  rating_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  rating_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  rating_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  rating_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  rating_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  rating_gte?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  positiveVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  positiveVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  positiveVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  positiveVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  positiveVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  positiveVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  positiveVotesCount_gte?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  negativeVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  negativeVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  negativeVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  negativeVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  negativeVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  negativeVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  negativeVotesCount_gte?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  neutralVotesCount_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  neutralVotesCount_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  neutralVotesCount_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  neutralVotesCount_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  neutralVotesCount_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  neutralVotesCount_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  neutralVotesCount_gte?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  mockUpdate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  mockUpdate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  mockUpdate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  mockUpdate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  mockUpdate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  mockUpdate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  mockUpdate_gte?: Maybe<Scalars['DateTime']>;
  commentOldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  commentOldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  commentOldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  commentOldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  commentOldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  commentOldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  commentOldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  commentOldID_gte?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  class_key_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  class_key_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  class_key_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  class_key_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  class_key_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  class_key_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  class_key_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  class_key_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  class_key_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  class_key_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  class_key_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  class_key_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  class_key_not_ends_with?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  template_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  template_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  template_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  template_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  template_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  template_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  template_gte?: Maybe<Scalars['Int']>;
}

export interface ResourceUpdateManyDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
}

export interface ProjectUpdateOneWithoutPrismaResourcesInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateOneWithoutCommentsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateManyWithoutTopicInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface VoteUpdateManyWithoutResourceInput {
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
  set?: Maybe<Array<VoteWhereUniqueInput>>;
  disconnect?: Maybe<Array<VoteWhereUniqueInput>>;
  updateMany?: Maybe<Array<VoteUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<VoteScalarWhereInput>>;
}

export interface VoteUpdateManyWithWhereNestedInput {
  where: VoteScalarWhereInput;
  data: VoteUpdateManyDataInput;
}

export interface VoteScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<VoteScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<VoteScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<VoteScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  value?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  value_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  value_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  value_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  value_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  value_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  value_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  value_gte?: Maybe<Scalars['Float']>;
}

export interface VoteUpdateManyDataInput {
  value?: Maybe<Scalars['Float']>;
}

export interface ResourceTagUpdateManyWithoutResourceInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  set?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceTagUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceTagScalarWhereInput>>;
}

export interface ResourceTagUpdateManyWithWhereNestedInput {
  where: ResourceTagScalarWhereInput;
  data: ResourceTagUpdateManyDataInput;
}

export interface ResourceTagScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceTagScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceTagScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceTagScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TagStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TagStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TagStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TagStatus>>;
}

export interface ResourceTagUpdateManyDataInput {
  status?: Maybe<TagStatus>;
}

export interface ResourceUpdateOneInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeUpdateOneWithoutTopicInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface GalleryUpdateManyWithoutResourceInput {
  connect?: Maybe<Array<GalleryWhereUniqueInput>>;
  set?: Maybe<Array<GalleryWhereUniqueInput>>;
  disconnect?: Maybe<Array<GalleryWhereUniqueInput>>;
  updateMany?: Maybe<Array<GalleryUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<GalleryScalarWhereInput>>;
}

export interface GalleryUpdateManyWithWhereNestedInput {
  where: GalleryScalarWhereInput;
  data: GalleryUpdateManyDataInput;
}

export interface GalleryScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GalleryScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GalleryScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GalleryScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
}

export interface GalleryUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
}

export interface EthAccountUpdateOneWithoutResourcesInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface FileUpdateOneWithoutImageResourceInput {
  connect?: Maybe<FileWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ServiceUpdateOneWithoutResourceInput {
  connect?: Maybe<ServiceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TeamUpdateOneWithoutResourceInput {
  connect?: Maybe<TeamWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectUpdateOneWithoutResourceInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateOneWithoutCommentsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface GameCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourney?: Maybe<TourneyCreateOneWithoutGamesInput>;
  Users?: Maybe<UserCreateManyInput>;
  Teams?: Maybe<TeamCreateManyInput>;
  Parent?: Maybe<GameCreateOneWithoutChildsInput>;
  Childs?: Maybe<GameCreateManyWithoutParentInput>;
  Results?: Maybe<GameResultCreateManyWithoutGameInput>;
}

export interface TourneyCreateOneWithoutGamesInput {
  connect?: Maybe<TourneyWhereUniqueInput>;
}

export interface UserCreateManyInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface TeamCreateManyInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface GameCreateOneWithoutChildsInput {
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameCreateManyWithoutParentInput {
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface GameResultCreateManyWithoutGameInput {
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
}

export interface GameResponse {
  __typename?: 'GameResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<Game>;
}

export interface GameUpdateInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourney?: Maybe<TourneyUpdateOneWithoutGamesInput>;
  Users?: Maybe<UserUpdateManyInput>;
  Teams?: Maybe<TeamUpdateManyInput>;
  Parent?: Maybe<GameUpdateOneWithoutChildsInput>;
  Childs?: Maybe<GameUpdateManyWithoutParentInput>;
  Results?: Maybe<GameResultUpdateManyWithoutGameInput>;
}

export interface TourneyUpdateOneWithoutGamesInput {
  connect?: Maybe<TourneyWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface UserUpdateManyInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  username?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  username_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  username_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  username_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  username_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  username_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  username_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  username_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  username_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  username_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  username_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  username_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  username_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  username_not_ends_with?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  phone_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showEmail_not?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  showPhone_not?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  password_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  password_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  password_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  password_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  password_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  password_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  password_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  password_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  password_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  password_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  password_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  password_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  password_not_ends_with?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  fullname_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  fullname_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  fullname_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  fullname_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  fullname_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  fullname_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  fullname_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  fullname_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  fullname_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  fullname_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  fullname_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  fullname_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  fullname_not_ends_with?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  image_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  image_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  image_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  image_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  image_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  image_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  image_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  image_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  image_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  image_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  image_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  image_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  image_not_ends_with?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  active_not?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  activated_not?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleted_not?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  hidden_not?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  sudo_not?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  marketplaceToken_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  marketplaceToken_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  marketplaceToken_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  marketplaceToken_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  marketplaceToken_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  marketplaceToken_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  marketplaceToken_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  marketplaceToken_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  marketplaceToken_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  marketplaceToken_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  marketplaceToken_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  marketplaceToken_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  marketplaceToken_not_ends_with?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptChatMessageAnonymous_not?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptNewChatRoomAnonymous_not?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  acceptNewChatRoom_not?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
}

export interface UserUpdateManyDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface TeamUpdateManyInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
  set?: Maybe<Array<TeamWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamScalarWhereInput>>;
}

export interface TeamUpdateManyWithWhereNestedInput {
  where: TeamScalarWhereInput;
  data: TeamUpdateManyDataInput;
}

export interface TeamScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TeamStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TeamStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TeamStatus>>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  website_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  website_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  website_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  website_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  website_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  website_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  website_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  website_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  website_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  website_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  website_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  website_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  website_not_ends_with?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  phone_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  phone_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  phone_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  phone_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  phone_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  phone_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  phone_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  phone_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  phone_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  phone_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  phone_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  phone_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  phone_not_ends_with?: Maybe<Scalars['String']>;
}

export interface TeamUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
}

export interface GameUpdateOneWithoutChildsInput {
  connect?: Maybe<GameWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface GameUpdateManyWithoutParentInput {
  connect?: Maybe<Array<GameWhereUniqueInput>>;
  set?: Maybe<Array<GameWhereUniqueInput>>;
  disconnect?: Maybe<Array<GameWhereUniqueInput>>;
  updateMany?: Maybe<Array<GameUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<GameScalarWhereInput>>;
}

export interface GameUpdateManyWithWhereNestedInput {
  where: GameScalarWhereInput;
  data: GameUpdateManyDataInput;
}

export interface GameScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  start_date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  start_date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  start_date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  start_date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  start_date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  start_date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  start_date_gte?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  end_date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  end_date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  end_date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  end_date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  end_date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  end_date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  end_date_gte?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sequence_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sequence_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sequence_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sequence_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sequence_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sequence_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sequence_gte?: Maybe<Scalars['Int']>;
}

export interface GameUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
}

export interface GameResultUpdateManyWithoutGameInput {
  connect?: Maybe<Array<GameResultWhereUniqueInput>>;
  set?: Maybe<Array<GameResultWhereUniqueInput>>;
  disconnect?: Maybe<Array<GameResultWhereUniqueInput>>;
  updateMany?: Maybe<Array<GameResultUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<GameResultScalarWhereInput>>;
}

export interface GameResultUpdateManyWithWhereNestedInput {
  where: GameResultScalarWhereInput;
  data: GameResultUpdateManyDataInput;
}

export interface GameResultScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameResultScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameResultScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameResultScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  value_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  value_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  value_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  value_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  value_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  value_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  value_gte?: Maybe<Scalars['Float']>;
}

export interface GameResultUpdateManyDataInput {
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
}

export interface GameResultCreateInput {
  id?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  User?: Maybe<UserCreateOneInput>;
  Team?: Maybe<TeamCreateOneInput>;
  Game: GameCreateOneWithoutResultsInput;
}

export interface TeamCreateOneInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface GameCreateOneWithoutResultsInput {
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface GameResultResponse {
  __typename?: 'GameResultResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<GameResult>;
}

export interface GameResultUpdateInput {
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  User?: Maybe<UserUpdateOneInput>;
  Team?: Maybe<TeamUpdateOneInput>;
  Game?: Maybe<GameUpdateOneRequiredWithoutResultsInput>;
}

export interface TeamUpdateOneInput {
  connect?: Maybe<TeamWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface GameUpdateOneRequiredWithoutResultsInput {
  connect?: Maybe<GameWhereUniqueInput>;
}

export interface TournamentCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourneys?: Maybe<TourneyCreateManyWithoutTournamentInput>;
  Group?: Maybe<TournamentGroupCreateOneWithoutTournamentsInput>;
}

export interface TourneyCreateManyWithoutTournamentInput {
  connect?: Maybe<Array<TourneyWhereUniqueInput>>;
}

export interface TournamentGroupCreateOneWithoutTournamentsInput {
  connect?: Maybe<TournamentGroupWhereUniqueInput>;
}

export interface TournamentResponse {
  __typename?: 'TournamentResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<Tournament>;
}

export interface TournamentUpdateInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourneys?: Maybe<TourneyUpdateManyWithoutTournamentInput>;
  Group?: Maybe<TournamentGroupUpdateOneWithoutTournamentsInput>;
}

export interface TourneyUpdateManyWithoutTournamentInput {
  connect?: Maybe<Array<TourneyWhereUniqueInput>>;
  set?: Maybe<Array<TourneyWhereUniqueInput>>;
  disconnect?: Maybe<Array<TourneyWhereUniqueInput>>;
  updateMany?: Maybe<Array<TourneyUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TourneyScalarWhereInput>>;
}

export interface TourneyUpdateManyWithWhereNestedInput {
  where: TourneyScalarWhereInput;
  data: TourneyUpdateManyDataInput;
}

export interface TourneyScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneyScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneyScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneyScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_till_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_till_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_till_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_till_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_till_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_till_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_till_gte?: Maybe<Scalars['DateTime']>;
}

export interface TourneyUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
}

export interface TournamentGroupUpdateOneWithoutTournamentsInput {
  connect?: Maybe<TournamentGroupWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TournamentGroupCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tournaments?: Maybe<TournamentCreateManyWithoutGroupInput>;
}

export interface TournamentCreateManyWithoutGroupInput {
  connect?: Maybe<Array<TournamentWhereUniqueInput>>;
}

export interface TournamentGroupResponse {
  __typename?: 'TournamentGroupResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<TournamentGroup>;
}

export interface TournamentGroupUpdateInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tournaments?: Maybe<TournamentUpdateManyWithoutGroupInput>;
}

export interface TournamentUpdateManyWithoutGroupInput {
  connect?: Maybe<Array<TournamentWhereUniqueInput>>;
  set?: Maybe<Array<TournamentWhereUniqueInput>>;
  disconnect?: Maybe<Array<TournamentWhereUniqueInput>>;
  updateMany?: Maybe<Array<TournamentUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TournamentScalarWhereInput>>;
}

export interface TournamentUpdateManyWithWhereNestedInput {
  where: TournamentScalarWhereInput;
  data: TournamentUpdateManyDataInput;
}

export interface TournamentScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TournamentScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TournamentScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TournamentScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
}

export interface TournamentUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TourneyCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tournament?: Maybe<TournamentCreateOneWithoutTourneysInput>;
  Players?: Maybe<TourneyPlayerCreateManyWithoutTourneyInput>;
  Games?: Maybe<GameCreateManyWithoutTourneyInput>;
}

export interface TournamentCreateOneWithoutTourneysInput {
  connect?: Maybe<TournamentWhereUniqueInput>;
}

export interface TourneyPlayerCreateManyWithoutTourneyInput {
  connect?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
}

export interface TourneyPlayerWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface GameCreateManyWithoutTourneyInput {
  connect?: Maybe<Array<GameWhereUniqueInput>>;
}

export interface TourneyResponse {
  __typename?: 'TourneyResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<Tourney>;
}

export interface TourneyUpdateInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tournament?: Maybe<TournamentUpdateOneWithoutTourneysInput>;
  Players?: Maybe<TourneyPlayerUpdateManyWithoutTourneyInput>;
  Games?: Maybe<GameUpdateManyWithoutTourneyInput>;
}

export interface TournamentUpdateOneWithoutTourneysInput {
  connect?: Maybe<TournamentWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TourneyPlayerUpdateManyWithoutTourneyInput {
  connect?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
  set?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
  disconnect?: Maybe<Array<TourneyPlayerWhereUniqueInput>>;
  deleteMany?: Maybe<Array<TourneyPlayerScalarWhereInput>>;
}

export interface TourneyPlayerScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneyPlayerScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneyPlayerScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneyPlayerScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
}

export interface GameUpdateManyWithoutTourneyInput {
  connect?: Maybe<Array<GameWhereUniqueInput>>;
  set?: Maybe<Array<GameWhereUniqueInput>>;
  disconnect?: Maybe<Array<GameWhereUniqueInput>>;
  updateMany?: Maybe<Array<GameUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<GameScalarWhereInput>>;
}

export interface ChatRoomCreateInput {
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  isPublic?: Maybe<Scalars['Boolean']>;
  /** Разрешается писать анонимным пользователям */
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  /** Флаг песочницы (в эту комнату прилетают сообщения от анонимных пользователей) */
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface UserCreateManyWithoutRoomsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface ChatRoomResponse {
  __typename?: 'ChatRoomResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<ChatRoom>;
}

export interface ChatRoomUpdateInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  isPublic?: Maybe<Scalars['Boolean']>;
  /** Разрешается писать анонимным пользователям */
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  /** Флаг песочницы (в эту комнату прилетают сообщения от анонимных пользователей) */
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface UserUpdateManyWithoutRoomsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface ChatRoomInviteInput {
  User: UserWhereUniqueInput;
}

export interface ChatMessageReadedCreateInput {
  Message: ChatMessageCreateOneWithoutReadedByInput;
}

export interface ChatMessageCreateOneWithoutReadedByInput {
  connect?: Maybe<ChatMessageWhereUniqueInput>;
}

export interface ChatMessageReadedResponse {
  __typename?: 'ChatMessageReadedResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<ChatMessageReaded>;
}

export interface ChatMessageCreateInput {
  content?: Maybe<Scalars['Json']>;
  Room?: Maybe<ChatRoomCreateOneWithoutMessagesInput>;
}

export interface ChatRoomCreateOneWithoutMessagesInput {
  to?: Maybe<Scalars['ID']>;
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatMessageResponse {
  __typename?: 'ChatMessageResponse';
  success: Scalars['Boolean'];
  message: Scalars['String'];
  errors: Array<Error>;
  data?: Maybe<ChatMessage>;
}

export interface ChatMessageUpdateInput {
  content?: Maybe<Scalars['Json']>;
}

export interface EthContractSourceCreateInput {
  name: Scalars['String'];
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
}

export interface EthContractSourceResponse {
  __typename?: 'EthContractSourceResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<EthContractSource>;
}

export interface EthContractSourceUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
}

export interface EthAccountCreateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
}

export interface EthContractSourceCreateOneWithoutAccountsInput {
  connect?: Maybe<EthContractSourceWhereUniqueInput>;
}

export interface EthAccountUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
}

export interface EthContractSourceUpdateOneWithoutAccountsInput {
  connect?: Maybe<EthContractSourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionCreateInput {
  privateKey: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  to?: Maybe<Scalars['String']>;
  /** In ether value, not wei */
  amount?: Maybe<Scalars['Float']>;
  gasPrice?: Maybe<Scalars['Int']>;
  contractSourceId?: Maybe<Scalars['ID']>;
}

export interface EthTransactionResponse {
  __typename?: 'EthTransactionResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<EthTransaction>;
}

export interface CallRequestResponse {
  __typename?: 'CallRequestResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<CallRequest>;
}

export interface ProjectCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface TemplateCreateManyWithoutPrismaProjectInput {
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
}

export interface UserCreateManyWithoutPrismaProjectsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface ResourceCreateManyWithoutPrismaProjectInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ProjectMemberCreateManyWithoutProjectInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface UserCreateOneWithoutProjectsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProjectTaskCreateManyWithoutProjectInput {
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
}

export interface ProjectTaskWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TeamCreateOneWithoutProjectsInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateManyWithoutOrderedProjectsInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface ChatRoomCreateOneWithoutProjectInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface FileCreateOneInput {
  connect?: Maybe<FileWhereUniqueInput>;
}

export interface ResourceCreateOneWithoutProjectInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface EthAccountCreateManyWithoutProjectInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface ProjectResponse {
  __typename?: 'ProjectResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Project>;
}

export interface ProjectUpdateInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface TemplateUpdateManyWithoutPrismaProjectInput {
  connect?: Maybe<Array<TemplateWhereUniqueInput>>;
  set?: Maybe<Array<TemplateWhereUniqueInput>>;
  disconnect?: Maybe<Array<TemplateWhereUniqueInput>>;
  updateMany?: Maybe<Array<TemplateUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TemplateScalarWhereInput>>;
}

export interface TemplateUpdateManyWithWhereNestedInput {
  where: TemplateScalarWhereInput;
  data: TemplateUpdateManyDataInput;
}

export interface TemplateScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TemplateScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TemplateScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TemplateScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  externalKey?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  component_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  component_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  component_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  component_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  component_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  component_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  component_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  component_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  component_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  component_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  component_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  component_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  component_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
}

export interface TemplateUpdateManyDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface UserUpdateManyWithoutPrismaProjectsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface ResourceUpdateManyWithoutPrismaProjectInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface ProjectMemberUpdateManyWithoutProjectInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  set?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectMemberScalarWhereInput>>;
}

export interface ProjectMemberUpdateManyWithWhereNestedInput {
  where: ProjectMemberScalarWhereInput;
  data: ProjectMemberUpdateManyDataInput;
}

export interface ProjectMemberScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectMemberScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectMemberScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectMemberScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<ProjectMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ProjectMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ProjectMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ProjectMemberStatus>>;
}

export interface ProjectMemberUpdateManyDataInput {
  status?: Maybe<ProjectMemberStatus>;
}

export interface UserUpdateOneWithoutProjectsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectTaskUpdateManyWithoutProjectInput {
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  set?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  deleteMany?: Maybe<Array<ProjectTaskScalarWhereInput>>;
}

export interface ProjectTaskScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectTaskScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectTaskScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectTaskScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface TeamUpdateOneWithoutProjectsInput {
  connect?: Maybe<TeamWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TeamUpdateManyWithoutOrderedProjectsInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
  set?: Maybe<Array<TeamWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamScalarWhereInput>>;
}

export interface ChatRoomUpdateOneWithoutProjectInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface FileUpdateOneInput {
  connect?: Maybe<FileWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateOneWithoutProjectInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateManyWithoutProjectInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  set?: Maybe<Array<EthAccountWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthAccountUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthAccountScalarWhereInput>>;
}

export interface EthAccountUpdateManyWithWhereNestedInput {
  where: EthAccountScalarWhereInput;
  data: EthAccountUpdateManyDataInput;
}

export interface EthAccountScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthAccountScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthAccountScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthAccountScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<EthAccountType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<EthAccountType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<EthAccountType>>;
  source?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  source_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  source_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  bytecode_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  bytecode_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  bytecode_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  bytecode_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  bytecode_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  bytecode_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  bytecode_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  bytecode_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  bytecode_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  bytecode_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  bytecode_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  bytecode_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  bytecode_not_ends_with?: Maybe<Scalars['String']>;
}

export interface EthAccountUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
}

export interface ProjectMemberCreateInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Project: ProjectCreateOneWithoutMembersInput;
  User: UserCreateOneWithoutProjectsInput;
  Services?: Maybe<ServiceCreateManyWithoutProjectsInput>;
}

export interface ProjectCreateOneWithoutMembersInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserCreateOneWithoutProjectsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceCreateManyWithoutProjectsInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ProjectMemberResponse {
  __typename?: 'ProjectMemberResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<ProjectMember>;
}

export interface ProjectMemberUpdateInput {
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneRequiredWithoutMembersInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutProjectsInput>;
  Services?: Maybe<ServiceUpdateManyWithoutProjectsInput>;
}

export interface ProjectUpdateOneRequiredWithoutMembersInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutProjectsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceUpdateManyWithoutProjectsInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
  set?: Maybe<Array<ServiceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ServiceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ServiceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ServiceScalarWhereInput>>;
}

export interface ServiceUpdateManyWithWhereNestedInput {
  where: ServiceScalarWhereInput;
  data: ServiceUpdateManyDataInput;
}

export interface ServiceScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
}

export interface ServiceUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface TaskCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
  /** Custom field. Connect Project */
  Project: ProjectCreateOneWithoutProjectTasksInput;
}

export interface ProjectTaskCreateManyWithoutTaskInput {
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
}

export interface UserCreateOneWithoutTasksCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskMemberCreateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
}

export interface TaskMemberWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TaskCreateOneWithoutChildsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateManyWithoutParentInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateManyWithoutRelatedToInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateManyWithoutRelatedFromInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TimerCreateManyWithoutTaskInput {
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
}

export interface TaskReactionCreateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
}

export interface ChatRoomCreateOneWithoutTaskInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface CodeChallengeCompletionCreateOneWithoutTaskInput {
  connect?: Maybe<CodeChallengeCompletionWhereUniqueInput>;
}

export interface TaskTechnologyCreateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
}

export interface ResourceCreateManyWithoutTaskInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ProjectCreateOneWithoutProjectTasksInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface TaskResponse {
  __typename?: 'TaskResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Task>;
}

export interface TaskUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface ProjectTaskUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  set?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectTaskWhereUniqueInput>>;
  deleteMany?: Maybe<Array<ProjectTaskScalarWhereInput>>;
}

export interface UserUpdateOneWithoutTasksCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskMemberUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  set?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskMemberScalarWhereInput>>;
}

export interface TaskMemberUpdateManyWithWhereNestedInput {
  where: TaskMemberScalarWhereInput;
  data: TaskMemberUpdateManyDataInput;
}

export interface TaskMemberScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskMemberScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskMemberScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskMemberScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TaskMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TaskMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TaskMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TaskMemberStatus>>;
}

export interface TaskMemberUpdateManyDataInput {
  status?: Maybe<TaskMemberStatus>;
}

export interface TaskUpdateOneWithoutChildsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateManyWithoutParentInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
  set?: Maybe<Array<TaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskScalarWhereInput>>;
}

export interface TaskUpdateManyWithWhereNestedInput {
  where: TaskScalarWhereInput;
  data: TaskUpdateManyDataInput;
}

export interface TaskScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TaskStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TaskStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TaskStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TaskStatus>>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDatePlaning_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDatePlaning_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startDatePlaning_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDatePlaning_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDatePlaning_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDatePlaning_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDatePlaning_gte?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDatePlaning_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDatePlaning_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endDatePlaning_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDatePlaning_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDatePlaning_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDatePlaning_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDatePlaning_gte?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startDate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startDate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startDate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startDate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startDate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startDate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startDate_gte?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endDate_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endDate_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endDate_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endDate_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endDate_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endDate_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endDate_gte?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  needHelp_not?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateManyWithoutRelatedToInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
  set?: Maybe<Array<TaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskScalarWhereInput>>;
}

export interface TaskUpdateManyWithoutRelatedFromInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
  set?: Maybe<Array<TaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskScalarWhereInput>>;
}

export interface TimerUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
  set?: Maybe<Array<TimerWhereUniqueInput>>;
  disconnect?: Maybe<Array<TimerWhereUniqueInput>>;
  updateMany?: Maybe<Array<TimerUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TimerScalarWhereInput>>;
}

export interface TimerUpdateManyWithWhereNestedInput {
  where: TimerScalarWhereInput;
  data: TimerUpdateManyDataInput;
}

export interface TimerScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TimerScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TimerScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TimerScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  stopedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  stopedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  stopedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  stopedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  stopedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  stopedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  stopedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface TimerUpdateManyDataInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
}

export interface TaskReactionUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  set?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskReactionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskReactionScalarWhereInput>>;
}

export interface TaskReactionUpdateManyWithWhereNestedInput {
  where: TaskReactionScalarWhereInput;
  data: TaskReactionUpdateManyDataInput;
}

export interface TaskReactionScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskReactionScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskReactionScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskReactionScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<TaskReactionType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<TaskReactionType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<TaskReactionType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<TaskReactionType>>;
}

export interface TaskReactionUpdateManyDataInput {
  type?: Maybe<TaskReactionType>;
}

export interface ChatRoomUpdateOneWithoutTaskInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionUpdateOneWithoutTaskInput {
  connect?: Maybe<CodeChallengeCompletionWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskTechnologyUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  set?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskTechnologyWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskTechnologyUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskTechnologyScalarWhereInput>>;
}

export interface ResourceUpdateManyWithoutTaskInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface TaskReactionCreateInput {
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<TaskReactionType>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksReactionsInput>;
  Task: TaskCreateOneWithoutReactionsInput;
}

export interface UserCreateOneWithoutTasksReactionsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskCreateOneWithoutReactionsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskReactionResponse {
  __typename?: 'TaskReactionResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<TaskReaction>;
}

export interface TaskReactionUpdateInput {
  type?: Maybe<TaskReactionType>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksReactionsInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutReactionsInput>;
}

export interface UserUpdateOneWithoutTasksReactionsInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateOneRequiredWithoutReactionsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TimerCreateInput {
  id?: Maybe<Scalars['ID']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneWithoutTimersInput>;
  Task: TaskCreateOneWithoutTimersInput;
}

export interface UserCreateOneWithoutTimersInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskCreateOneWithoutTimersInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TimerResponse {
  __typename?: 'TimerResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Timer>;
}

export interface TimerUpdateInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTimersInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTimersInput>;
}

export interface UserUpdateOneWithoutTimersInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateOneRequiredWithoutTimersInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TeamCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateOneWithoutChildsInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface TeamCreateManyWithoutParentInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface UserCreateOneWithoutTeamsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TeamMemberCreateManyWithoutTeamInput {
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
}

export interface ProjectCreateManyWithoutTeamInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateManyWithoutCustomersInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ResourceCreateOneWithoutTeamInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface TeamResponse {
  __typename?: 'TeamResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Team>;
}

export interface TeamUpdateInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateOneWithoutChildsInput {
  connect?: Maybe<TeamWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TeamUpdateManyWithoutParentInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
  set?: Maybe<Array<TeamWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamScalarWhereInput>>;
}

export interface UserUpdateOneWithoutTeamsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TeamMemberUpdateManyWithoutTeamInput {
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  set?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamMemberScalarWhereInput>>;
}

export interface TeamMemberUpdateManyWithWhereNestedInput {
  where: TeamMemberScalarWhereInput;
  data: TeamMemberUpdateManyDataInput;
}

export interface TeamMemberScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamMemberScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamMemberScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamMemberScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<TeamMemberStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TeamMemberStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TeamMemberStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TeamMemberStatus>>;
}

export interface TeamMemberUpdateManyDataInput {
  status?: Maybe<TeamMemberStatus>;
}

export interface ProjectUpdateManyWithoutTeamInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
  set?: Maybe<Array<ProjectWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectScalarWhereInput>>;
}

export interface ProjectUpdateManyWithWhereNestedInput {
  where: ProjectScalarWhereInput;
  data: ProjectUpdateManyDataInput;
}

export interface ProjectScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  domain_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  domain_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  domain_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  domain_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  domain_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  domain_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  domain_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  domain_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  domain_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  domain_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  domain_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  domain_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  domain_not_ends_with?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  url_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  url_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  url_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  url_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  url_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  url_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  url_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  url_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  url_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  url_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  url_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  url_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  url_not_ends_with?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sequence_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sequence_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sequence_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sequence_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sequence_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sequence_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sequence_gte?: Maybe<Scalars['Int']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ProjectStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ProjectStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ProjectStatus>>;
  public?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  public_not?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  oldID_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  oldID_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  oldID_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  oldID_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  oldID_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  oldID_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  oldID_gte?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<ProjectType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<ProjectType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<ProjectType>>;
}

export interface ProjectUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectUpdateManyWithoutCustomersInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
  set?: Maybe<Array<ProjectWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectScalarWhereInput>>;
}

export interface ResourceUpdateOneRequiredWithoutTeamInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface TeamMemberCreateInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TeamMemberStatus>;
  Team: TeamCreateOneWithoutMembersInput;
  User: UserCreateOneWithoutTeamsInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TeamCreateOneWithoutMembersInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface UserCreateOneWithoutTeamsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TeamMemberResponse {
  __typename?: 'TeamMemberResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<TeamMember>;
}

export interface TeamMemberUpdateInput {
  status?: Maybe<TeamMemberStatus>;
  Team?: Maybe<TeamUpdateOneRequiredWithoutMembersInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutTeamsInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TeamUpdateOneRequiredWithoutMembersInput {
  connect?: Maybe<TeamWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutTeamsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ServiceCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCreateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryCreateOneWithoutServicesInput>;
  Resource: ResourceCreateOneWithoutServiceInput;
}

export interface ProjectMemberCreateManyWithoutServicesInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ServiceCreateOneWithoutChildsInput {
  connect?: Maybe<ServiceWhereUniqueInput>;
}

export interface ServiceCreateManyWithoutParentInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCategoryCreateOneWithoutServicesInput {
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
}

export interface ServiceCategoryWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ResourceCreateOneWithoutServiceInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ServiceResponse {
  __typename?: 'ServiceResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Service>;
}

export interface ServiceUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceUpdateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryUpdateOneWithoutServicesInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutServiceInput>;
}

export interface ProjectMemberUpdateManyWithoutServicesInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  set?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectMemberScalarWhereInput>>;
}

export interface ServiceUpdateOneWithoutChildsInput {
  connect?: Maybe<ServiceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ServiceUpdateManyWithoutParentInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
  set?: Maybe<Array<ServiceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ServiceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ServiceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ServiceScalarWhereInput>>;
}

export interface ServiceCategoryUpdateOneWithoutServicesInput {
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateOneRequiredWithoutServiceInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface PositionCreateInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  CreatedBy?: Maybe<UserCreateOneWithoutPositionsCreatedInput>;
  Users?: Maybe<UserCreateManyWithoutPositionsInput>;
}

export interface UserCreateOneWithoutPositionsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateManyWithoutPositionsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface PositionResponse {
  __typename?: 'PositionResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Position>;
}

export interface PositionUpdateInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutPositionsCreatedInput>;
  Users?: Maybe<UserUpdateManyWithoutPositionsInput>;
}

export interface UserUpdateOneWithoutPositionsCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface UserUpdateManyWithoutPositionsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface RouteCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact?: Maybe<Scalars['Boolean']>;
  component: Scalars['String'];
  Parent?: Maybe<RouteCreateOneWithoutChildsInput>;
  Childs?: Maybe<RouteCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface RouteCreateOneWithoutChildsInput {
  connect?: Maybe<RouteWhereUniqueInput>;
}

export interface RouteCreateManyWithoutParentInput {
  connect?: Maybe<Array<RouteWhereUniqueInput>>;
}

export interface RouteResponse {
  __typename?: 'RouteResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Route>;
}

export interface RouteUpdateInput {
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  Parent?: Maybe<RouteUpdateOneWithoutChildsInput>;
  Childs?: Maybe<RouteUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface RouteUpdateOneWithoutChildsInput {
  connect?: Maybe<RouteWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface RouteUpdateManyWithoutParentInput {
  connect?: Maybe<Array<RouteWhereUniqueInput>>;
  set?: Maybe<Array<RouteWhereUniqueInput>>;
  disconnect?: Maybe<Array<RouteWhereUniqueInput>>;
  updateMany?: Maybe<Array<RouteUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<RouteScalarWhereInput>>;
}

export interface RouteUpdateManyWithWhereNestedInput {
  where: RouteScalarWhereInput;
  data: RouteUpdateManyDataInput;
}

export interface RouteScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RouteScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RouteScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RouteScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  path_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  path_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  path_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  path_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  path_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  path_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  path_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  path_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  path_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  path_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  path_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  path_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  path_not_ends_with?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  exact_not?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  component_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  component_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  component_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  component_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  component_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  component_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  component_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  component_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  component_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  component_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  component_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  component_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  component_not_ends_with?: Maybe<Scalars['String']>;
}

export interface RouteUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
}

export interface Subscription {
  __typename?: 'Subscription';
  gallery?: Maybe<GallerySubscriptionPayload>;
  player?: Maybe<PlayerSubscriptionPayload>;
  world?: Maybe<WorldSubscriptionPayload>;
  message?: Maybe<MessageSubscriptionPayload>;
  notice?: Maybe<NoticeSubscriptionPayload>;
  chatMessageReaded?: Maybe<ChatMessageReadedSubscriptionPayload>;
  chatRoom?: Maybe<ChatRoomSubscriptionPayload>;
  game?: Maybe<GameSubscriptionPayload>;
  gameResult?: Maybe<GameResultSubscriptionPayload>;
  tournament?: Maybe<TournamentSubscriptionPayload>;
  tournamentGroup?: Maybe<TournamentGroupSubscriptionPayload>;
  tourney?: Maybe<TourneySubscriptionPayload>;
  ethTransaction?: Maybe<EthTransactionSubscriptionPayload>;
  callRequest?: Maybe<CallRequestSubscriptionPayload>;
  position?: Maybe<PositionSubscriptionPayload>;
  projectMember?: Maybe<ProjectMemberSubscriptionPayload>;
  service?: Maybe<ServiceSubscriptionPayload>;
  task?: Maybe<TaskSubscriptionPayload>;
  taskReaction?: Maybe<TaskReactionSubscriptionPayload>;
  teamMember?: Maybe<TeamMemberSubscriptionPayload>;
  timer?: Maybe<TimerSubscriptionPayload>;
  route?: Maybe<RouteSubscriptionPayload>;
  codeChallenge?: Maybe<CodeChallengeSubscriptionPayload>;
  codeChallengeBlock?: Maybe<CodeChallengeBlockSubscriptionPayload>;
  comment?: Maybe<CommentSubscriptionPayload>;
  technologyLesson?: Maybe<TechnologyLessonSubscriptionPayload>;
  career?: Maybe<CareerSubscriptionPayload>;
  technologyLessonUser?: Maybe<TechnologyLessonUserSubscriptionPayload>;
  userTechnology?: Maybe<UserTechnologySubscriptionPayload>;
  taskTechnology?: Maybe<TaskTechnologySubscriptionPayload>;
  technology?: Maybe<TechnologySubscriptionPayload>;
  team?: Maybe<TeamSubscriptionPayload>;
  project?: Maybe<ProjectSubscriptionPayload>;
  template?: Maybe<TemplateSubscriptionPayload>;
  resource?: Maybe<ResourceSubscriptionPayload>;
  chatMessage?: Maybe<ChatMessageSubscriptionPayload>;
  user?: Maybe<UserSubscriptionPayload>;
}


export type SubscriptionGalleryArgs = {
  where?: Maybe<GallerySubscriptionWhereInput>;
};


export type SubscriptionPlayerArgs = {
  where?: Maybe<PlayerSubscriptionWhereInput>;
  username: Scalars['String'];
  worldId: Scalars['ID'];
  mutation_in?: Maybe<Array<Scalars['String']>>;
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
};


export type SubscriptionWorldArgs = {
  where?: Maybe<WorldSubscriptionWhereInput>;
  worldId: Scalars['ID'];
  mutation_in?: Maybe<Array<Scalars['String']>>;
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
};


export type SubscriptionMessageArgs = {
  where?: Maybe<MessageSubscriptionWhereInput>;
  worldId: Scalars['ID'];
};


export type SubscriptionNoticeArgs = {
  where?: Maybe<NoticeSubscriptionWhereInput>;
};


export type SubscriptionChatMessageReadedArgs = {
  where?: Maybe<ChatMessageReadedSubscriptionWhereInput>;
};


export type SubscriptionChatRoomArgs = {
  where?: Maybe<ChatRoomSubscriptionWhereInput>;
};


export type SubscriptionGameArgs = {
  where?: Maybe<GameSubscriptionWhereInput>;
};


export type SubscriptionGameResultArgs = {
  where?: Maybe<GameResultSubscriptionWhereInput>;
};


export type SubscriptionTournamentArgs = {
  where?: Maybe<TournamentSubscriptionWhereInput>;
};


export type SubscriptionTournamentGroupArgs = {
  where?: Maybe<TournamentGroupSubscriptionWhereInput>;
};


export type SubscriptionTourneyArgs = {
  where?: Maybe<TourneySubscriptionWhereInput>;
};


export type SubscriptionEthTransactionArgs = {
  where?: Maybe<EthTransactionSubscriptionWhereInput>;
};


export type SubscriptionCallRequestArgs = {
  where?: Maybe<CallRequestSubscriptionWhereInput>;
};


export type SubscriptionPositionArgs = {
  where?: Maybe<PositionSubscriptionWhereInput>;
};


export type SubscriptionProjectMemberArgs = {
  where?: Maybe<ProjectMemberSubscriptionWhereInput>;
};


export type SubscriptionServiceArgs = {
  where?: Maybe<ServiceSubscriptionWhereInput>;
};


export type SubscriptionTaskArgs = {
  where?: Maybe<TaskSubscriptionWhereInput>;
};


export type SubscriptionTaskReactionArgs = {
  where?: Maybe<TaskReactionSubscriptionWhereInput>;
};


export type SubscriptionTeamMemberArgs = {
  where?: Maybe<TeamMemberSubscriptionWhereInput>;
};


export type SubscriptionTimerArgs = {
  where?: Maybe<TimerSubscriptionWhereInput>;
};


export type SubscriptionRouteArgs = {
  where?: Maybe<RouteSubscriptionWhereInput>;
};


export type SubscriptionCodeChallengeArgs = {
  where?: Maybe<CodeChallengeSubscriptionWhereInput>;
};


export type SubscriptionCodeChallengeBlockArgs = {
  where?: Maybe<CodeChallengeBlockSubscriptionWhereInput>;
};


export type SubscriptionCommentArgs = {
  where?: Maybe<CommentSubscriptionWhereInput>;
};


export type SubscriptionTechnologyLessonArgs = {
  where?: Maybe<TechnologyLessonSubscriptionWhereInput>;
};


export type SubscriptionCareerArgs = {
  where?: Maybe<CareerSubscriptionWhereInput>;
};


export type SubscriptionTechnologyLessonUserArgs = {
  where?: Maybe<TechnologyLessonUserSubscriptionWhereInput>;
};


export type SubscriptionUserTechnologyArgs = {
  where?: Maybe<UserTechnologySubscriptionWhereInput>;
};


export type SubscriptionTaskTechnologyArgs = {
  where?: Maybe<TaskTechnologySubscriptionWhereInput>;
};


export type SubscriptionTechnologyArgs = {
  where?: Maybe<TechnologySubscriptionWhereInput>;
};


export type SubscriptionTeamArgs = {
  where?: Maybe<TeamSubscriptionWhereInput>;
};


export type SubscriptionProjectArgs = {
  where?: Maybe<ProjectSubscriptionWhereInput>;
};


export type SubscriptionTemplateArgs = {
  where?: Maybe<TemplateSubscriptionWhereInput>;
};


export type SubscriptionResourceArgs = {
  where?: Maybe<ResourceSubscriptionWhereInput>;
};


export type SubscriptionChatMessageArgs = {
  where?: Maybe<ChatMessageSubscriptionWhereInput>;
};


export type SubscriptionUserArgs = {
  where?: Maybe<UserSubscriptionWhereInput>;
};

export interface GallerySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GallerySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GallerySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GallerySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<GalleryWhereInput>;
}

export enum MutationType {
  CREATED = 'CREATED',
  UPDATED = 'UPDATED',
  DELETED = 'DELETED'
}

export interface GallerySubscriptionPayload {
  __typename?: 'GallerySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Gallery>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<GalleryPreviousValues>;
}

export interface GalleryPreviousValues {
  __typename?: 'GalleryPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
}

export interface PlayerSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PlayerSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PlayerSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PlayerSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<PlayerWhereInput>;
}

export interface PlayerSubscriptionPayload {
  __typename?: 'PlayerSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Player>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<PlayerPreviousValues>;
}

export interface PlayerPreviousValues {
  __typename?: 'PlayerPreviousValues';
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  id: Scalars['ID'];
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Float'];
  y: Scalars['Float'];
  z: Scalars['Float'];
  dirx: Scalars['Float'];
  diry: Scalars['Float'];
}

export interface WorldSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<WorldSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<WorldSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<WorldSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<WorldWhereInput>;
}

export interface WorldSubscriptionPayload {
  __typename?: 'WorldSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<World>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<WorldPreviousValues>;
}

export interface WorldPreviousValues {
  __typename?: 'WorldPreviousValues';
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  id: Scalars['ID'];
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
}

export interface MessageSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<MessageSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<MessageSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<MessageSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<MessageWhereInput>;
}

export interface MessageSubscriptionPayload {
  __typename?: 'MessageSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Message>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<MessagePreviousValues>;
}

export interface MessagePreviousValues {
  __typename?: 'MessagePreviousValues';
  id: Scalars['ID'];
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
}

export interface NoticeSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NoticeSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NoticeSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NoticeSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<NoticeWhereInput>;
}

export interface NoticeSubscriptionPayload {
  __typename?: 'NoticeSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Notice>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<NoticePreviousValues>;
}

export interface NoticePreviousValues {
  __typename?: 'NoticePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type: NoticeType;
}

export interface ChatMessageReadedSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageReadedSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageReadedSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageReadedSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ChatMessageReadedWhereInput>;
}

export interface ChatMessageReadedSubscriptionPayload {
  __typename?: 'ChatMessageReadedSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ChatMessageReaded>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ChatMessageReadedPreviousValues>;
}

export interface ChatMessageReadedPreviousValues {
  __typename?: 'ChatMessageReadedPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
}

export interface ChatRoomSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ChatRoomWhereInput>;
}

export interface ChatRoomSubscriptionPayload {
  __typename?: 'ChatRoomSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ChatRoom>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ChatRoomPreviousValues>;
}

export interface ChatRoomPreviousValues {
  __typename?: 'ChatRoomPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface GameSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<GameWhereInput>;
}

export interface GameSubscriptionPayload {
  __typename?: 'GameSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Game>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<GamePreviousValues>;
}

export interface GamePreviousValues {
  __typename?: 'GamePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
}

export interface GameResultSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<GameResultSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<GameResultSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<GameResultSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<GameResultWhereInput>;
}

export interface GameResultSubscriptionPayload {
  __typename?: 'GameResultSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<GameResult>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<GameResultPreviousValues>;
}

export interface GameResultPreviousValues {
  __typename?: 'GameResultPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
}

export interface TournamentSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TournamentSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TournamentSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TournamentSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TournamentWhereInput>;
}

export interface TournamentSubscriptionPayload {
  __typename?: 'TournamentSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Tournament>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TournamentPreviousValues>;
}

export interface TournamentPreviousValues {
  __typename?: 'TournamentPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TournamentGroupSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TournamentGroupSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TournamentGroupSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TournamentGroupSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TournamentGroupWhereInput>;
}

export interface TournamentGroupSubscriptionPayload {
  __typename?: 'TournamentGroupSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TournamentGroup>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TournamentGroupPreviousValues>;
}

export interface TournamentGroupPreviousValues {
  __typename?: 'TournamentGroupPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TourneySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TourneyWhereInput>;
}

export interface TourneySubscriptionPayload {
  __typename?: 'TourneySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Tourney>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TourneyPreviousValues>;
}

export interface TourneyPreviousValues {
  __typename?: 'TourneyPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
}

export interface EthTransactionSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthTransactionSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthTransactionSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthTransactionSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<EthTransactionWhereInput>;
}

export interface EthTransactionSubscriptionPayload {
  __typename?: 'EthTransactionSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<EthTransaction>;
}

export interface CallRequestSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CallRequestSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CallRequestSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CallRequestSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CallRequestWhereInput>;
}

export interface CallRequestSubscriptionPayload {
  __typename?: 'CallRequestSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<CallRequest>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CallRequestPreviousValues>;
}

export interface CallRequestPreviousValues {
  __typename?: 'CallRequestPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  called_descriptions: Scalars['Json'];
  caller_descriptions: Scalars['Json'];
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
}

export interface PositionSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PositionSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PositionSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PositionSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<PositionWhereInput>;
}

export interface PositionSubscriptionPayload {
  __typename?: 'PositionSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Position>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<PositionPreviousValues>;
}

export interface PositionPreviousValues {
  __typename?: 'PositionPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
}

export interface ProjectMemberSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectMemberSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectMemberSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectMemberSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ProjectMemberWhereInput>;
}

export interface ProjectMemberSubscriptionPayload {
  __typename?: 'ProjectMemberSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ProjectMember>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ProjectMemberPreviousValues>;
}

export interface ProjectMemberPreviousValues {
  __typename?: 'ProjectMemberPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status?: Maybe<ProjectMemberStatus>;
}

export interface ServiceSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ServiceWhereInput>;
}

export interface ServiceSubscriptionPayload {
  __typename?: 'ServiceSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Service>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ServicePreviousValues>;
}

export interface ServicePreviousValues {
  __typename?: 'ServicePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface TaskSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TaskWhereInput>;
}

export interface TaskSubscriptionPayload {
  __typename?: 'TaskSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Task>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TaskPreviousValues>;
}

export interface TaskPreviousValues {
  __typename?: 'TaskPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status: TaskStatus;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskReactionSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskReactionSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskReactionSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskReactionSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TaskReactionWhereInput>;
}

export interface TaskReactionSubscriptionPayload {
  __typename?: 'TaskReactionSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TaskReaction>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TaskReactionPreviousValues>;
}

export interface TaskReactionPreviousValues {
  __typename?: 'TaskReactionPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type?: Maybe<TaskReactionType>;
}

export interface TeamMemberSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamMemberSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamMemberSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamMemberSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TeamMemberWhereInput>;
}

export interface TeamMemberSubscriptionPayload {
  __typename?: 'TeamMemberSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TeamMember>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TeamMemberPreviousValues>;
}

export interface TeamMemberPreviousValues {
  __typename?: 'TeamMemberPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status?: Maybe<TeamMemberStatus>;
}

export interface TimerSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TimerSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TimerSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TimerSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TimerWhereInput>;
}

export interface TimerSubscriptionPayload {
  __typename?: 'TimerSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Timer>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TimerPreviousValues>;
}

export interface TimerPreviousValues {
  __typename?: 'TimerPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  stopedAt?: Maybe<Scalars['DateTime']>;
}

export interface RouteSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<RouteSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<RouteSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<RouteSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<RouteWhereInput>;
}

export interface RouteSubscriptionPayload {
  __typename?: 'RouteSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Route>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<RoutePreviousValues>;
}

export interface RoutePreviousValues {
  __typename?: 'RoutePreviousValues';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact: Scalars['Boolean'];
  component: Scalars['String'];
}

export interface CodeChallengeSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CodeChallengeWhereInput>;
}

export interface CodeChallengeSubscriptionPayload {
  __typename?: 'CodeChallengeSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<CodeChallenge>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CodeChallengePreviousValues>;
}

export interface CodeChallengePreviousValues {
  __typename?: 'CodeChallengePreviousValues';
  id: Scalars['ID'];
  externalKey?: Maybe<Scalars['ID']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeBlockSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeBlockSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeBlockSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeBlockSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CodeChallengeBlockWhereInput>;
}

export interface CodeChallengeBlockSubscriptionPayload {
  __typename?: 'CodeChallengeBlockSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<CodeChallengeBlock>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CodeChallengeBlockPreviousValues>;
}

export interface CodeChallengeBlockPreviousValues {
  __typename?: 'CodeChallengeBlockPreviousValues';
  id: Scalars['ID'];
  externalKey?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CommentSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CommentSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CommentSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CommentSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CommentWhereInput>;
}

export interface CommentSubscriptionPayload {
  __typename?: 'CommentSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Comment>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CommentPreviousValues>;
}

export interface CommentPreviousValues {
  __typename?: 'CommentPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface TechnologyLessonSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyLessonSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyLessonSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyLessonSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TechnologyLessonWhereInput>;
}

export interface TechnologyLessonSubscriptionPayload {
  __typename?: 'TechnologyLessonSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TechnologyLesson>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TechnologyLessonPreviousValues>;
}

export interface TechnologyLessonPreviousValues {
  __typename?: 'TechnologyLessonPreviousValues';
  id: Scalars['ID'];
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface CareerSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CareerSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CareerSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CareerSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CareerWhereInput>;
}

export interface CareerSubscriptionPayload {
  __typename?: 'CareerSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Career>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CareerPreviousValues>;
}

export interface CareerPreviousValues {
  __typename?: 'CareerPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface TechnologyLessonUserSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologyLessonUserSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologyLessonUserSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologyLessonUserSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TechnologyLessonUserWhereInput>;
}

export interface TechnologyLessonUserSubscriptionPayload {
  __typename?: 'TechnologyLessonUserSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TechnologyLessonUser>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TechnologyLessonUserPreviousValues>;
}

export interface TechnologyLessonUserPreviousValues {
  __typename?: 'TechnologyLessonUserPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
}

export interface UserTechnologySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserTechnologySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserTechnologySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserTechnologySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<UserTechnologyWhereInput>;
}

export interface UserTechnologySubscriptionPayload {
  __typename?: 'UserTechnologySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<UserTechnology>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<UserTechnologyPreviousValues>;
}

export interface UserTechnologyPreviousValues {
  __typename?: 'UserTechnologyPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
}

export interface TaskTechnologySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskTechnologySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskTechnologySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskTechnologySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TaskTechnologyWhereInput>;
}

export interface TaskTechnologySubscriptionPayload {
  __typename?: 'TaskTechnologySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TaskTechnology>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TaskTechnologyPreviousValues>;
}

export interface TaskTechnologyPreviousValues {
  __typename?: 'TaskTechnologyPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  level?: Maybe<Scalars['Int']>;
}

export interface TechnologySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TechnologySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TechnologySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TechnologySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TechnologyWhereInput>;
}

export interface TechnologySubscriptionPayload {
  __typename?: 'TechnologySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Technology>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TechnologyPreviousValues>;
}

export interface TechnologyPreviousValues {
  __typename?: 'TechnologyPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
}

export interface TeamSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TeamSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TeamSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TeamSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TeamWhereInput>;
}

export interface TeamSubscriptionPayload {
  __typename?: 'TeamSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Team>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TeamPreviousValues>;
}

export interface TeamPreviousValues {
  __typename?: 'TeamPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  status: TeamStatus;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
}

export interface ProjectSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ProjectWhereInput>;
}

export interface ProjectSubscriptionPayload {
  __typename?: 'ProjectSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Project>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ProjectPreviousValues>;
}

export interface ProjectPreviousValues {
  __typename?: 'ProjectPreviousValues';
  id: Scalars['ID'];
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
}

export interface TemplateSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TemplateSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TemplateSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TemplateSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TemplateWhereInput>;
}

export interface TemplateSubscriptionPayload {
  __typename?: 'TemplateSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Template>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TemplatePreviousValues>;
}

export interface TemplatePreviousValues {
  __typename?: 'TemplatePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface ResourceSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ResourceWhereInput>;
}

export interface ResourceSubscriptionPayload {
  __typename?: 'ResourceSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Resource>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ResourcePreviousValues>;
}

export interface ResourcePreviousValues {
  __typename?: 'ResourcePreviousValues';
  id: Scalars['ID'];
  code?: Maybe<Scalars['ID']>;
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published: Scalars['Boolean'];
  deleted: Scalars['Boolean'];
  hidemenu: Scalars['Boolean'];
  searchable: Scalars['Boolean'];
  uri?: Maybe<Scalars['String']>;
  isfolder: Scalars['Boolean'];
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
}

export interface ChatMessageSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ChatMessageWhereInput>;
}

export interface ChatMessageSubscriptionPayload {
  __typename?: 'ChatMessageSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ChatMessage>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ChatMessagePreviousValues>;
}

export interface ChatMessagePreviousValues {
  __typename?: 'ChatMessagePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface UserSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<UserWhereInput>;
}

export interface UserSubscriptionPayload {
  __typename?: 'UserSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<User>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<UserPreviousValues>;
}

export interface UserPreviousValues {
  __typename?: 'UserPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface ImportResponse {
  __typename?: 'ImportResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Import>;
}

export interface Import extends Node {
  __typename?: 'Import';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  status: ImportStatus;
  Logs?: Maybe<Array<Log>>;
  CreatedBy?: Maybe<User>;
}


export type ImportLogsArgs = {
  where?: Maybe<LogWhereInput>;
  orderBy?: Maybe<LogOrderByInput>;
  skip?: Maybe<Scalars['Int']>;
  after?: Maybe<Scalars['String']>;
  before?: Maybe<Scalars['String']>;
  first?: Maybe<Scalars['Int']>;
  last?: Maybe<Scalars['Int']>;
};

export enum LogOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  LEVEL_ASC = 'level_ASC',
  LEVEL_DESC = 'level_DESC',
  OBJECTTYPE_ASC = 'objectType_ASC',
  OBJECTTYPE_DESC = 'objectType_DESC',
  MESSAGE_ASC = 'message_ASC',
  MESSAGE_DESC = 'message_DESC',
  STACK_ASC = 'stack_ASC',
  STACK_DESC = 'stack_DESC'
}

export interface Log extends Node {
  __typename?: 'Log';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  level: LogLevel;
  objectType?: Maybe<Scalars['ID']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
  Import?: Maybe<Import>;
}

export interface ImportDbConfig {
  host?: Maybe<Scalars['String']>;
  user?: Maybe<Scalars['String']>;
  database: Scalars['String'];
  password?: Maybe<Scalars['String']>;
  tablePrefix?: Maybe<Scalars['String']>;
}

export interface AggregateBlock {
  __typename?: 'AggregateBlock';
  count: Scalars['Int'];
}

export interface AggregateChatMessageReaded {
  __typename?: 'AggregateChatMessageReaded';
  count: Scalars['Int'];
}

export interface AggregateChatRoomInvitation {
  __typename?: 'AggregateChatRoomInvitation';
  count: Scalars['Int'];
}

export interface AggregateFile {
  __typename?: 'AggregateFile';
  count: Scalars['Int'];
}

export interface AggregateImport {
  __typename?: 'AggregateImport';
  count: Scalars['Int'];
}

export interface AggregateInventory {
  __typename?: 'AggregateInventory';
  count: Scalars['Int'];
}

export interface AggregateLetsadsSmsMessageStatus {
  __typename?: 'AggregateLetsadsSmsMessageStatus';
  count: Scalars['Int'];
}

export interface AggregateLetsadsSmsMessageStatusItem {
  __typename?: 'AggregateLetsadsSmsMessageStatusItem';
  count: Scalars['Int'];
}

export interface AggregateLetter {
  __typename?: 'AggregateLetter';
  count: Scalars['Int'];
}

export interface AggregateLog {
  __typename?: 'AggregateLog';
  count: Scalars['Int'];
}

export interface AggregateLogedIn {
  __typename?: 'AggregateLogedIn';
  count: Scalars['Int'];
}

export interface AggregateMessage {
  __typename?: 'AggregateMessage';
  count: Scalars['Int'];
}

export interface AggregatePlayer {
  __typename?: 'AggregatePlayer';
  count: Scalars['Int'];
}

export interface AggregateProjectTask {
  __typename?: 'AggregateProjectTask';
  count: Scalars['Int'];
}

export interface AggregateResetPassword {
  __typename?: 'AggregateResetPassword';
  count: Scalars['Int'];
}

export interface AggregateServiceCategory {
  __typename?: 'AggregateServiceCategory';
  count: Scalars['Int'];
}

export interface AggregateSettings {
  __typename?: 'AggregateSettings';
  count: Scalars['Int'];
}

export interface AggregateSmsMessage {
  __typename?: 'AggregateSmsMessage';
  count: Scalars['Int'];
}

export interface AggregateSmsProvider {
  __typename?: 'AggregateSmsProvider';
  count: Scalars['Int'];
}

export interface AggregateTaskMember {
  __typename?: 'AggregateTaskMember';
  count: Scalars['Int'];
}

export interface AggregateTourneyPlayer {
  __typename?: 'AggregateTourneyPlayer';
  count: Scalars['Int'];
}

export interface AggregateUserGroup {
  __typename?: 'AggregateUserGroup';
  count: Scalars['Int'];
}

/** A connection to a list of items. */
export interface BlockConnection {
  __typename?: 'BlockConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<BlockEdge>>;
  aggregate: AggregateBlock;
}

/** An edge in a connection. */
export interface BlockEdge {
  __typename?: 'BlockEdge';
  /** The item at the end of the edge. */
  node: Block;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface BlockCreateInput {
  id?: Maybe<Scalars['ID']>;
  representation: Scalars['String'];
  type: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
  world: WorldCreateOneWithoutChangedBlocksInput;
}

export interface WorldCreateOneWithoutChangedBlocksInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface BlockCreateWithoutWorldInput {
  id?: Maybe<Scalars['ID']>;
  representation: Scalars['String'];
  type: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
}

export interface BlockPreviousValues {
  __typename?: 'BlockPreviousValues';
  id: Scalars['ID'];
  representation: Scalars['String'];
  type: Scalars['Int'];
  x: Scalars['Int'];
  y: Scalars['Int'];
  z: Scalars['Int'];
}

export interface BlockSubscriptionPayload {
  __typename?: 'BlockSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Block>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<BlockPreviousValues>;
}

export interface BlockSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<BlockSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<BlockSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<BlockSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<BlockWhereInput>;
}

export interface BlockUpdateInput {
  representation?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
  world?: Maybe<WorldUpdateOneRequiredWithoutChangedBlocksInput>;
}

export interface WorldUpdateOneRequiredWithoutChangedBlocksInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface BlockUpdateManyMutationInput {
  representation?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
}

export interface BlockUpdateWithoutWorldDataInput {
  representation?: Maybe<Scalars['String']>;
  type?: Maybe<Scalars['Int']>;
  x?: Maybe<Scalars['Int']>;
  y?: Maybe<Scalars['Int']>;
  z?: Maybe<Scalars['Int']>;
}

export interface BlockUpdateWithWhereUniqueWithoutWorldInput {
  where: BlockWhereUniqueInput;
  data: BlockUpdateWithoutWorldDataInput;
}

export interface BlockUpsertWithWhereUniqueWithoutWorldInput {
  where: BlockWhereUniqueInput;
}

export interface CallRequestCreateManyWithoutRoomInput {
  connect?: Maybe<Array<CallRequestWhereUniqueInput>>;
}

export interface CallRequestCreateWithoutRoomInput {
  id?: Maybe<Scalars['ID']>;
  called_descriptions: Scalars['Json'];
  caller_descriptions: Scalars['Json'];
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called: UserCreateOneInput;
  Caller?: Maybe<UserCreateOneInput>;
}

export interface CallRequestScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CallRequestScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CallRequestScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CallRequestScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  status?: Maybe<CallRequestStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<CallRequestStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<CallRequestStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<CallRequestStatus>>;
  startedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  startedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  startedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  startedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  startedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  startedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  startedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  startedAt_gte?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  endedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  endedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  endedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  endedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  endedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  endedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  endedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestUpdateManyDataInput {
  called_descriptions?: Maybe<Scalars['Json']>;
  caller_descriptions?: Maybe<Scalars['Json']>;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestUpdateManyMutationInput {
  called_descriptions?: Maybe<Scalars['Json']>;
  caller_descriptions?: Maybe<Scalars['Json']>;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
}

export interface CallRequestUpdateManyWithoutRoomInput {
  connect?: Maybe<Array<CallRequestWhereUniqueInput>>;
  set?: Maybe<Array<CallRequestWhereUniqueInput>>;
  disconnect?: Maybe<Array<CallRequestWhereUniqueInput>>;
  updateMany?: Maybe<Array<CallRequestUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CallRequestScalarWhereInput>>;
}

export interface CallRequestUpdateManyWithWhereNestedInput {
  where: CallRequestScalarWhereInput;
  data: CallRequestUpdateManyDataInput;
}

export interface CallRequestUpdateWithoutRoomDataInput {
  called_descriptions?: Maybe<Scalars['Json']>;
  caller_descriptions?: Maybe<Scalars['Json']>;
  status?: Maybe<CallRequestStatus>;
  startedAt?: Maybe<Scalars['DateTime']>;
  endedAt?: Maybe<Scalars['DateTime']>;
  Called?: Maybe<UserUpdateOneRequiredInput>;
  Caller?: Maybe<UserUpdateOneInput>;
}

export interface CallRequestUpdateWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput;
  data: CallRequestUpdateWithoutRoomDataInput;
}

export interface CallRequestUpsertWithWhereUniqueWithoutRoomInput {
  where: CallRequestWhereUniqueInput;
}

export interface CareerCreateOneWithoutCreatedByInput {
  connect?: Maybe<CareerWhereUniqueInput>;
}

export interface CareerCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface CareerUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface CareerUpdateOneWithoutCreatedByInput {
  connect?: Maybe<CareerWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CareerUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
}

export interface ChatMessageCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
}

export interface ChatMessageCreateManyWithoutRoomInput {
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
}

export interface ChatMessageCreateOneInput {
  connect?: Maybe<ChatMessageWhereUniqueInput>;
}

export interface ChatMessageCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Room?: Maybe<ChatRoomCreateOneWithoutMessagesInput>;
  ReadedBy?: Maybe<ChatMessageReadedCreateManyWithoutMessageInput>;
}

export interface ChatMessageReadedCreateManyWithoutMessageInput {
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
}

export interface ChatMessageReadedWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface ChatMessageCreateWithoutReadedByInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneWithoutMessagesInput>;
  Room?: Maybe<ChatRoomCreateOneWithoutMessagesInput>;
}

export interface UserCreateOneWithoutMessagesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatMessageCreateWithoutRoomInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneWithoutMessagesInput>;
  ReadedBy?: Maybe<ChatMessageReadedCreateManyWithoutMessageInput>;
}

/** A connection to a list of items. */
export interface ChatMessageReadedConnection {
  __typename?: 'ChatMessageReadedConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ChatMessageReadedEdge>>;
  aggregate: AggregateChatMessageReaded;
}

/** An edge in a connection. */
export interface ChatMessageReadedEdge {
  __typename?: 'ChatMessageReadedEdge';
  /** The item at the end of the edge. */
  node: ChatMessageReaded;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface ChatMessageReadedCreateManyWithoutUserInput {
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
}

export interface ChatMessageReadedCreateWithoutMessageInput {
  id?: Maybe<Scalars['ID']>;
  User: UserCreateOneWithoutReadedMessagesInput;
}

export interface UserCreateOneWithoutReadedMessagesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatMessageReadedCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  Message: ChatMessageCreateOneWithoutReadedByInput;
}

export interface ChatMessageReadedScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageReadedScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageReadedScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageReadedScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface ChatMessageReadedUpdateInput {
  Message?: Maybe<ChatMessageUpdateOneRequiredWithoutReadedByInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutReadedMessagesInput>;
}

export interface ChatMessageUpdateOneRequiredWithoutReadedByInput {
  connect?: Maybe<ChatMessageWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutReadedMessagesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatMessageReadedUpdateManyWithoutMessageInput {
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  set?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  deleteMany?: Maybe<Array<ChatMessageReadedScalarWhereInput>>;
}

export interface ChatMessageReadedUpdateManyWithoutUserInput {
  connect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  set?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatMessageReadedWhereUniqueInput>>;
  deleteMany?: Maybe<Array<ChatMessageReadedScalarWhereInput>>;
}

export interface ChatMessageReadedUpdateWithoutMessageDataInput {
  User?: Maybe<UserUpdateOneRequiredWithoutReadedMessagesInput>;
}

export interface ChatMessageReadedUpdateWithoutUserDataInput {
  Message?: Maybe<ChatMessageUpdateOneRequiredWithoutReadedByInput>;
}

export interface ChatMessageReadedUpdateWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput;
  data: ChatMessageReadedUpdateWithoutMessageDataInput;
}

export interface ChatMessageReadedUpdateWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput;
  data: ChatMessageReadedUpdateWithoutUserDataInput;
}

export interface ChatMessageReadedUpsertWithWhereUniqueWithoutMessageInput {
  where: ChatMessageReadedWhereUniqueInput;
}

export interface ChatMessageReadedUpsertWithWhereUniqueWithoutUserInput {
  where: ChatMessageReadedWhereUniqueInput;
}

export interface ChatMessageScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatMessageScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatMessageScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatMessageScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  contentText?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  contentText_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  contentText_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  contentText_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  contentText_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  contentText_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  contentText_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  contentText_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  contentText_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  contentText_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  contentText_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  contentText_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  contentText_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  contentText_not_ends_with?: Maybe<Scalars['String']>;
}

export interface ChatMessageUpdateDataInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
  Room?: Maybe<ChatRoomUpdateOneWithoutMessagesInput>;
  ReadedBy?: Maybe<ChatMessageReadedUpdateManyWithoutMessageInput>;
}

export interface UserUpdateOneWithoutMessagesInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomUpdateOneWithoutMessagesInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageUpdateManyDataInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface ChatMessageUpdateManyMutationInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface ChatMessageUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  set?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  updateMany?: Maybe<Array<ChatMessageUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ChatMessageScalarWhereInput>>;
}

export interface ChatMessageUpdateManyWithWhereNestedInput {
  where: ChatMessageScalarWhereInput;
  data: ChatMessageUpdateManyDataInput;
}

export interface ChatMessageUpdateManyWithoutRoomInput {
  connect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  set?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatMessageWhereUniqueInput>>;
  updateMany?: Maybe<Array<ChatMessageUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ChatMessageScalarWhereInput>>;
}

export interface ChatMessageUpdateOneInput {
  connect?: Maybe<ChatMessageWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatMessageUpdateWithoutCreatedByDataInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Room?: Maybe<ChatRoomUpdateOneWithoutMessagesInput>;
  ReadedBy?: Maybe<ChatMessageReadedUpdateManyWithoutMessageInput>;
}

export interface ChatMessageUpdateWithoutReadedByDataInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
  Room?: Maybe<ChatRoomUpdateOneWithoutMessagesInput>;
}

export interface ChatMessageUpdateWithoutRoomDataInput {
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutMessagesInput>;
  ReadedBy?: Maybe<ChatMessageReadedUpdateManyWithoutMessageInput>;
}

export interface ChatMessageUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput;
  data: ChatMessageUpdateWithoutCreatedByDataInput;
}

export interface ChatMessageUpdateWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput;
  data: ChatMessageUpdateWithoutRoomDataInput;
}

export interface ChatMessageUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatMessageWhereUniqueInput;
}

export interface ChatMessageUpsertWithWhereUniqueWithoutRoomInput {
  where: ChatMessageWhereUniqueInput;
}

export interface ChatRoomCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
}

export interface ChatRoomCreateManyWithoutMembersInput {
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
}

export interface ChatRoomCreateOneWithoutInvitationsInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface ChatRoomCreateWithoutCallRequestsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

export interface UserCreateOneWithoutCreatedRoomsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ChatRoomInvitationCreateManyWithoutChatRoomInput {
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
}

export interface ChatRoomInvitationWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface TaskCreateOneWithoutChatRoomInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface ProjectCreateOneWithoutChatRoomInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ChatRoomCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

export interface ChatRoomCreateWithoutInvitationsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

export interface ChatRoomCreateWithoutMembersInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

export interface ChatRoomCreateWithoutMessagesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

export interface ChatRoomCreateWithoutProjectInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Task?: Maybe<TaskCreateOneWithoutChatRoomInput>;
}

export interface ChatRoomCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserCreateManyWithoutRoomsInput>;
  CreatedBy: UserCreateOneWithoutCreatedRoomsInput;
  Messages?: Maybe<ChatMessageCreateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationCreateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestCreateManyWithoutRoomInput>;
  Project?: Maybe<ProjectCreateOneWithoutChatRoomInput>;
}

/** A connection to a list of items. */
export interface ChatRoomInvitationConnection {
  __typename?: 'ChatRoomInvitationConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ChatRoomInvitationEdge>>;
  aggregate: AggregateChatRoomInvitation;
}

/** An edge in a connection. */
export interface ChatRoomInvitationEdge {
  __typename?: 'ChatRoomInvitationEdge';
  /** The item at the end of the edge. */
  node: ChatRoomInvitation;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface ChatRoomInvitationCreateInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  User: UserCreateOneInput;
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput;
  Notice?: Maybe<NoticeCreateOneWithoutChatRoomInvitationInput>;
}

export interface NoticeCreateOneWithoutChatRoomInvitationInput {
  connect?: Maybe<NoticeWhereUniqueInput>;
}

export interface ChatRoomInvitationCreateOneWithoutNoticeInput {
  connect?: Maybe<ChatRoomInvitationWhereUniqueInput>;
}

export interface ChatRoomInvitationCreateWithoutChatRoomInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  User: UserCreateOneInput;
  Notice?: Maybe<NoticeCreateOneWithoutChatRoomInvitationInput>;
}

export interface ChatRoomInvitationCreateWithoutNoticeInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  User: UserCreateOneInput;
  ChatRoom: ChatRoomCreateOneWithoutInvitationsInput;
}

export interface ChatRoomInvitationPreviousValues {
  __typename?: 'ChatRoomInvitationPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
}

export interface ChatRoomInvitationScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomInvitationScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomInvitationScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomInvitationScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface ChatRoomInvitationSubscriptionPayload {
  __typename?: 'ChatRoomInvitationSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ChatRoomInvitation>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ChatRoomInvitationPreviousValues>;
}

export interface ChatRoomInvitationSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomInvitationSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomInvitationSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomInvitationSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ChatRoomInvitationWhereInput>;
}

export interface ChatRoomInvitationUpdateInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  User?: Maybe<UserUpdateOneRequiredInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneRequiredWithoutInvitationsInput>;
  Notice?: Maybe<NoticeUpdateOneWithoutChatRoomInvitationInput>;
}

export interface ChatRoomUpdateOneRequiredWithoutInvitationsInput {
  connect?: Maybe<ChatRoomWhereUniqueInput>;
}

export interface NoticeUpdateOneWithoutChatRoomInvitationInput {
  connect?: Maybe<NoticeWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationUpdateManyWithoutChatRoomInput {
  connect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
  set?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatRoomInvitationWhereUniqueInput>>;
  deleteMany?: Maybe<Array<ChatRoomInvitationScalarWhereInput>>;
}

export interface ChatRoomInvitationUpdateOneWithoutNoticeInput {
  connect?: Maybe<ChatRoomInvitationWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomInvitationUpdateWithoutChatRoomDataInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  User?: Maybe<UserUpdateOneRequiredInput>;
  Notice?: Maybe<NoticeUpdateOneWithoutChatRoomInvitationInput>;
}

export interface ChatRoomInvitationUpdateWithoutNoticeDataInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  User?: Maybe<UserUpdateOneRequiredInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneRequiredWithoutInvitationsInput>;
}

export interface ChatRoomInvitationUpdateWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput;
  data: ChatRoomInvitationUpdateWithoutChatRoomDataInput;
}

export interface ChatRoomInvitationUpsertWithWhereUniqueWithoutChatRoomInput {
  where: ChatRoomInvitationWhereUniqueInput;
}

export interface ChatRoomScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ChatRoomScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ChatRoomScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ChatRoomScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  image_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  image_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  image_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  image_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  image_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  image_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  image_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  image_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  image_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  image_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  image_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  image_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  image_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPublic_not?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  allowAnonymous_not?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  sandbox_not?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  set?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  updateMany?: Maybe<Array<ChatRoomUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ChatRoomScalarWhereInput>>;
}

export interface ChatRoomUpdateManyWithWhereNestedInput {
  where: ChatRoomScalarWhereInput;
  data: ChatRoomUpdateManyDataInput;
}

export interface ChatRoomUpdateManyWithoutMembersInput {
  connect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  set?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  disconnect?: Maybe<Array<ChatRoomWhereUniqueInput>>;
  updateMany?: Maybe<Array<ChatRoomUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ChatRoomScalarWhereInput>>;
}

export interface ChatRoomUpdateWithoutCallRequestsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface UserUpdateOneRequiredWithoutCreatedRoomsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskUpdateOneWithoutChatRoomInput {
  connect?: Maybe<TaskWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectUpdateOneWithoutChatRoomInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ChatRoomUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithoutInvitationsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithoutMembersDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithoutMessagesDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithoutProjectDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Task?: Maybe<TaskUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithoutTaskDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  isPublic?: Maybe<Scalars['Boolean']>;
  allowAnonymous?: Maybe<Scalars['Boolean']>;
  sandbox?: Maybe<Scalars['Boolean']>;
  Members?: Maybe<UserUpdateManyWithoutRoomsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutCreatedRoomsInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutRoomInput>;
  Invitations?: Maybe<ChatRoomInvitationUpdateManyWithoutChatRoomInput>;
  CallRequests?: Maybe<CallRequestUpdateManyWithoutRoomInput>;
  Project?: Maybe<ProjectUpdateOneWithoutChatRoomInput>;
}

export interface ChatRoomUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput;
  data: ChatRoomUpdateWithoutCreatedByDataInput;
}

export interface ChatRoomUpdateWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput;
  data: ChatRoomUpdateWithoutMembersDataInput;
}

export interface ChatRoomUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ChatRoomWhereUniqueInput;
}

export interface ChatRoomUpsertWithWhereUniqueWithoutMembersInput {
  where: ChatRoomWhereUniqueInput;
}

export interface CodeChallengeBlockCreateInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockCreateOneWithoutChildrenInput>;
  Children?: Maybe<CodeChallengeBlockCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Challenges?: Maybe<CodeChallengeCreateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockCreateOneWithoutChildrenInput {
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
}

export interface CodeChallengeBlockCreateManyWithoutParentInput {
  connect?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
}

export interface CodeChallengeCreateManyWithoutBlockInput {
  connect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
}

export interface CodeChallengeBlockCreateOneWithoutChallengesInput {
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
}

export interface CodeChallengeBlockCreateWithoutChallengesInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockCreateOneWithoutChildrenInput>;
  Children?: Maybe<CodeChallengeBlockCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface CodeChallengeBlockCreateWithoutChildrenInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockCreateOneWithoutChildrenInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Challenges?: Maybe<CodeChallengeCreateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Children?: Maybe<CodeChallengeBlockCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Challenges?: Maybe<CodeChallengeCreateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeBlockScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeBlockScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeBlockScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['String']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeBlockUpdateInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockUpdateOneWithoutChildrenInput>;
  Children?: Maybe<CodeChallengeBlockUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Challenges?: Maybe<CodeChallengeUpdateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockUpdateOneWithoutChildrenInput {
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeBlockUpdateManyWithoutParentInput {
  connect?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
  set?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
  disconnect?: Maybe<Array<CodeChallengeBlockWhereUniqueInput>>;
  updateMany?: Maybe<Array<CodeChallengeBlockUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CodeChallengeBlockScalarWhereInput>>;
}

export interface CodeChallengeBlockUpdateManyWithWhereNestedInput {
  where: CodeChallengeBlockScalarWhereInput;
  data: CodeChallengeBlockUpdateManyDataInput;
}

export interface CodeChallengeBlockUpdateManyDataInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeUpdateManyWithoutBlockInput {
  connect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
  set?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
  disconnect?: Maybe<Array<CodeChallengeWhereUniqueInput>>;
  updateMany?: Maybe<Array<CodeChallengeUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CodeChallengeScalarWhereInput>>;
}

export interface CodeChallengeUpdateManyWithWhereNestedInput {
  where: CodeChallengeScalarWhereInput;
  data: CodeChallengeUpdateManyDataInput;
}

export interface CodeChallengeScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  externalKey_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  externalKey_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  externalKey_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  externalKey_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  externalKey_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  externalKey_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  externalKey_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  externalKey_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  externalKey_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  externalKey_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  externalKey_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  externalKey_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  externalKey_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  dashedName_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  dashedName_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  dashedName_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  dashedName_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  dashedName_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  dashedName_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  dashedName_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  dashedName_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  dashedName_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  dashedName_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  dashedName_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  dashedName_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  dashedName_not_ends_with?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  localeTitle_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  localeTitle_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  localeTitle_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  localeTitle_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  localeTitle_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  localeTitle_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  localeTitle_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  localeTitle_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  localeTitle_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  localeTitle_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  localeTitle_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  localeTitle_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  localeTitle_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  challengeType_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  challengeType_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  challengeType_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  challengeType_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  challengeType_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  challengeType_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  challengeType_gte?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  forumTopicId_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  forumTopicId_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  forumTopicId_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  forumTopicId_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  forumTopicId_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  forumTopicId_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  forumTopicId_gte?: Maybe<Scalars['Int']>;
  instructions?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  instructions_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  instructions_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  instructions_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  instructions_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  instructions_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  instructions_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  instructions_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  instructions_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  instructions_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  instructions_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  instructions_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  instructions_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  instructions_not_ends_with?: Maybe<Scalars['String']>;
  videoUrl?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  videoUrl_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  videoUrl_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  videoUrl_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  videoUrl_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  videoUrl_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  videoUrl_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  videoUrl_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  videoUrl_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  videoUrl_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  videoUrl_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  videoUrl_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  videoUrl_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  videoUrl_not_ends_with?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  order_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  order_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  order_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  order_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  order_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  order_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  order_gte?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  superOrder_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  superOrder_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  superOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  superOrder_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  superOrder_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  superOrder_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  superOrder_gte?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  challengeOrder_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  challengeOrder_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  challengeOrder_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  challengeOrder_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  challengeOrder_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  challengeOrder_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  challengeOrder_gte?: Maybe<Scalars['Int']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isRequired_not?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isPrivate_not?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  isBeta_not?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  template_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  template_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  template_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  template_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  template_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  template_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  template_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  template_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  template_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  template_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  template_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  template_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  template_not_ends_with?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  time_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  time_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  time_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  time_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  time_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  time_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  time_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  time_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  time_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  time_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  time_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  time_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  time_not_ends_with?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeUpdateManyDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeBlockUpdateManyMutationInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeBlockUpdateOneRequiredWithoutChallengesInput {
  connect?: Maybe<CodeChallengeBlockWhereUniqueInput>;
}

export interface CodeChallengeBlockUpdateWithoutChallengesDataInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockUpdateOneWithoutChildrenInput>;
  Children?: Maybe<CodeChallengeBlockUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface CodeChallengeBlockUpdateWithoutChildrenDataInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<CodeChallengeBlockUpdateOneWithoutChildrenInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Challenges?: Maybe<CodeChallengeUpdateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockUpdateWithoutParentDataInput {
  externalKey?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  Children?: Maybe<CodeChallengeBlockUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Challenges?: Maybe<CodeChallengeUpdateManyWithoutBlockInput>;
}

export interface CodeChallengeBlockUpdateWithWhereUniqueWithoutParentInput {
  where: CodeChallengeBlockWhereUniqueInput;
  data: CodeChallengeBlockUpdateWithoutParentDataInput;
}

export interface CodeChallengeBlockUpsertWithWhereUniqueWithoutParentInput {
  where: CodeChallengeBlockWhereUniqueInput;
}

export interface CodeChallengeCompletionCreateManyWithoutCodeChallengeInput {
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
}

export interface CodeChallengeCompletionCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
}

export interface CodeChallengeCompletionCreateWithoutCodeChallengeInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserCreateOneWithoutCodeChallengeCompletionsInput>;
  Task: TaskCreateOneWithoutCodeChallengeCompletionInput;
}

export interface UserCreateOneWithoutCodeChallengeCompletionsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskCreateOneWithoutCodeChallengeCompletionInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface CodeChallengeCompletionCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CodeChallenge: CodeChallengeCreateOneWithoutCompletionsInput;
  Task: TaskCreateOneWithoutCodeChallengeCompletionInput;
}

export interface CodeChallengeCompletionCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserCreateOneWithoutCodeChallengeCompletionsInput>;
  CodeChallenge: CodeChallengeCreateOneWithoutCompletionsInput;
}

export interface CodeChallengeCompletionPreviousValues {
  __typename?: 'CodeChallengeCompletionPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeCompletionScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeCompletionScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeCompletionScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  content?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  content_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  content_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  content_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  content_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  content_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  content_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  content_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  content_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  content_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  content_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  content_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  content_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  content_not_ends_with?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  success_not?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionSubscriptionPayload {
  __typename?: 'CodeChallengeCompletionSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<CodeChallengeCompletion>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<CodeChallengeCompletionPreviousValues>;
}

export interface CodeChallengeCompletionSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<CodeChallengeCompletionSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<CodeChallengeCompletionSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<CodeChallengeCompletionSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<CodeChallengeCompletionWhereInput>;
}

export interface CodeChallengeCompletionUpdateManyDataInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionUpdateManyMutationInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeCompletionUpdateManyWithoutCodeChallengeInput {
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  set?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  disconnect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  updateMany?: Maybe<Array<CodeChallengeCompletionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CodeChallengeCompletionScalarWhereInput>>;
}

export interface CodeChallengeCompletionUpdateManyWithWhereNestedInput {
  where: CodeChallengeCompletionScalarWhereInput;
  data: CodeChallengeCompletionUpdateManyDataInput;
}

export interface CodeChallengeCompletionUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  set?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  disconnect?: Maybe<Array<CodeChallengeCompletionWhereUniqueInput>>;
  updateMany?: Maybe<Array<CodeChallengeCompletionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<CodeChallengeCompletionScalarWhereInput>>;
}

export interface CodeChallengeCompletionUpdateWithoutCodeChallengeDataInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCodeChallengeCompletionsInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutCodeChallengeCompletionInput>;
}

export interface UserUpdateOneWithoutCodeChallengeCompletionsInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateOneRequiredWithoutCodeChallengeCompletionInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface CodeChallengeCompletionUpdateWithoutCreatedByDataInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneRequiredWithoutCompletionsInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutCodeChallengeCompletionInput>;
}

export interface CodeChallengeUpdateOneRequiredWithoutCompletionsInput {
  connect?: Maybe<CodeChallengeWhereUniqueInput>;
}

export interface CodeChallengeCompletionUpdateWithoutTaskDataInput {
  content?: Maybe<Scalars['String']>;
  success?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCodeChallengeCompletionsInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneRequiredWithoutCompletionsInput>;
}

export interface CodeChallengeCompletionUpdateWithWhereUniqueWithoutCodeChallengeInput {
  where: CodeChallengeCompletionWhereUniqueInput;
  data: CodeChallengeCompletionUpdateWithoutCodeChallengeDataInput;
}

export interface CodeChallengeCompletionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: CodeChallengeCompletionWhereUniqueInput;
  data: CodeChallengeCompletionUpdateWithoutCreatedByDataInput;
}

export interface CodeChallengeCompletionUpsertWithWhereUniqueWithoutCodeChallengeInput {
  where: CodeChallengeCompletionWhereUniqueInput;
}

export interface CodeChallengeCompletionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: CodeChallengeCompletionWhereUniqueInput;
}

export interface CodeChallengeCreateInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Block: CodeChallengeBlockCreateOneWithoutChallengesInput;
  Completions?: Maybe<CodeChallengeCompletionCreateManyWithoutCodeChallengeInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCodeChallengeInput>;
}

export interface ResourceCreateOneWithoutCodeChallengeInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface CodeChallengeCreateWithoutBlockInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Completions?: Maybe<CodeChallengeCompletionCreateManyWithoutCodeChallengeInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCodeChallengeInput>;
}

export interface CodeChallengeCreateWithoutCompletionsInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Block: CodeChallengeBlockCreateOneWithoutChallengesInput;
  Topic?: Maybe<ResourceCreateOneWithoutCodeChallengeInput>;
}

export interface CodeChallengeCreateWithoutTopicInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Block: CodeChallengeBlockCreateOneWithoutChallengesInput;
  Completions?: Maybe<CodeChallengeCompletionCreateManyWithoutCodeChallengeInput>;
}

export interface CodeChallengeUpdateInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Block?: Maybe<CodeChallengeBlockUpdateOneRequiredWithoutChallengesInput>;
  Completions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCodeChallengeInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCodeChallengeInput>;
}

export interface ResourceUpdateOneWithoutCodeChallengeInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface CodeChallengeUpdateManyMutationInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface CodeChallengeUpdateWithoutBlockDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Completions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCodeChallengeInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCodeChallengeInput>;
}

export interface CodeChallengeUpdateWithoutCompletionsDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Block?: Maybe<CodeChallengeBlockUpdateOneRequiredWithoutChallengesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCodeChallengeInput>;
}

export interface CodeChallengeUpdateWithoutTopicDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  dashedName?: Maybe<Scalars['String']>;
  localeTitle?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  challengeType?: Maybe<Scalars['Int']>;
  forumTopicId?: Maybe<Scalars['Int']>;
  translations?: Maybe<Scalars['Json']>;
  tests?: Maybe<Scalars['Json']>;
  solutions?: Maybe<Scalars['Json']>;
  instructions?: Maybe<Scalars['String']>;
  files?: Maybe<Scalars['Json']>;
  videoUrl?: Maybe<Scalars['String']>;
  order?: Maybe<Scalars['Int']>;
  superOrder?: Maybe<Scalars['Int']>;
  challengeOrder?: Maybe<Scalars['Int']>;
  required?: Maybe<Scalars['Json']>;
  isRequired?: Maybe<Scalars['Boolean']>;
  isPrivate?: Maybe<Scalars['Boolean']>;
  isBeta?: Maybe<Scalars['Boolean']>;
  template?: Maybe<Scalars['String']>;
  time?: Maybe<Scalars['String']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Block?: Maybe<CodeChallengeBlockUpdateOneRequiredWithoutChallengesInput>;
  Completions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCodeChallengeInput>;
}

export interface CodeChallengeUpdateWithWhereUniqueWithoutBlockInput {
  where: CodeChallengeWhereUniqueInput;
  data: CodeChallengeUpdateWithoutBlockDataInput;
}

export interface CodeChallengeUpsertWithWhereUniqueWithoutBlockInput {
  where: CodeChallengeWhereUniqueInput;
}

export interface CommentCreateWithoutTechnologyLessonInput {
  id?: Maybe<Scalars['ID']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface CommentUpdateManyMutationInput {
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface CommentUpdateWithoutTechnologyLessonDataInput {
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface CommentUpdateWithWhereUniqueWithoutTechnologyLessonInput {
  where: CommentWhereUniqueInput;
  data: CommentUpdateWithoutTechnologyLessonDataInput;
}

export interface CommentUpsertWithWhereUniqueWithoutTechnologyLessonInput {
  where: CommentWhereUniqueInput;
}

export interface EthAccountCreateManyWithoutContractSourceInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface EthAccountCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
}

export interface EthAccountCreateOneWithoutBlocksMinedInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateOneWithoutIncomeTransactionsInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateOneWithoutOutcomeTransactionsInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateOneWithoutTransactionInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateOneWithoutUserAuthedInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
}

export interface EthAccountCreateWithoutBlocksMinedInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface UserCreateOneWithoutEthAccountsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EthTransactionCreateOneWithoutAccountInput {
  connect?: Maybe<EthTransactionWhereUniqueInput>;
}

export interface EthTransactionCreateManyWithoutReceiverInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthTransactionCreateManyWithoutSenderInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface UserCreateOneWithoutEthAccountAuthedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ProjectCreateOneWithoutEthAccountsInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface ResourceCreateManyWithoutEthAccountInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface EthAccountCreateWithoutContractSourceInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthBlockCreateManyWithoutMinerInput {
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
}

export interface EthAccountCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountCreateWithoutIncomeTransactionsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountCreateWithoutOutcomeTransactionsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountCreateWithoutProjectInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountCreateWithoutResourcesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
}

export interface EthAccountCreateWithoutTransactionInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserCreateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountCreateWithoutUserAuthedInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserCreateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionCreateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionCreateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionCreateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceCreateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockCreateManyWithoutMinerInput>;
  Project?: Maybe<ProjectCreateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceCreateManyWithoutEthAccountInput>;
}

export interface EthAccountPreviousValues {
  __typename?: 'EthAccountPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address: Scalars['String'];
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
}

export interface EthAccountSubscriptionPayload {
  __typename?: 'EthAccountSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<EthAccount>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<EthAccountPreviousValues>;
}

export interface EthAccountSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthAccountSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthAccountSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthAccountSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<EthAccountWhereInput>;
}

export interface EthAccountUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
}

export interface EthAccountUpdateManyWithoutContractSourceInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  set?: Maybe<Array<EthAccountWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthAccountUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthAccountScalarWhereInput>>;
}

export interface EthAccountUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  set?: Maybe<Array<EthAccountWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthAccountWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthAccountUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthAccountScalarWhereInput>>;
}

export interface EthAccountUpdateOneWithoutBlocksMinedInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateOneWithoutIncomeTransactionsInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateOneWithoutOutcomeTransactionsInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateOneWithoutTransactionInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateOneWithoutUserAuthedInput {
  connect?: Maybe<EthAccountWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthAccountUpdateWithoutBlocksMinedDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface UserUpdateOneWithoutEthAccountsInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionUpdateOneWithoutAccountInput {
  connect?: Maybe<EthTransactionWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthTransactionUpdateManyWithoutReceiverInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  set?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthTransactionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthTransactionScalarWhereInput>>;
}

export interface EthTransactionUpdateManyWithWhereNestedInput {
  where: EthTransactionScalarWhereInput;
  data: EthTransactionUpdateManyDataInput;
}

export interface EthTransactionScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthTransactionScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthTransactionScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthTransactionScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  chainId?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  chainId_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  chainId_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  chainId_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  chainId_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  chainId_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  chainId_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  chainId_gte?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  amount_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  amount_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  amount_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  amount_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  amount_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  amount_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  amount_gte?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  input_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  input_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  input_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  input_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  input_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  input_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  input_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  input_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  input_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  input_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  input_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  input_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  input_not_ends_with?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  index_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  index_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  index_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  index_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  index_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  index_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  index_gte?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  address_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  address_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  address_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  address_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  address_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  address_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  address_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  address_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  address_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  address_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  address_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  address_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  address_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<EthTransactionType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<EthTransactionType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<EthTransactionType>>;
  v?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  v_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  v_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  v_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  v_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  v_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  v_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  v_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  v_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  v_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  v_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  v_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  v_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  v_not_ends_with?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  r_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  r_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  r_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  r_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  r_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  r_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  r_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  r_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  r_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  r_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  r_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  r_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  r_not_ends_with?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  s_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  s_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  s_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  s_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  s_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  s_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  s_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  s_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  s_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  s_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  s_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  s_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  s_not_ends_with?: Maybe<Scalars['String']>;
}

export interface EthTransactionUpdateManyDataInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
}

export interface EthTransactionUpdateManyWithoutSenderInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  set?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthTransactionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthTransactionScalarWhereInput>>;
}

export interface UserUpdateOneWithoutEthAccountAuthedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ProjectUpdateOneWithoutEthAccountsInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ResourceUpdateManyWithoutEthAccountInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface EthAccountUpdateWithoutContractSourceDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthBlockUpdateManyWithoutMinerInput {
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
  set?: Maybe<Array<EthBlockWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthBlockWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthBlockUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthBlockScalarWhereInput>>;
}

export interface EthBlockUpdateManyWithWhereNestedInput {
  where: EthBlockScalarWhereInput;
  data: EthBlockUpdateManyDataInput;
}

export interface EthBlockScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthBlockScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthBlockScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthBlockScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  hash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  hash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  hash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  hash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  hash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  hash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  hash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  hash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  hash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  hash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  hash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  hash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  hash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  hash_not_ends_with?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  number_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  number_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  number_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  number_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  number_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  number_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  number_gte?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  difficulty_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  difficulty_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  difficulty_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  difficulty_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  difficulty_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  difficulty_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  difficulty_gte?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  totalDifficulty_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  totalDifficulty_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  totalDifficulty_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  totalDifficulty_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  totalDifficulty_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  totalDifficulty_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  totalDifficulty_gte?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  extraData_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  extraData_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  extraData_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  extraData_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  extraData_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  extraData_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  extraData_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  extraData_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  extraData_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  extraData_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  extraData_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  extraData_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  extraData_not_ends_with?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  gasLimit_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  gasLimit_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  gasLimit_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  gasLimit_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  gasLimit_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  gasLimit_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  gasLimit_gte?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  gasUsed_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  gasUsed_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  gasUsed_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  gasUsed_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  gasUsed_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  gasUsed_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  gasUsed_gte?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  mixHash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  mixHash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  mixHash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  mixHash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  mixHash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  mixHash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  mixHash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  mixHash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  mixHash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  mixHash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  mixHash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  mixHash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  mixHash_not_ends_with?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  nonce_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  nonce_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  nonce_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  nonce_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  nonce_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  nonce_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  nonce_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  nonce_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  nonce_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  nonce_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  nonce_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  nonce_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  nonce_not_ends_with?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  parentHash_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  parentHash_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  parentHash_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  parentHash_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  parentHash_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  parentHash_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  parentHash_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  parentHash_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  parentHash_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  parentHash_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  parentHash_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  parentHash_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  parentHash_not_ends_with?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  receiptsRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  receiptsRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  receiptsRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  receiptsRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  receiptsRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  receiptsRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  receiptsRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  receiptsRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  receiptsRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  receiptsRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  receiptsRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  receiptsRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  receiptsRoot_not_ends_with?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  sha3Uncles_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  sha3Uncles_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  sha3Uncles_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  sha3Uncles_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  sha3Uncles_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  sha3Uncles_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  sha3Uncles_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  sha3Uncles_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  sha3Uncles_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  sha3Uncles_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  sha3Uncles_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  sha3Uncles_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  sha3Uncles_not_ends_with?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  size_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  size_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  size_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  size_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  size_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  size_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  size_gte?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  stateRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stateRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  stateRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  stateRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  stateRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  stateRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  stateRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  stateRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  stateRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  stateRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  stateRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  stateRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  stateRoot_not_ends_with?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  date_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  date_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  date_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  date_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  date_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  date_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  date_gte?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  transactionsRoot_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  transactionsRoot_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  transactionsRoot_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  transactionsRoot_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  transactionsRoot_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  transactionsRoot_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  transactionsRoot_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  transactionsRoot_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  transactionsRoot_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  transactionsRoot_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  transactionsRoot_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  transactionsRoot_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  transactionsRoot_not_ends_with?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  transactions_count_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  transactions_count_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  transactions_count_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  transactions_count_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  transactions_count_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  transactions_count_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  transactions_count_gte?: Maybe<Scalars['Int']>;
}

export interface EthBlockUpdateManyDataInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
}

export interface EthAccountUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithoutIncomeTransactionsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithoutOutcomeTransactionsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithoutProjectDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithoutResourcesDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
}

export interface EthAccountUpdateWithoutTransactionDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  UserAuthed?: Maybe<UserUpdateOneWithoutEthAccountAuthedInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithoutUserAuthedDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthAccountType>;
  source?: Maybe<Scalars['String']>;
  bytecode?: Maybe<Scalars['String']>;
  abi?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutEthAccountsInput>;
  Transaction?: Maybe<EthTransactionUpdateOneWithoutAccountInput>;
  IncomeTransactions?: Maybe<EthTransactionUpdateManyWithoutReceiverInput>;
  OutcomeTransactions?: Maybe<EthTransactionUpdateManyWithoutSenderInput>;
  ContractSource?: Maybe<EthContractSourceUpdateOneWithoutAccountsInput>;
  BlocksMined?: Maybe<EthBlockUpdateManyWithoutMinerInput>;
  Project?: Maybe<ProjectUpdateOneWithoutEthAccountsInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutEthAccountInput>;
}

export interface EthAccountUpdateWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput;
  data: EthAccountUpdateWithoutContractSourceDataInput;
}

export interface EthAccountUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput;
  data: EthAccountUpdateWithoutCreatedByDataInput;
}

export interface EthAccountUpdateWithWhereUniqueWithoutProjectInput {
  where: EthAccountWhereUniqueInput;
  data: EthAccountUpdateWithoutProjectDataInput;
}

export interface EthAccountUpsertWithWhereUniqueWithoutContractSourceInput {
  where: EthAccountWhereUniqueInput;
}

export interface EthAccountUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EthAccountWhereUniqueInput;
}

export interface EthAccountUpsertWithWhereUniqueWithoutProjectInput {
  where: EthAccountWhereUniqueInput;
}

export interface EthBlockCreateInput {
  id?: Maybe<Scalars['ID']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountCreateOneWithoutBlocksMinedInput>;
  Transactions?: Maybe<EthTransactionCreateManyWithoutBlockInput>;
  Uncles?: Maybe<EthBlockCreateManyInput>;
}

export interface EthTransactionCreateManyWithoutBlockInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
}

export interface EthBlockCreateManyInput {
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
}

export interface EthBlockCreateOneWithoutTransactionsInput {
  connect?: Maybe<EthBlockWhereUniqueInput>;
}

export interface EthBlockCreateWithoutMinerInput {
  id?: Maybe<Scalars['ID']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Transactions?: Maybe<EthTransactionCreateManyWithoutBlockInput>;
  Uncles?: Maybe<EthBlockCreateManyInput>;
}

export interface EthBlockCreateWithoutTransactionsInput {
  id?: Maybe<Scalars['ID']>;
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountCreateOneWithoutBlocksMinedInput>;
  Uncles?: Maybe<EthBlockCreateManyInput>;
}

export interface EthBlockPreviousValues {
  __typename?: 'EthBlockPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  hash: Scalars['String'];
  number: Scalars['Int'];
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
}

export interface EthBlockSubscriptionPayload {
  __typename?: 'EthBlockSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<EthBlock>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<EthBlockPreviousValues>;
}

export interface EthBlockSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthBlockSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthBlockSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthBlockSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<EthBlockWhereInput>;
}

export interface EthBlockUpdateDataInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountUpdateOneWithoutBlocksMinedInput>;
  Transactions?: Maybe<EthTransactionUpdateManyWithoutBlockInput>;
  Uncles?: Maybe<EthBlockUpdateManyInput>;
}

export interface EthTransactionUpdateManyWithoutBlockInput {
  connect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  set?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthTransactionWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthTransactionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthTransactionScalarWhereInput>>;
}

export interface EthBlockUpdateManyInput {
  connect?: Maybe<Array<EthBlockWhereUniqueInput>>;
  set?: Maybe<Array<EthBlockWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthBlockWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthBlockUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthBlockScalarWhereInput>>;
}

export interface EthBlockUpdateInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountUpdateOneWithoutBlocksMinedInput>;
  Transactions?: Maybe<EthTransactionUpdateManyWithoutBlockInput>;
  Uncles?: Maybe<EthBlockUpdateManyInput>;
}

export interface EthBlockUpdateManyMutationInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
}

export interface EthBlockUpdateOneWithoutTransactionsInput {
  connect?: Maybe<EthBlockWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface EthBlockUpdateWithoutMinerDataInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Transactions?: Maybe<EthTransactionUpdateManyWithoutBlockInput>;
  Uncles?: Maybe<EthBlockUpdateManyInput>;
}

export interface EthBlockUpdateWithoutTransactionsDataInput {
  hash?: Maybe<Scalars['String']>;
  number?: Maybe<Scalars['Int']>;
  difficulty?: Maybe<Scalars['Float']>;
  totalDifficulty?: Maybe<Scalars['Float']>;
  extraData?: Maybe<Scalars['String']>;
  gasLimit?: Maybe<Scalars['Float']>;
  gasUsed?: Maybe<Scalars['Float']>;
  mixHash?: Maybe<Scalars['String']>;
  nonce?: Maybe<Scalars['String']>;
  parentHash?: Maybe<Scalars['String']>;
  receiptsRoot?: Maybe<Scalars['String']>;
  sha3Uncles?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Int']>;
  stateRoot?: Maybe<Scalars['String']>;
  date?: Maybe<Scalars['DateTime']>;
  transactionsRoot?: Maybe<Scalars['String']>;
  transactions_count?: Maybe<Scalars['Int']>;
  Miner?: Maybe<EthAccountUpdateOneWithoutBlocksMinedInput>;
  Uncles?: Maybe<EthBlockUpdateManyInput>;
}

export interface EthBlockUpdateWithWhereUniqueNestedInput {
  where: EthBlockWhereUniqueInput;
  data: EthBlockUpdateDataInput;
}

export interface EthBlockUpdateWithWhereUniqueWithoutMinerInput {
  where: EthBlockWhereUniqueInput;
  data: EthBlockUpdateWithoutMinerDataInput;
}

export interface EthBlockUpsertWithWhereUniqueNestedInput {
  where: EthBlockWhereUniqueInput;
}

export interface EthBlockUpsertWithWhereUniqueWithoutMinerInput {
  where: EthBlockWhereUniqueInput;
}

export interface EthContractSourceCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<EthContractSourceWhereUniqueInput>>;
}

export interface EthContractSourceCreateWithoutAccountsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  CreatedBy: UserCreateOneWithoutEthContractSourcesCreatedInput;
}

export interface UserCreateOneWithoutEthContractSourcesCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EthContractSourceCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  Accounts?: Maybe<EthAccountCreateManyWithoutContractSourceInput>;
}

export interface EthContractSourcePreviousValues {
  __typename?: 'EthContractSourcePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
}

export interface EthContractSourceScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthContractSourceScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthContractSourceScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthContractSourceScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  source?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  source_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  source_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  source_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  source_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  source_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  source_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  source_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  source_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  source_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  source_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  source_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  source_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  source_not_ends_with?: Maybe<Scalars['String']>;
}

export interface EthContractSourceSubscriptionPayload {
  __typename?: 'EthContractSourceSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<EthContractSource>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<EthContractSourcePreviousValues>;
}

export interface EthContractSourceSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<EthContractSourceSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<EthContractSourceSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<EthContractSourceSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<EthContractSourceWhereInput>;
}

export interface EthContractSourceUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
}

export interface EthContractSourceUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
}

export interface EthContractSourceUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<EthContractSourceWhereUniqueInput>>;
  set?: Maybe<Array<EthContractSourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<EthContractSourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<EthContractSourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<EthContractSourceScalarWhereInput>>;
}

export interface EthContractSourceUpdateManyWithWhereNestedInput {
  where: EthContractSourceScalarWhereInput;
  data: EthContractSourceUpdateManyDataInput;
}

export interface EthContractSourceUpdateWithoutAccountsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutEthContractSourcesCreatedInput>;
}

export interface UserUpdateOneRequiredWithoutEthContractSourcesCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface EthContractSourceUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['Json']>;
  source?: Maybe<Scalars['String']>;
  Accounts?: Maybe<EthAccountUpdateManyWithoutContractSourceInput>;
}

export interface EthContractSourceUpdateWithWhereUniqueWithoutCreatedByInput {
  where: EthContractSourceWhereUniqueInput;
  data: EthContractSourceUpdateWithoutCreatedByDataInput;
}

export interface EthContractSourceUpsertWithWhereUniqueWithoutCreatedByInput {
  where: EthContractSourceWhereUniqueInput;
}

export interface EthTransactionCreateWithoutAccountInput {
  id?: Maybe<Scalars['ID']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountCreateOneWithoutOutcomeTransactionsInput>;
  Receiver?: Maybe<EthAccountCreateOneWithoutIncomeTransactionsInput>;
  Block?: Maybe<EthBlockCreateOneWithoutTransactionsInput>;
}

export interface EthTransactionCreateWithoutBlockInput {
  id?: Maybe<Scalars['ID']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountCreateOneWithoutOutcomeTransactionsInput>;
  Receiver?: Maybe<EthAccountCreateOneWithoutIncomeTransactionsInput>;
  Account?: Maybe<EthAccountCreateOneWithoutTransactionInput>;
}

export interface EthTransactionCreateWithoutReceiverInput {
  id?: Maybe<Scalars['ID']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountCreateOneWithoutOutcomeTransactionsInput>;
  Account?: Maybe<EthAccountCreateOneWithoutTransactionInput>;
  Block?: Maybe<EthBlockCreateOneWithoutTransactionsInput>;
}

export interface EthTransactionCreateWithoutSenderInput {
  id?: Maybe<Scalars['ID']>;
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Receiver?: Maybe<EthAccountCreateOneWithoutIncomeTransactionsInput>;
  Account?: Maybe<EthAccountCreateOneWithoutTransactionInput>;
  Block?: Maybe<EthBlockCreateOneWithoutTransactionsInput>;
}

export interface EthTransactionPreviousValues {
  __typename?: 'EthTransactionPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  chainId: Scalars['Int'];
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address: Scalars['String'];
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
}

export interface EthTransactionUpdateInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountUpdateOneWithoutOutcomeTransactionsInput>;
  Receiver?: Maybe<EthAccountUpdateOneWithoutIncomeTransactionsInput>;
  Account?: Maybe<EthAccountUpdateOneWithoutTransactionInput>;
  Block?: Maybe<EthBlockUpdateOneWithoutTransactionsInput>;
}

export interface EthTransactionUpdateManyMutationInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
}

export interface EthTransactionUpdateWithoutAccountDataInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountUpdateOneWithoutOutcomeTransactionsInput>;
  Receiver?: Maybe<EthAccountUpdateOneWithoutIncomeTransactionsInput>;
  Block?: Maybe<EthBlockUpdateOneWithoutTransactionsInput>;
}

export interface EthTransactionUpdateWithoutBlockDataInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountUpdateOneWithoutOutcomeTransactionsInput>;
  Receiver?: Maybe<EthAccountUpdateOneWithoutIncomeTransactionsInput>;
  Account?: Maybe<EthAccountUpdateOneWithoutTransactionInput>;
}

export interface EthTransactionUpdateWithoutReceiverDataInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Sender?: Maybe<EthAccountUpdateOneWithoutOutcomeTransactionsInput>;
  Account?: Maybe<EthAccountUpdateOneWithoutTransactionInput>;
  Block?: Maybe<EthBlockUpdateOneWithoutTransactionsInput>;
}

export interface EthTransactionUpdateWithoutSenderDataInput {
  chainId?: Maybe<Scalars['Int']>;
  amount?: Maybe<Scalars['Float']>;
  input?: Maybe<Scalars['String']>;
  index?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  type?: Maybe<EthTransactionType>;
  v?: Maybe<Scalars['String']>;
  r?: Maybe<Scalars['String']>;
  s?: Maybe<Scalars['String']>;
  Receiver?: Maybe<EthAccountUpdateOneWithoutIncomeTransactionsInput>;
  Account?: Maybe<EthAccountUpdateOneWithoutTransactionInput>;
  Block?: Maybe<EthBlockUpdateOneWithoutTransactionsInput>;
}

export interface EthTransactionUpdateWithWhereUniqueWithoutBlockInput {
  where: EthTransactionWhereUniqueInput;
  data: EthTransactionUpdateWithoutBlockDataInput;
}

export interface EthTransactionUpdateWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput;
  data: EthTransactionUpdateWithoutReceiverDataInput;
}

export interface EthTransactionUpdateWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput;
  data: EthTransactionUpdateWithoutSenderDataInput;
}

export interface EthTransactionUpsertWithWhereUniqueWithoutBlockInput {
  where: EthTransactionWhereUniqueInput;
}

export interface EthTransactionUpsertWithWhereUniqueWithoutReceiverInput {
  where: EthTransactionWhereUniqueInput;
}

export interface EthTransactionUpsertWithWhereUniqueWithoutSenderInput {
  where: EthTransactionWhereUniqueInput;
}

/** A connection to a list of items. */
export interface FileConnection {
  __typename?: 'FileConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<FileEdge>>;
  aggregate: AggregateFile;
}

/** An edge in a connection. */
export interface FileEdge {
  __typename?: 'FileEdge';
  /** The item at the end of the edge. */
  node: File;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface FileCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<FileWhereUniqueInput>>;
}

export interface FileCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryCreateOneWithoutFilesInput>;
  ImageResource?: Maybe<ResourceCreateOneWithoutImageInput>;
}

export interface FileCreateWithoutGalleryInput {
  id?: Maybe<Scalars['ID']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy: UserCreateOneWithoutFilesInput;
  ImageResource?: Maybe<ResourceCreateOneWithoutImageInput>;
}

export interface FileCreateWithoutImageResourceInput {
  id?: Maybe<Scalars['ID']>;
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryCreateOneWithoutFilesInput>;
  CreatedBy: UserCreateOneWithoutFilesInput;
}

export interface FilePreviousValues {
  __typename?: 'FilePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  path: Scalars['String'];
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype: Scalars['String'];
  encoding: Scalars['String'];
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface FileSubscriptionPayload {
  __typename?: 'FileSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<File>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<FilePreviousValues>;
}

export interface FileSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<FileSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<FileSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<FileSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<FileWhereInput>;
}

export interface FileUpdateDataInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryUpdateOneWithoutFilesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutFilesInput>;
  ImageResource?: Maybe<ResourceUpdateOneWithoutImageInput>;
}

export interface FileUpdateManyMutationInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface FileUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<FileWhereUniqueInput>>;
  set?: Maybe<Array<FileWhereUniqueInput>>;
  disconnect?: Maybe<Array<FileWhereUniqueInput>>;
  updateMany?: Maybe<Array<FileUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<FileScalarWhereInput>>;
}

export interface FileUpdateWithoutCreatedByDataInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryUpdateOneWithoutFilesInput>;
  ImageResource?: Maybe<ResourceUpdateOneWithoutImageInput>;
}

export interface FileUpdateWithoutGalleryDataInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutFilesInput>;
  ImageResource?: Maybe<ResourceUpdateOneWithoutImageInput>;
}

export interface FileUpdateWithoutImageResourceDataInput {
  path?: Maybe<Scalars['String']>;
  name?: Maybe<Scalars['String']>;
  filename?: Maybe<Scalars['String']>;
  mimetype?: Maybe<Scalars['String']>;
  encoding?: Maybe<Scalars['String']>;
  hash?: Maybe<Scalars['String']>;
  size?: Maybe<Scalars['Float']>;
  rank?: Maybe<Scalars['Int']>;
  Gallery?: Maybe<GalleryUpdateOneWithoutFilesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutFilesInput>;
}

export interface FileUpdateWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutCreatedByDataInput;
}

export interface FileUpdateWithWhereUniqueWithoutGalleryInput {
  where: FileWhereUniqueInput;
  data: FileUpdateWithoutGalleryDataInput;
}

export interface FileUpsertWithWhereUniqueWithoutCreatedByInput {
  where: FileWhereUniqueInput;
}

export interface FileUpsertWithWhereUniqueWithoutGalleryInput {
  where: FileWhereUniqueInput;
}

export interface GalleryCreateWithoutFilesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutGalleriesInput>;
}

export interface GalleryCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  Files?: Maybe<FileCreateManyWithoutGalleryInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface GalleryUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
}

export interface GalleryUpdateWithoutFilesDataInput {
  name?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutGalleriesInput>;
}

export interface GalleryUpdateWithoutResourceDataInput {
  name?: Maybe<Scalars['String']>;
  Files?: Maybe<FileUpdateManyWithoutGalleryInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface GalleryUpdateWithWhereUniqueWithoutResourceInput {
  where: GalleryWhereUniqueInput;
  data: GalleryUpdateWithoutResourceDataInput;
}

export interface GalleryUpsertWithWhereUniqueWithoutResourceInput {
  where: GalleryWhereUniqueInput;
}

export interface GameCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourney?: Maybe<TourneyCreateOneWithoutGamesInput>;
  Users?: Maybe<UserCreateManyInput>;
  Teams?: Maybe<TeamCreateManyInput>;
  Parent?: Maybe<GameCreateOneWithoutChildsInput>;
  Results?: Maybe<GameResultCreateManyWithoutGameInput>;
}

export interface GameCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourney?: Maybe<TourneyCreateOneWithoutGamesInput>;
  Users?: Maybe<UserCreateManyInput>;
  Teams?: Maybe<TeamCreateManyInput>;
  Childs?: Maybe<GameCreateManyWithoutParentInput>;
  Results?: Maybe<GameResultCreateManyWithoutGameInput>;
}

export interface GameCreateWithoutResultsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourney?: Maybe<TourneyCreateOneWithoutGamesInput>;
  Users?: Maybe<UserCreateManyInput>;
  Teams?: Maybe<TeamCreateManyInput>;
  Parent?: Maybe<GameCreateOneWithoutChildsInput>;
  Childs?: Maybe<GameCreateManyWithoutParentInput>;
}

export interface GameCreateWithoutTourneyInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Users?: Maybe<UserCreateManyInput>;
  Teams?: Maybe<TeamCreateManyInput>;
  Parent?: Maybe<GameCreateOneWithoutChildsInput>;
  Childs?: Maybe<GameCreateManyWithoutParentInput>;
  Results?: Maybe<GameResultCreateManyWithoutGameInput>;
}

export interface GameResultCreateWithoutGameInput {
  id?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  User?: Maybe<UserCreateOneInput>;
  Team?: Maybe<TeamCreateOneInput>;
}

export interface GameResultUpdateManyMutationInput {
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
}

export interface GameResultUpdateWithoutGameDataInput {
  date?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  value?: Maybe<Scalars['Float']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  User?: Maybe<UserUpdateOneInput>;
  Team?: Maybe<TeamUpdateOneInput>;
}

export interface GameResultUpdateWithWhereUniqueWithoutGameInput {
  where: GameResultWhereUniqueInput;
  data: GameResultUpdateWithoutGameDataInput;
}

export interface GameResultUpsertWithWhereUniqueWithoutGameInput {
  where: GameResultWhereUniqueInput;
}

export interface GameUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
}

export interface GameUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourney?: Maybe<TourneyUpdateOneWithoutGamesInput>;
  Users?: Maybe<UserUpdateManyInput>;
  Teams?: Maybe<TeamUpdateManyInput>;
  Parent?: Maybe<GameUpdateOneWithoutChildsInput>;
  Results?: Maybe<GameResultUpdateManyWithoutGameInput>;
}

export interface GameUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourney?: Maybe<TourneyUpdateOneWithoutGamesInput>;
  Users?: Maybe<UserUpdateManyInput>;
  Teams?: Maybe<TeamUpdateManyInput>;
  Childs?: Maybe<GameUpdateManyWithoutParentInput>;
  Results?: Maybe<GameResultUpdateManyWithoutGameInput>;
}

export interface GameUpdateWithoutResultsDataInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourney?: Maybe<TourneyUpdateOneWithoutGamesInput>;
  Users?: Maybe<UserUpdateManyInput>;
  Teams?: Maybe<TeamUpdateManyInput>;
  Parent?: Maybe<GameUpdateOneWithoutChildsInput>;
  Childs?: Maybe<GameUpdateManyWithoutParentInput>;
}

export interface GameUpdateWithoutTourneyDataInput {
  name?: Maybe<Scalars['String']>;
  start_date?: Maybe<Scalars['DateTime']>;
  end_date?: Maybe<Scalars['DateTime']>;
  sequence?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Users?: Maybe<UserUpdateManyInput>;
  Teams?: Maybe<TeamUpdateManyInput>;
  Parent?: Maybe<GameUpdateOneWithoutChildsInput>;
  Childs?: Maybe<GameUpdateManyWithoutParentInput>;
  Results?: Maybe<GameResultUpdateManyWithoutGameInput>;
}

export interface GameUpdateWithWhereUniqueWithoutParentInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutParentDataInput;
}

export interface GameUpdateWithWhereUniqueWithoutTourneyInput {
  where: GameWhereUniqueInput;
  data: GameUpdateWithoutTourneyDataInput;
}

export interface GameUpsertWithWhereUniqueWithoutParentInput {
  where: GameWhereUniqueInput;
}

export interface GameUpsertWithWhereUniqueWithoutTourneyInput {
  where: GameWhereUniqueInput;
}

/** A connection to a list of items. */
export interface ImportConnection {
  __typename?: 'ImportConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ImportEdge>>;
  aggregate: AggregateImport;
}

/** An edge in a connection. */
export interface ImportEdge {
  __typename?: 'ImportEdge';
  /** The item at the end of the edge. */
  node: Import;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface ImportCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<ImportStatus>;
  Logs?: Maybe<LogCreateManyWithoutImportInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutImportsInput>;
}

export interface LogCreateManyWithoutImportInput {
  connect?: Maybe<Array<LogWhereUniqueInput>>;
}

export interface LogWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface UserCreateOneWithoutImportsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ImportCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ImportWhereUniqueInput>>;
}

export interface ImportWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface ImportCreateOneWithoutLogsInput {
  connect?: Maybe<ImportWhereUniqueInput>;
}

export interface ImportCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<ImportStatus>;
  Logs?: Maybe<LogCreateManyWithoutImportInput>;
}

export interface ImportCreateWithoutLogsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<ImportStatus>;
  CreatedBy?: Maybe<UserCreateOneWithoutImportsInput>;
}

export enum ImportOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC'
}

export interface ImportPreviousValues {
  __typename?: 'ImportPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  status: ImportStatus;
}

export interface ImportScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ImportScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ImportScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ImportScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<ImportStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<ImportStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<ImportStatus>>;
}

export interface ImportSubscriptionPayload {
  __typename?: 'ImportSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Import>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ImportPreviousValues>;
}

export interface ImportSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ImportSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ImportSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ImportSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ImportWhereInput>;
}

export interface ImportUpdateInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
  Logs?: Maybe<LogUpdateManyWithoutImportInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutImportsInput>;
}

export interface LogUpdateManyWithoutImportInput {
  connect?: Maybe<Array<LogWhereUniqueInput>>;
  set?: Maybe<Array<LogWhereUniqueInput>>;
  disconnect?: Maybe<Array<LogWhereUniqueInput>>;
  updateMany?: Maybe<Array<LogUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<LogScalarWhereInput>>;
}

export interface LogUpdateManyWithWhereNestedInput {
  where: LogScalarWhereInput;
  data: LogUpdateManyDataInput;
}

export interface LogScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  level?: Maybe<LogLevel>;
  /** All values that are not equal to given value. */
  level_not?: Maybe<LogLevel>;
  /** All values that are contained in given list. */
  level_in?: Maybe<Array<LogLevel>>;
  /** All values that are not contained in given list. */
  level_not_in?: Maybe<Array<LogLevel>>;
  objectType?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  objectType_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  objectType_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  objectType_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  objectType_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  objectType_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  objectType_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  objectType_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  objectType_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  objectType_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  objectType_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  objectType_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  objectType_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  objectType_not_ends_with?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  stack_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  stack_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  stack_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  stack_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  stack_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  stack_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  stack_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  stack_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  stack_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  stack_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  stack_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  stack_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  stack_not_ends_with?: Maybe<Scalars['String']>;
}

export interface LogUpdateManyDataInput {
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
}

export interface UserUpdateOneWithoutImportsInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ImportUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
}

export interface ImportUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
}

export interface ImportUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ImportWhereUniqueInput>>;
  set?: Maybe<Array<ImportWhereUniqueInput>>;
  disconnect?: Maybe<Array<ImportWhereUniqueInput>>;
  updateMany?: Maybe<Array<ImportUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ImportScalarWhereInput>>;
}

export interface ImportUpdateManyWithWhereNestedInput {
  where: ImportScalarWhereInput;
  data: ImportUpdateManyDataInput;
}

export interface ImportUpdateOneWithoutLogsInput {
  connect?: Maybe<ImportWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ImportUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
  Logs?: Maybe<LogUpdateManyWithoutImportInput>;
}

export interface ImportUpdateWithoutLogsDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<ImportStatus>;
  CreatedBy?: Maybe<UserUpdateOneWithoutImportsInput>;
}

export interface ImportUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ImportWhereUniqueInput;
  data: ImportUpdateWithoutCreatedByDataInput;
}

export interface ImportUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ImportWhereUniqueInput;
}

/** A connection to a list of items. */
export interface InventoryConnection {
  __typename?: 'InventoryConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<InventoryEdge>>;
  aggregate: AggregateInventory;
}

/** An edge in a connection. */
export interface InventoryEdge {
  __typename?: 'InventoryEdge';
  /** The item at the end of the edge. */
  node: Inventory;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface InventoryCreateInput {
  id?: Maybe<Scalars['ID']>;
  cursor: Scalars['Int'];
  data: Scalars['String'];
  player?: Maybe<PlayerCreateOneWithoutInventoryInput>;
}

export interface PlayerCreateOneWithoutInventoryInput {
  connect?: Maybe<PlayerWhereUniqueInput>;
}

export interface InventoryCreateOneWithoutPlayerInput {
  connect?: Maybe<InventoryWhereUniqueInput>;
}

export interface InventoryCreateWithoutPlayerInput {
  id?: Maybe<Scalars['ID']>;
  cursor: Scalars['Int'];
  data: Scalars['String'];
}

export enum InventoryOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CURSOR_ASC = 'cursor_ASC',
  CURSOR_DESC = 'cursor_DESC',
  DATA_ASC = 'data_ASC',
  DATA_DESC = 'data_DESC'
}

export interface InventoryPreviousValues {
  __typename?: 'InventoryPreviousValues';
  id: Scalars['ID'];
  cursor: Scalars['Int'];
  data: Scalars['String'];
}

export interface InventorySubscriptionPayload {
  __typename?: 'InventorySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Inventory>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<InventoryPreviousValues>;
}

export interface InventorySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<InventorySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<InventorySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<InventorySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<InventoryWhereInput>;
}

export interface InventoryUpdateInput {
  cursor?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
  player?: Maybe<PlayerUpdateOneWithoutInventoryInput>;
}

export interface PlayerUpdateOneWithoutInventoryInput {
  connect?: Maybe<PlayerWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface InventoryUpdateManyMutationInput {
  cursor?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
}

export interface InventoryUpdateWithoutPlayerDataInput {
  cursor?: Maybe<Scalars['Int']>;
  data?: Maybe<Scalars['String']>;
}

/** A connection to a list of items. */
export interface LetsadsSmsMessageStatusConnection {
  __typename?: 'LetsadsSmsMessageStatusConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<LetsadsSmsMessageStatusEdge>>;
  aggregate: AggregateLetsadsSmsMessageStatus;
}

/** An edge in a connection. */
export interface LetsadsSmsMessageStatusEdge {
  __typename?: 'LetsadsSmsMessageStatusEdge';
  /** The item at the end of the edge. */
  node: LetsadsSmsMessageStatus;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface LetsadsSmsMessageStatusCreateInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  SmsMessage: SmsMessageCreateOneWithoutStatusInput;
  Items?: Maybe<LetsadsSmsMessageStatusItemCreateManyWithoutStatusInput>;
}

export interface SmsMessageCreateOneWithoutStatusInput {
  connect?: Maybe<SmsMessageWhereUniqueInput>;
}

export interface SmsMessageWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface LetsadsSmsMessageStatusItemCreateManyWithoutStatusInput {
  connect?: Maybe<Array<LetsadsSmsMessageStatusItemWhereUniqueInput>>;
}

export interface LetsadsSmsMessageStatusItemWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  sms_id?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusCreateOneWithoutItemsInput {
  connect?: Maybe<LetsadsSmsMessageStatusWhereUniqueInput>;
}

export interface LetsadsSmsMessageStatusCreateWithoutItemsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  SmsMessage: SmsMessageCreateOneWithoutStatusInput;
}

export interface LetsadsSmsMessageStatusCreateWithoutSmsMessageInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  Items?: Maybe<LetsadsSmsMessageStatusItemCreateManyWithoutStatusInput>;
}

/** A connection to a list of items. */
export interface LetsadsSmsMessageStatusItemConnection {
  __typename?: 'LetsadsSmsMessageStatusItemConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<LetsadsSmsMessageStatusItemEdge>>;
  aggregate: AggregateLetsadsSmsMessageStatusItem;
}

/** An edge in a connection. */
export interface LetsadsSmsMessageStatusItemEdge {
  __typename?: 'LetsadsSmsMessageStatusItemEdge';
  /** The item at the end of the edge. */
  node: LetsadsSmsMessageStatusItem;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface LetsadsSmsMessageStatusItemCreateInput {
  id?: Maybe<Scalars['ID']>;
  sms_id: Scalars['Int'];
  Status?: Maybe<LetsadsSmsMessageStatusCreateOneWithoutItemsInput>;
}

export interface LetsadsSmsMessageStatusItemCreateWithoutStatusInput {
  id?: Maybe<Scalars['ID']>;
  sms_id: Scalars['Int'];
}

export interface LetsadsSmsMessageStatusItemPreviousValues {
  __typename?: 'LetsadsSmsMessageStatusItemPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  sms_id: Scalars['Int'];
}

export interface LetsadsSmsMessageStatusItemScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetsadsSmsMessageStatusItemScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetsadsSmsMessageStatusItemScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetsadsSmsMessageStatusItemScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  sms_id?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  sms_id_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  sms_id_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  sms_id_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  sms_id_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  sms_id_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  sms_id_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  sms_id_gte?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusItemSubscriptionPayload {
  __typename?: 'LetsadsSmsMessageStatusItemSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<LetsadsSmsMessageStatusItem>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<LetsadsSmsMessageStatusItemPreviousValues>;
}

export interface LetsadsSmsMessageStatusItemSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetsadsSmsMessageStatusItemSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetsadsSmsMessageStatusItemSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetsadsSmsMessageStatusItemSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<LetsadsSmsMessageStatusItemWhereInput>;
}

export interface LetsadsSmsMessageStatusItemUpdateInput {
  sms_id?: Maybe<Scalars['Int']>;
  Status?: Maybe<LetsadsSmsMessageStatusUpdateOneWithoutItemsInput>;
}

export interface LetsadsSmsMessageStatusUpdateOneWithoutItemsInput {
  connect?: Maybe<LetsadsSmsMessageStatusWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface LetsadsSmsMessageStatusItemUpdateManyDataInput {
  sms_id?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusItemUpdateManyMutationInput {
  sms_id?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusItemUpdateManyWithoutStatusInput {
  connect?: Maybe<Array<LetsadsSmsMessageStatusItemWhereUniqueInput>>;
  set?: Maybe<Array<LetsadsSmsMessageStatusItemWhereUniqueInput>>;
  disconnect?: Maybe<Array<LetsadsSmsMessageStatusItemWhereUniqueInput>>;
  updateMany?: Maybe<Array<LetsadsSmsMessageStatusItemUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<LetsadsSmsMessageStatusItemScalarWhereInput>>;
}

export interface LetsadsSmsMessageStatusItemUpdateManyWithWhereNestedInput {
  where: LetsadsSmsMessageStatusItemScalarWhereInput;
  data: LetsadsSmsMessageStatusItemUpdateManyDataInput;
}

export interface LetsadsSmsMessageStatusItemUpdateWithoutStatusDataInput {
  sms_id?: Maybe<Scalars['Int']>;
}

export interface LetsadsSmsMessageStatusItemUpdateWithWhereUniqueWithoutStatusInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput;
  data: LetsadsSmsMessageStatusItemUpdateWithoutStatusDataInput;
}

export interface LetsadsSmsMessageStatusItemUpsertWithWhereUniqueWithoutStatusInput {
  where: LetsadsSmsMessageStatusItemWhereUniqueInput;
}

export enum LetsadsSmsMessageStatusOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  DESCRIPTION_ASC = 'description_ASC',
  DESCRIPTION_DESC = 'description_DESC',
  ERRORCODE_ASC = 'errorCode_ASC',
  ERRORCODE_DESC = 'errorCode_DESC'
}

export interface LetsadsSmsMessageStatusPreviousValues {
  __typename?: 'LetsadsSmsMessageStatusPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
}

export interface LetsadsSmsMessageStatusSubscriptionPayload {
  __typename?: 'LetsadsSmsMessageStatusSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<LetsadsSmsMessageStatus>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<LetsadsSmsMessageStatusPreviousValues>;
}

export interface LetsadsSmsMessageStatusSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetsadsSmsMessageStatusSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetsadsSmsMessageStatusSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetsadsSmsMessageStatusSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<LetsadsSmsMessageStatusWhereInput>;
}

export interface LetsadsSmsMessageStatusUpdateInput {
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  SmsMessage?: Maybe<SmsMessageUpdateOneRequiredWithoutStatusInput>;
  Items?: Maybe<LetsadsSmsMessageStatusItemUpdateManyWithoutStatusInput>;
}

export interface SmsMessageUpdateOneRequiredWithoutStatusInput {
  connect?: Maybe<SmsMessageWhereUniqueInput>;
}

export interface LetsadsSmsMessageStatusUpdateManyMutationInput {
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
}

export interface LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput {
  connect?: Maybe<LetsadsSmsMessageStatusWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface LetsadsSmsMessageStatusUpdateWithoutItemsDataInput {
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  SmsMessage?: Maybe<SmsMessageUpdateOneRequiredWithoutStatusInput>;
}

export interface LetsadsSmsMessageStatusUpdateWithoutSmsMessageDataInput {
  name?: Maybe<LetsadsSmsMessageStatusEnum>;
  description?: Maybe<Scalars['String']>;
  errorCode?: Maybe<LetsadsSmsMessageStatusErrorCodeEnum>;
  Items?: Maybe<LetsadsSmsMessageStatusItemUpdateManyWithoutStatusInput>;
}

export interface Letter extends Node {
  __typename?: 'Letter';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status: LetterStatus;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  User?: Maybe<User>;
}

/** A connection to a list of items. */
export interface LetterConnection {
  __typename?: 'LetterConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<LetterEdge>>;
  aggregate: AggregateLetter;
}

/** An edge in a connection. */
export interface LetterEdge {
  __typename?: 'LetterEdge';
  /** The item at the end of the edge. */
  node: Letter;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface LetterCreateInput {
  id?: Maybe<Scalars['ID']>;
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  User?: Maybe<UserCreateOneWithoutLettersCreatedInput>;
}

export interface UserCreateOneWithoutLettersCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LetterCreateManyWithoutUserInput {
  connect?: Maybe<Array<LetterWhereUniqueInput>>;
}

export interface LetterWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface LetterCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
}

export enum LetterOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  EMAIL_ASC = 'email_ASC',
  EMAIL_DESC = 'email_DESC',
  SUBJECT_ASC = 'subject_ASC',
  SUBJECT_DESC = 'subject_DESC',
  MESSAGE_ASC = 'message_ASC',
  MESSAGE_DESC = 'message_DESC',
  STATUS_ASC = 'status_ASC',
  STATUS_DESC = 'status_DESC',
  RANK_ASC = 'rank_ASC',
  RANK_DESC = 'rank_DESC',
  DELETEONSEND_ASC = 'deleteOnSend_ASC',
  DELETEONSEND_DESC = 'deleteOnSend_DESC',
  REPLYTO_ASC = 'replyTo_ASC',
  REPLYTO_DESC = 'replyTo_DESC',
  RETURNTO_ASC = 'returnTo_ASC',
  RETURNTO_DESC = 'returnTo_DESC'
}

export interface LetterPreviousValues {
  __typename?: 'LetterPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  email: Scalars['String'];
  subject: Scalars['String'];
  message: Scalars['String'];
  status: LetterStatus;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
}

export interface LetterScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetterScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetterScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetterScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  email?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  email_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  email_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  email_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  email_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  email_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  email_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  email_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  email_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  email_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  email_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  email_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  email_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  email_not_ends_with?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  subject_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  subject_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  subject_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  subject_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  subject_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  subject_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  subject_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  subject_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  subject_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  subject_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  subject_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  subject_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  subject_not_ends_with?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  message_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  message_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  message_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  message_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  message_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  message_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  message_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  message_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  message_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  message_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  message_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  message_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  message_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<LetterStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<LetterStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<LetterStatus>>;
  rank?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  rank_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  rank_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  rank_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  rank_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  rank_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  rank_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  rank_gte?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  deleteOnSend_not?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  replyTo_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  replyTo_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  replyTo_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  replyTo_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  replyTo_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  replyTo_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  replyTo_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  replyTo_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  replyTo_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  replyTo_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  replyTo_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  replyTo_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  replyTo_not_ends_with?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  returnTo_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  returnTo_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  returnTo_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  returnTo_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  returnTo_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  returnTo_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  returnTo_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  returnTo_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  returnTo_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  returnTo_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  returnTo_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  returnTo_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  returnTo_not_ends_with?: Maybe<Scalars['String']>;
}

export interface LetterSubscriptionPayload {
  __typename?: 'LetterSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Letter>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<LetterPreviousValues>;
}

export interface LetterSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LetterSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LetterSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LetterSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<LetterWhereInput>;
}

export interface LetterUpdateInput {
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
  User?: Maybe<UserUpdateOneWithoutLettersCreatedInput>;
}

export interface UserUpdateOneWithoutLettersCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface LetterUpdateManyDataInput {
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
}

export interface LetterUpdateManyMutationInput {
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
}

export interface LetterUpdateManyWithoutUserInput {
  connect?: Maybe<Array<LetterWhereUniqueInput>>;
  set?: Maybe<Array<LetterWhereUniqueInput>>;
  disconnect?: Maybe<Array<LetterWhereUniqueInput>>;
  updateMany?: Maybe<Array<LetterUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<LetterScalarWhereInput>>;
}

export interface LetterUpdateManyWithWhereNestedInput {
  where: LetterScalarWhereInput;
  data: LetterUpdateManyDataInput;
}

export interface LetterUpdateWithoutUserDataInput {
  email?: Maybe<Scalars['String']>;
  subject?: Maybe<Scalars['String']>;
  message?: Maybe<Scalars['String']>;
  status?: Maybe<LetterStatus>;
  rank?: Maybe<Scalars['Int']>;
  deleteOnSend?: Maybe<Scalars['Boolean']>;
  replyTo?: Maybe<Scalars['String']>;
  returnTo?: Maybe<Scalars['String']>;
}

export interface LetterUpdateWithWhereUniqueWithoutUserInput {
  where: LetterWhereUniqueInput;
  data: LetterUpdateWithoutUserDataInput;
}

export interface LetterUpsertWithWhereUniqueWithoutUserInput {
  where: LetterWhereUniqueInput;
}

/** A connection to a list of items. */
export interface LogConnection {
  __typename?: 'LogConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<LogEdge>>;
  aggregate: AggregateLog;
}

/** An edge in a connection. */
export interface LogEdge {
  __typename?: 'LogEdge';
  /** The item at the end of the edge. */
  node: Log;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface LogCreateInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
  Import?: Maybe<ImportCreateOneWithoutLogsInput>;
}

export interface LogCreateWithoutImportInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
}

/** A connection to a list of items. */
export interface LogedInConnection {
  __typename?: 'LogedInConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<LogedInEdge>>;
  aggregate: AggregateLogedIn;
}

/** An edge in a connection. */
export interface LogedInEdge {
  __typename?: 'LogedInEdge';
  /** The item at the end of the edge. */
  node: LogedIn;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface LogedInCreateInput {
  id?: Maybe<Scalars['ID']>;
  fake?: Maybe<Scalars['Boolean']>;
  User: UserCreateOneWithoutLogedInsInput;
}

export interface UserCreateOneWithoutLogedInsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LogedInCreateManyWithoutUserInput {
  connect?: Maybe<Array<LogedInWhereUniqueInput>>;
}

export interface LogedInWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
}

export interface LogedInCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  fake?: Maybe<Scalars['Boolean']>;
}

export interface LogedInPreviousValues {
  __typename?: 'LogedInPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  fake?: Maybe<Scalars['Boolean']>;
  updatedAt: Scalars['DateTime'];
}

export interface LogedInScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogedInScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogedInScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogedInScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  fake?: Maybe<Scalars['Boolean']>;
  /** All values that are not equal to given value. */
  fake_not?: Maybe<Scalars['Boolean']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
}

export interface LogedInSubscriptionPayload {
  __typename?: 'LogedInSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<LogedIn>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<LogedInPreviousValues>;
}

export interface LogedInSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogedInSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogedInSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogedInSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<LogedInWhereInput>;
}

export interface LogedInUpdateInput {
  fake?: Maybe<Scalars['Boolean']>;
  User?: Maybe<UserUpdateOneRequiredWithoutLogedInsInput>;
}

export interface UserUpdateOneRequiredWithoutLogedInsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface LogedInUpdateManyDataInput {
  fake?: Maybe<Scalars['Boolean']>;
}

export interface LogedInUpdateManyMutationInput {
  fake?: Maybe<Scalars['Boolean']>;
}

export interface LogedInUpdateManyWithoutUserInput {
  connect?: Maybe<Array<LogedInWhereUniqueInput>>;
  set?: Maybe<Array<LogedInWhereUniqueInput>>;
  disconnect?: Maybe<Array<LogedInWhereUniqueInput>>;
  updateMany?: Maybe<Array<LogedInUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<LogedInScalarWhereInput>>;
}

export interface LogedInUpdateManyWithWhereNestedInput {
  where: LogedInScalarWhereInput;
  data: LogedInUpdateManyDataInput;
}

export interface LogedInUpdateWithoutUserDataInput {
  fake?: Maybe<Scalars['Boolean']>;
}

export interface LogedInUpdateWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput;
  data: LogedInUpdateWithoutUserDataInput;
}

export interface LogedInUpsertWithWhereUniqueWithoutUserInput {
  where: LogedInWhereUniqueInput;
}

export interface LogPreviousValues {
  __typename?: 'LogPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  level: LogLevel;
  objectType?: Maybe<Scalars['ID']>;
  message: Scalars['String'];
  stack?: Maybe<Scalars['String']>;
}

export interface LogSubscriptionPayload {
  __typename?: 'LogSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Log>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<LogPreviousValues>;
}

export interface LogSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<LogSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<LogSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<LogSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<LogWhereInput>;
}

export interface LogUpdateInput {
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
  Import?: Maybe<ImportUpdateOneWithoutLogsInput>;
}

export interface LogUpdateManyMutationInput {
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
}

export interface LogUpdateWithoutImportDataInput {
  level?: Maybe<LogLevel>;
  objectType?: Maybe<Scalars['ID']>;
  message?: Maybe<Scalars['String']>;
  stack?: Maybe<Scalars['String']>;
}

export interface LogUpdateWithWhereUniqueWithoutImportInput {
  where: LogWhereUniqueInput;
  data: LogUpdateWithoutImportDataInput;
}

export interface LogUpsertWithWhereUniqueWithoutImportInput {
  where: LogWhereUniqueInput;
}

/** A connection to a list of items. */
export interface MessageConnection {
  __typename?: 'MessageConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<MessageEdge>>;
  aggregate: AggregateMessage;
}

/** An edge in a connection. */
export interface MessageEdge {
  __typename?: 'MessageEdge';
  /** The item at the end of the edge. */
  node: Message;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface MessageCreateInput {
  id?: Maybe<Scalars['ID']>;
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
  world: WorldCreateOneWithoutMessagesInput;
}

export interface WorldCreateOneWithoutMessagesInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface MessageCreateWithoutWorldInput {
  id?: Maybe<Scalars['ID']>;
  type: MessageType;
  sender?: Maybe<Scalars['String']>;
  body: Scalars['String'];
}

export interface MessageUpdateInput {
  type?: Maybe<MessageType>;
  sender?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
  world?: Maybe<WorldUpdateOneRequiredWithoutMessagesInput>;
}

export interface WorldUpdateOneRequiredWithoutMessagesInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface MessageUpdateManyMutationInput {
  type?: Maybe<MessageType>;
  sender?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
}

export interface MessageUpdateWithoutWorldDataInput {
  type?: Maybe<MessageType>;
  sender?: Maybe<Scalars['String']>;
  body?: Maybe<Scalars['String']>;
}

export interface MessageUpdateWithWhereUniqueWithoutWorldInput {
  where: MessageWhereUniqueInput;
  data: MessageUpdateWithoutWorldDataInput;
}

export interface MessageUpsertWithWhereUniqueWithoutWorldInput {
  where: MessageWhereUniqueInput;
}

export interface NoticeCreateInput {
  id?: Maybe<Scalars['ID']>;
  type: NoticeType;
  User: UserCreateOneWithoutNoticesInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
  ChatMessage?: Maybe<ChatMessageCreateOneInput>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitationCreateOneWithoutNoticeInput>;
}

export interface UserCreateOneWithoutNoticesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NoticeCreateManyWithoutUserInput {
  connect?: Maybe<Array<NoticeWhereUniqueInput>>;
}

export interface NoticeCreateWithoutChatRoomInvitationInput {
  id?: Maybe<Scalars['ID']>;
  type: NoticeType;
  User: UserCreateOneWithoutNoticesInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
  ChatMessage?: Maybe<ChatMessageCreateOneInput>;
}

export interface NoticeCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  type: NoticeType;
  CreatedBy?: Maybe<UserCreateOneInput>;
  ChatMessage?: Maybe<ChatMessageCreateOneInput>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitationCreateOneWithoutNoticeInput>;
}

export interface NoticeScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NoticeScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NoticeScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NoticeScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  type?: Maybe<NoticeType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<NoticeType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<NoticeType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<NoticeType>>;
}

export interface NoticeUpdateInput {
  type?: Maybe<NoticeType>;
  User?: Maybe<UserUpdateOneRequiredWithoutNoticesInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  ChatMessage?: Maybe<ChatMessageUpdateOneInput>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitationUpdateOneWithoutNoticeInput>;
}

export interface UserUpdateOneRequiredWithoutNoticesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NoticeUpdateManyDataInput {
  type?: Maybe<NoticeType>;
}

export interface NoticeUpdateManyMutationInput {
  type?: Maybe<NoticeType>;
}

export interface NoticeUpdateManyWithoutUserInput {
  connect?: Maybe<Array<NoticeWhereUniqueInput>>;
  set?: Maybe<Array<NoticeWhereUniqueInput>>;
  disconnect?: Maybe<Array<NoticeWhereUniqueInput>>;
  updateMany?: Maybe<Array<NoticeUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<NoticeScalarWhereInput>>;
}

export interface NoticeUpdateManyWithWhereNestedInput {
  where: NoticeScalarWhereInput;
  data: NoticeUpdateManyDataInput;
}

export interface NoticeUpdateWithoutChatRoomInvitationDataInput {
  type?: Maybe<NoticeType>;
  User?: Maybe<UserUpdateOneRequiredWithoutNoticesInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  ChatMessage?: Maybe<ChatMessageUpdateOneInput>;
}

export interface NoticeUpdateWithoutUserDataInput {
  type?: Maybe<NoticeType>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  ChatMessage?: Maybe<ChatMessageUpdateOneInput>;
  ChatRoomInvitation?: Maybe<ChatRoomInvitationUpdateOneWithoutNoticeInput>;
}

export interface NoticeUpdateWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput;
  data: NoticeUpdateWithoutUserDataInput;
}

export interface NoticeUpsertWithWhereUniqueWithoutUserInput {
  where: NoticeWhereUniqueInput;
}

export interface NotificationTypeCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  Users?: Maybe<UserCreateManyWithoutNotificationTypesInput>;
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput;
}

export interface UserCreateManyWithoutNotificationTypesInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateOneWithoutNotificationTypesCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NotificationTypeCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
}

export interface NotificationTypeCreateManyWithoutUsersInput {
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
}

export interface NotificationTypeCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  Users?: Maybe<UserCreateManyWithoutNotificationTypesInput>;
}

export interface NotificationTypeCreateWithoutUsersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy: UserCreateOneWithoutNotificationTypesCreatedInput;
}

export interface NotificationTypePreviousValues {
  __typename?: 'NotificationTypePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeSubscriptionPayload {
  __typename?: 'NotificationTypeSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<NotificationType>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<NotificationTypePreviousValues>;
}

export interface NotificationTypeSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<NotificationTypeSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<NotificationTypeSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<NotificationTypeSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<NotificationTypeWhereInput>;
}

export interface NotificationTypeUpdateInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  Users?: Maybe<UserUpdateManyWithoutNotificationTypesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutNotificationTypesCreatedInput>;
}

export interface UserUpdateManyWithoutNotificationTypesInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface UserUpdateOneRequiredWithoutNotificationTypesCreatedInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface NotificationTypeUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface NotificationTypeUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  set?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  disconnect?: Maybe<Array<NotificationTypeWhereUniqueInput>>;
  updateMany?: Maybe<Array<NotificationTypeUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<NotificationTypeScalarWhereInput>>;
}

export interface NotificationTypeUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  Users?: Maybe<UserUpdateManyWithoutNotificationTypesInput>;
}

export interface NotificationTypeUpdateWithoutUsersDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  comment?: Maybe<Scalars['String']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutNotificationTypesCreatedInput>;
}

export interface NotificationTypeUpdateWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput;
  data: NotificationTypeUpdateWithoutCreatedByDataInput;
}

export interface NotificationTypeUpdateWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput;
  data: NotificationTypeUpdateWithoutUsersDataInput;
}

export interface NotificationTypeUpsertWithWhereUniqueWithoutCreatedByInput {
  where: NotificationTypeWhereUniqueInput;
}

export interface NotificationTypeUpsertWithWhereUniqueWithoutUsersInput {
  where: NotificationTypeWhereUniqueInput;
}

/** A connection to a list of items. */
export interface PlayerConnection {
  __typename?: 'PlayerConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<PlayerEdge>>;
  aggregate: AggregatePlayer;
}

/** An edge in a connection. */
export interface PlayerEdge {
  __typename?: 'PlayerEdge';
  /** The item at the end of the edge. */
  node: Player;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface PlayerCreateWithoutInventoryInput {
  id?: Maybe<Scalars['ID']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Float'];
  y: Scalars['Float'];
  z: Scalars['Float'];
  dirx: Scalars['Float'];
  diry: Scalars['Float'];
  user: UserCreateOneInput;
  world: WorldCreateOneWithoutPlayersInput;
}

export interface WorldCreateOneWithoutPlayersInput {
  connect?: Maybe<WorldWhereUniqueInput>;
}

export interface PlayerCreateWithoutWorldInput {
  id?: Maybe<Scalars['ID']>;
  isAdmin: Scalars['Boolean'];
  gamemode: Gamemode;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x: Scalars['Float'];
  y: Scalars['Float'];
  z: Scalars['Float'];
  dirx: Scalars['Float'];
  diry: Scalars['Float'];
  user: UserCreateOneInput;
  inventory?: Maybe<InventoryCreateOneWithoutPlayerInput>;
}

export interface PlayerUpdateManyMutationInput {
  isAdmin?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
}

export interface PlayerUpdateWithoutInventoryDataInput {
  isAdmin?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  world?: Maybe<WorldUpdateOneRequiredWithoutPlayersInput>;
}

export interface PlayerUpdateWithoutWorldDataInput {
  isAdmin?: Maybe<Scalars['Boolean']>;
  gamemode?: Maybe<Gamemode>;
  lastLogin?: Maybe<Scalars['DateTime']>;
  x?: Maybe<Scalars['Float']>;
  y?: Maybe<Scalars['Float']>;
  z?: Maybe<Scalars['Float']>;
  dirx?: Maybe<Scalars['Float']>;
  diry?: Maybe<Scalars['Float']>;
  user?: Maybe<UserUpdateOneRequiredInput>;
  inventory?: Maybe<InventoryUpdateOneWithoutPlayerInput>;
}

export interface PlayerUpdateWithWhereUniqueWithoutWorldInput {
  where: PlayerWhereUniqueInput;
  data: PlayerUpdateWithoutWorldDataInput;
}

export interface PlayerUpsertWithWhereUniqueWithoutWorldInput {
  where: PlayerWhereUniqueInput;
}

export interface PositionCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
}

export interface PositionCreateManyWithoutUsersInput {
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
}

export interface PositionCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  Users?: Maybe<UserCreateManyWithoutPositionsInput>;
}

export interface PositionCreateWithoutUsersInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  CreatedBy?: Maybe<UserCreateOneWithoutPositionsCreatedInput>;
}

export interface PositionScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<PositionScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<PositionScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<PositionScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
}

export interface PositionUpdateManyDataInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}

export interface PositionUpdateManyMutationInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
}

export interface PositionUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
  set?: Maybe<Array<PositionWhereUniqueInput>>;
  disconnect?: Maybe<Array<PositionWhereUniqueInput>>;
  updateMany?: Maybe<Array<PositionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<PositionScalarWhereInput>>;
}

export interface PositionUpdateManyWithWhereNestedInput {
  where: PositionScalarWhereInput;
  data: PositionUpdateManyDataInput;
}

export interface PositionUpdateManyWithoutUsersInput {
  connect?: Maybe<Array<PositionWhereUniqueInput>>;
  set?: Maybe<Array<PositionWhereUniqueInput>>;
  disconnect?: Maybe<Array<PositionWhereUniqueInput>>;
  updateMany?: Maybe<Array<PositionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<PositionScalarWhereInput>>;
}

export interface PositionUpdateWithoutCreatedByDataInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  Users?: Maybe<UserUpdateManyWithoutPositionsInput>;
}

export interface PositionUpdateWithoutUsersDataInput {
  code?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutPositionsCreatedInput>;
}

export interface PositionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: PositionWhereUniqueInput;
  data: PositionUpdateWithoutCreatedByDataInput;
}

export interface PositionUpdateWithWhereUniqueWithoutUsersInput {
  where: PositionWhereUniqueInput;
  data: PositionUpdateWithoutUsersDataInput;
}

export interface PositionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: PositionWhereUniqueInput;
}

export interface PositionUpsertWithWhereUniqueWithoutUsersInput {
  where: PositionWhereUniqueInput;
}

export interface ProjectCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateManyWithoutPrismaUsersInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
}

export interface ProjectCreateWithoutChatRoomInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutCustomersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutEthAccountsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
}

export interface ProjectCreateWithoutMembersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutPrismaResourcesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutPrismaTemplatesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutPrismaUsersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutProjectTasksInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Team?: Maybe<TeamCreateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectCreateWithoutTeamInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateCreateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserCreateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceCreateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberCreateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskCreateManyWithoutProjectInput>;
  Customers?: Maybe<TeamCreateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutProjectInput>;
  Image?: Maybe<FileCreateOneInput>;
  Resource?: Maybe<ResourceCreateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutProjectInput>;
}

export interface ProjectMemberCreateManyWithoutUserInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
}

export interface ProjectMemberCreateWithoutProjectInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  User: UserCreateOneWithoutProjectsInput;
  Services?: Maybe<ServiceCreateManyWithoutProjectsInput>;
}

export interface ProjectMemberCreateWithoutServicesInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Project: ProjectCreateOneWithoutMembersInput;
  User: UserCreateOneWithoutProjectsInput;
}

export interface ProjectMemberCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Project: ProjectCreateOneWithoutMembersInput;
  Services?: Maybe<ServiceCreateManyWithoutProjectsInput>;
}

export interface ProjectMemberUpdateManyMutationInput {
  status?: Maybe<ProjectMemberStatus>;
}

export interface ProjectMemberUpdateManyWithoutUserInput {
  connect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  set?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectMemberScalarWhereInput>>;
}

export interface ProjectMemberUpdateWithoutProjectDataInput {
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutProjectsInput>;
  Services?: Maybe<ServiceUpdateManyWithoutProjectsInput>;
}

export interface ProjectMemberUpdateWithoutServicesDataInput {
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneRequiredWithoutMembersInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutProjectsInput>;
}

export interface ProjectMemberUpdateWithoutUserDataInput {
  status?: Maybe<ProjectMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneRequiredWithoutMembersInput>;
  Services?: Maybe<ServiceUpdateManyWithoutProjectsInput>;
}

export interface ProjectMemberUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectMemberWhereUniqueInput;
  data: ProjectMemberUpdateWithoutProjectDataInput;
}

export interface ProjectMemberUpdateWithWhereUniqueWithoutServicesInput {
  where: ProjectMemberWhereUniqueInput;
  data: ProjectMemberUpdateWithoutServicesDataInput;
}

export interface ProjectMemberUpdateWithWhereUniqueWithoutUserInput {
  where: ProjectMemberWhereUniqueInput;
  data: ProjectMemberUpdateWithoutUserDataInput;
}

export interface ProjectMemberUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectMemberWhereUniqueInput;
}

export interface ProjectMemberUpsertWithWhereUniqueWithoutServicesInput {
  where: ProjectMemberWhereUniqueInput;
}

export interface ProjectMemberUpsertWithWhereUniqueWithoutUserInput {
  where: ProjectMemberWhereUniqueInput;
}

/** A connection to a list of items. */
export interface ProjectTaskConnection {
  __typename?: 'ProjectTaskConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ProjectTaskEdge>>;
  aggregate: AggregateProjectTask;
}

/** An edge in a connection. */
export interface ProjectTaskEdge {
  __typename?: 'ProjectTaskEdge';
  /** The item at the end of the edge. */
  node: ProjectTask;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface ProjectTaskCreateInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  Project: ProjectCreateOneWithoutProjectTasksInput;
  Task: TaskCreateOneWithoutTaskProjectsInput;
}

export interface TaskCreateOneWithoutTaskProjectsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface ProjectTaskCreateWithoutProjectInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  Task: TaskCreateOneWithoutTaskProjectsInput;
}

export interface ProjectTaskCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  CreatedBy: UserCreateOneInput;
  Project: ProjectCreateOneWithoutProjectTasksInput;
}

export interface ProjectTaskPreviousValues {
  __typename?: 'ProjectTaskPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
}

export interface ProjectTaskSubscriptionPayload {
  __typename?: 'ProjectTaskSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ProjectTask>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ProjectTaskPreviousValues>;
}

export interface ProjectTaskSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ProjectTaskSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ProjectTaskSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ProjectTaskSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ProjectTaskWhereInput>;
}

export interface ProjectTaskUpdateInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  Project?: Maybe<ProjectUpdateOneRequiredWithoutProjectTasksInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTaskProjectsInput>;
}

export interface ProjectUpdateOneRequiredWithoutProjectTasksInput {
  connect?: Maybe<ProjectWhereUniqueInput>;
}

export interface TaskUpdateOneRequiredWithoutTaskProjectsInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface ProjectTaskUpdateWithoutProjectDataInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTaskProjectsInput>;
}

export interface ProjectTaskUpdateWithoutTaskDataInput {
  CreatedBy?: Maybe<UserUpdateOneRequiredInput>;
  Project?: Maybe<ProjectUpdateOneRequiredWithoutProjectTasksInput>;
}

export interface ProjectTaskUpdateWithWhereUniqueWithoutProjectInput {
  where: ProjectTaskWhereUniqueInput;
  data: ProjectTaskUpdateWithoutProjectDataInput;
}

export interface ProjectTaskUpdateWithWhereUniqueWithoutTaskInput {
  where: ProjectTaskWhereUniqueInput;
  data: ProjectTaskUpdateWithoutTaskDataInput;
}

export interface ProjectTaskUpsertWithWhereUniqueWithoutProjectInput {
  where: ProjectTaskWhereUniqueInput;
}

export interface ProjectTaskUpsertWithWhereUniqueWithoutTaskInput {
  where: ProjectTaskWhereUniqueInput;
}

export interface ProjectUpdateDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
}

export interface ProjectUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
  set?: Maybe<Array<ProjectWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectScalarWhereInput>>;
}

export interface ProjectUpdateManyWithoutPrismaUsersInput {
  connect?: Maybe<Array<ProjectWhereUniqueInput>>;
  set?: Maybe<Array<ProjectWhereUniqueInput>>;
  disconnect?: Maybe<Array<ProjectWhereUniqueInput>>;
  updateMany?: Maybe<Array<ProjectUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ProjectScalarWhereInput>>;
}

export interface ProjectUpdateWithoutChatRoomDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutCustomersDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutEthAccountsDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
}

export interface ProjectUpdateWithoutMembersDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutPrismaResourcesDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutPrismaTemplatesDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutPrismaUsersDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutProjectTasksDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutResourceDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Team?: Maybe<TeamUpdateOneWithoutProjectsInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithoutTeamDataInput {
  name?: Maybe<Scalars['String']>;
  domain?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  url?: Maybe<Scalars['String']>;
  sequence?: Maybe<Scalars['Int']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  status?: Maybe<ProjectStatus>;
  public?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  type?: Maybe<ProjectType>;
  PrismaTemplates?: Maybe<TemplateUpdateManyWithoutPrismaProjectInput>;
  PrismaUsers?: Maybe<UserUpdateManyWithoutPrismaProjectsInput>;
  PrismaResources?: Maybe<ResourceUpdateManyWithoutPrismaProjectInput>;
  Members?: Maybe<ProjectMemberUpdateManyWithoutProjectInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutProjectsCreatedInput>;
  ProjectTasks?: Maybe<ProjectTaskUpdateManyWithoutProjectInput>;
  Customers?: Maybe<TeamUpdateManyWithoutOrderedProjectsInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutProjectInput>;
  Image?: Maybe<FileUpdateOneInput>;
  Resource?: Maybe<ResourceUpdateOneWithoutProjectInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutProjectInput>;
}

export interface ProjectUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutCreatedByDataInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutCustomersInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutCustomersDataInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutPrismaUsersInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutPrismaUsersDataInput;
}

export interface ProjectUpdateWithWhereUniqueWithoutTeamInput {
  where: ProjectWhereUniqueInput;
  data: ProjectUpdateWithoutTeamDataInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ProjectWhereUniqueInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutCustomersInput {
  where: ProjectWhereUniqueInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutPrismaUsersInput {
  where: ProjectWhereUniqueInput;
}

export interface ProjectUpsertWithWhereUniqueWithoutTeamInput {
  where: ProjectWhereUniqueInput;
}

/** A connection to a list of items. */
export interface ResetPasswordConnection {
  __typename?: 'ResetPasswordConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ResetPasswordEdge>>;
  aggregate: AggregateResetPassword;
}

/** An edge in a connection. */
export interface ResetPasswordEdge {
  __typename?: 'ResetPasswordEdge';
  /** The item at the end of the edge. */
  node: ResetPassword;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export enum ResetPasswordOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  CODE_ASC = 'code_ASC',
  CODE_DESC = 'code_DESC',
  PASSWORD_ASC = 'password_ASC',
  PASSWORD_DESC = 'password_DESC',
  VALIDTILL_ASC = 'validTill_ASC',
  VALIDTILL_DESC = 'validTill_DESC'
}

export interface ResetPasswordPreviousValues {
  __typename?: 'ResetPasswordPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  code?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
}

export interface ResetPasswordSubscriptionPayload {
  __typename?: 'ResetPasswordSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ResetPassword>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ResetPasswordPreviousValues>;
}

export interface ResetPasswordSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResetPasswordSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResetPasswordSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResetPasswordSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ResetPasswordWhereInput>;
}

export interface ResetPasswordWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResetPasswordWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResetPasswordWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResetPasswordWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  password_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  password_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  password_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  password_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  password_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  password_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  password_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  password_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  password_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  password_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  password_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  password_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  password_not_ends_with?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  validTill_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  validTill_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  validTill_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  validTill_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  validTill_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  validTill_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  validTill_gte?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserWhereInput>;
}

export interface ResetPasswordUpdateInput {
  code?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
  User?: Maybe<UserUpdateOneInput>;
}

export interface ResetPasswordUpdateManyMutationInput {
  code?: Maybe<Scalars['ID']>;
  password?: Maybe<Scalars['String']>;
  validTill?: Maybe<Scalars['DateTime']>;
}

export interface ResetPasswordWhereUniqueInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ResourceCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
}

export interface ResourceCreateOneWithoutTagsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateOneWithoutVotesInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutCodeChallengeInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutCommentsInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutEthAccountInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutGalleriesInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutImageInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutPrismaProjectInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutProjectInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutServiceInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutTagsInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
}

export interface ResourceCreateWithoutTeamInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutTopicInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Votes?: Maybe<VoteCreateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceCreateWithoutVotesInput {
  id?: Maybe<Scalars['ID']>;
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceCreateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectCreateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceCreateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTopicInput>;
  Tags?: Maybe<ResourceTagCreateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceCreateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeCreateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryCreateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountCreateOneWithoutResourcesInput>;
  Image?: Maybe<FileCreateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceCreateOneWithoutResourceInput>;
  Team?: Maybe<TeamCreateOneWithoutResourceInput>;
  Project?: Maybe<ProjectCreateOneWithoutResourceInput>;
  Task?: Maybe<TaskCreateOneWithoutCommentsInput>;
}

export interface ResourceTagCreateInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TagStatus>;
  Resource: ResourceCreateOneWithoutTagsInput;
  Tag: TagCreateOneWithoutResourcesInput;
  CreatedBy: UserCreateOneWithoutResourceTagsInput;
}

export interface TagCreateOneWithoutResourcesInput {
  connect?: Maybe<TagWhereUniqueInput>;
}

export interface UserCreateOneWithoutResourceTagsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResourceTagCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceTagCreateManyWithoutTagInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
}

export interface ResourceTagCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TagStatus>;
  Resource: ResourceCreateOneWithoutTagsInput;
  Tag: TagCreateOneWithoutResourcesInput;
}

export interface ResourceTagCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TagStatus>;
  Tag: TagCreateOneWithoutResourcesInput;
  CreatedBy: UserCreateOneWithoutResourceTagsInput;
}

export interface ResourceTagCreateWithoutTagInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TagStatus>;
  Resource: ResourceCreateOneWithoutTagsInput;
  CreatedBy: UserCreateOneWithoutResourceTagsInput;
}

export interface ResourceTagPreviousValues {
  __typename?: 'ResourceTagPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status: TagStatus;
}

export interface ResourceTagSubscriptionPayload {
  __typename?: 'ResourceTagSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ResourceTag>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ResourceTagPreviousValues>;
}

export interface ResourceTagSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ResourceTagSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ResourceTagSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ResourceTagSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ResourceTagWhereInput>;
}

export interface ResourceTagUpdateInput {
  status?: Maybe<TagStatus>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTagsInput>;
  Tag?: Maybe<TagUpdateOneRequiredWithoutResourcesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutResourceTagsInput>;
}

export interface ResourceUpdateOneRequiredWithoutTagsInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface TagUpdateOneRequiredWithoutResourcesInput {
  connect?: Maybe<TagWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutResourceTagsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface ResourceTagUpdateManyMutationInput {
  status?: Maybe<TagStatus>;
}

export interface ResourceTagUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  set?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceTagUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceTagScalarWhereInput>>;
}

export interface ResourceTagUpdateManyWithoutTagInput {
  connect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  set?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceTagWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceTagUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceTagScalarWhereInput>>;
}

export interface ResourceTagUpdateWithoutCreatedByDataInput {
  status?: Maybe<TagStatus>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTagsInput>;
  Tag?: Maybe<TagUpdateOneRequiredWithoutResourcesInput>;
}

export interface ResourceTagUpdateWithoutResourceDataInput {
  status?: Maybe<TagStatus>;
  Tag?: Maybe<TagUpdateOneRequiredWithoutResourcesInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutResourceTagsInput>;
}

export interface ResourceTagUpdateWithoutTagDataInput {
  status?: Maybe<TagStatus>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTagsInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutResourceTagsInput>;
}

export interface ResourceTagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput;
  data: ResourceTagUpdateWithoutCreatedByDataInput;
}

export interface ResourceTagUpdateWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput;
  data: ResourceTagUpdateWithoutResourceDataInput;
}

export interface ResourceTagUpdateWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput;
  data: ResourceTagUpdateWithoutTagDataInput;
}

export interface ResourceTagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceTagWhereUniqueInput;
}

export interface ResourceTagUpsertWithWhereUniqueWithoutResourceInput {
  where: ResourceTagWhereUniqueInput;
}

export interface ResourceTagUpsertWithWhereUniqueWithoutTagInput {
  where: ResourceTagWhereUniqueInput;
}

export interface ResourceUpdateDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateManyMutationInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
}

export interface ResourceUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<ResourceWhereUniqueInput>>;
  set?: Maybe<Array<ResourceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ResourceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ResourceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ResourceScalarWhereInput>>;
}

export interface ResourceUpdateOneRequiredWithoutVotesInput {
  connect?: Maybe<ResourceWhereUniqueInput>;
}

export interface ResourceUpdateWithoutChildsDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutCodeChallengeDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutCommentsDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutCreatedByDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutEthAccountDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutGalleriesDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutImageDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutParentDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutPrismaProjectDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutProjectDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutServiceDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutTagsDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutTaskDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
}

export interface ResourceUpdateWithoutTeamDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutTopicDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Votes?: Maybe<VoteUpdateManyWithoutResourceInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithoutVotesDataInput {
  code?: Maybe<Scalars['ID']>;
  type?: Maybe<ResourceType>;
  name?: Maybe<Scalars['String']>;
  longtitle?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  published?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidemenu?: Maybe<Scalars['Boolean']>;
  searchable?: Maybe<Scalars['Boolean']>;
  uri?: Maybe<Scalars['String']>;
  isfolder?: Maybe<Scalars['Boolean']>;
  rating?: Maybe<Scalars['Float']>;
  positiveVotesCount?: Maybe<Scalars['Int']>;
  negativeVotesCount?: Maybe<Scalars['Int']>;
  neutralVotesCount?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  mockUpdate?: Maybe<Scalars['DateTime']>;
  components?: Maybe<Scalars['Json']>;
  commentOldID?: Maybe<Scalars['Int']>;
  class_key?: Maybe<Scalars['String']>;
  template?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutResourcesInput>;
  Parent?: Maybe<ResourceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ResourceUpdateManyWithoutParentInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaResourcesInput>;
  Topic?: Maybe<ResourceUpdateOneWithoutCommentsInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTopicInput>;
  Tags?: Maybe<ResourceTagUpdateManyWithoutResourceInput>;
  Blog?: Maybe<ResourceUpdateOneInput>;
  CodeChallenge?: Maybe<CodeChallengeUpdateOneWithoutTopicInput>;
  Galleries?: Maybe<GalleryUpdateManyWithoutResourceInput>;
  EthAccount?: Maybe<EthAccountUpdateOneWithoutResourcesInput>;
  Image?: Maybe<FileUpdateOneWithoutImageResourceInput>;
  Service?: Maybe<ServiceUpdateOneWithoutResourceInput>;
  Team?: Maybe<TeamUpdateOneWithoutResourceInput>;
  Project?: Maybe<ProjectUpdateOneWithoutResourceInput>;
  Task?: Maybe<TaskUpdateOneWithoutCommentsInput>;
}

export interface ResourceUpdateWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutCreatedByDataInput;
}

export interface ResourceUpdateWithWhereUniqueWithoutEthAccountInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutEthAccountDataInput;
}

export interface ResourceUpdateWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutParentDataInput;
}

export interface ResourceUpdateWithWhereUniqueWithoutPrismaProjectInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutPrismaProjectDataInput;
}

export interface ResourceUpdateWithWhereUniqueWithoutTaskInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutTaskDataInput;
}

export interface ResourceUpdateWithWhereUniqueWithoutTopicInput {
  where: ResourceWhereUniqueInput;
  data: ResourceUpdateWithoutTopicDataInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutCreatedByInput {
  where: ResourceWhereUniqueInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutEthAccountInput {
  where: ResourceWhereUniqueInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutParentInput {
  where: ResourceWhereUniqueInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutPrismaProjectInput {
  where: ResourceWhereUniqueInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutTaskInput {
  where: ResourceWhereUniqueInput;
}

export interface ResourceUpsertWithWhereUniqueWithoutTopicInput {
  where: ResourceWhereUniqueInput;
}

export interface RouteCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact?: Maybe<Scalars['Boolean']>;
  component: Scalars['String'];
  Parent?: Maybe<RouteCreateOneWithoutChildsInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface RouteCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  path: Scalars['String'];
  exact?: Maybe<Scalars['Boolean']>;
  component: Scalars['String'];
  Childs?: Maybe<RouteCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface RouteUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
}

export interface RouteUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  Parent?: Maybe<RouteUpdateOneWithoutChildsInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface RouteUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  path?: Maybe<Scalars['String']>;
  exact?: Maybe<Scalars['Boolean']>;
  component?: Maybe<Scalars['String']>;
  Childs?: Maybe<RouteUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface RouteUpdateWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput;
  data: RouteUpdateWithoutParentDataInput;
}

export interface RouteUpsertWithWhereUniqueWithoutParentInput {
  where: RouteWhereUniqueInput;
}

/** A connection to a list of items. */
export interface ServiceCategoryConnection {
  __typename?: 'ServiceCategoryConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<ServiceCategoryEdge>>;
  aggregate: AggregateServiceCategory;
}

/** An edge in a connection. */
export interface ServiceCategoryEdge {
  __typename?: 'ServiceCategoryEdge';
  /** The item at the end of the edge. */
  node: ServiceCategory;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface ServiceCategoryCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Services?: Maybe<ServiceCreateManyWithoutCategoryInput>;
  Parent?: Maybe<ServiceCategoryCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCategoryCreateManyWithoutParentInput>;
}

export interface ServiceCreateManyWithoutCategoryInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
}

export interface ServiceCategoryCreateOneWithoutChildsInput {
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
}

export interface ServiceCategoryCreateManyWithoutParentInput {
  connect?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
}

export interface ServiceCategoryCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Services?: Maybe<ServiceCreateManyWithoutCategoryInput>;
  Parent?: Maybe<ServiceCategoryCreateOneWithoutChildsInput>;
}

export interface ServiceCategoryCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Services?: Maybe<ServiceCreateManyWithoutCategoryInput>;
  Childs?: Maybe<ServiceCategoryCreateManyWithoutParentInput>;
}

export interface ServiceCategoryCreateWithoutServicesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Parent?: Maybe<ServiceCategoryCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCategoryCreateManyWithoutParentInput>;
}

export interface ServiceCategoryPreviousValues {
  __typename?: 'ServiceCategoryPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ServiceCategoryScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceCategoryScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceCategoryScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceCategoryScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  description_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  description_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  description_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  description_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  description_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  description_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  description_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  description_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  description_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  description_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  description_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  description_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  description_not_ends_with?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  code_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  code_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  code_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  code_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  code_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  code_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  code_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  code_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  code_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  code_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  code_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  code_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  code_not_ends_with?: Maybe<Scalars['ID']>;
}

export interface ServiceCategorySubscriptionPayload {
  __typename?: 'ServiceCategorySubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<ServiceCategory>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<ServiceCategoryPreviousValues>;
}

export interface ServiceCategorySubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<ServiceCategorySubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<ServiceCategorySubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<ServiceCategorySubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<ServiceCategoryWhereInput>;
}

export interface ServiceCategoryUpdateInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Services?: Maybe<ServiceUpdateManyWithoutCategoryInput>;
  Parent?: Maybe<ServiceCategoryUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCategoryUpdateManyWithoutParentInput>;
}

export interface ServiceUpdateManyWithoutCategoryInput {
  connect?: Maybe<Array<ServiceWhereUniqueInput>>;
  set?: Maybe<Array<ServiceWhereUniqueInput>>;
  disconnect?: Maybe<Array<ServiceWhereUniqueInput>>;
  updateMany?: Maybe<Array<ServiceUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ServiceScalarWhereInput>>;
}

export interface ServiceCategoryUpdateOneWithoutChildsInput {
  connect?: Maybe<ServiceCategoryWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface ServiceCategoryUpdateManyWithoutParentInput {
  connect?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
  set?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
  disconnect?: Maybe<Array<ServiceCategoryWhereUniqueInput>>;
  updateMany?: Maybe<Array<ServiceCategoryUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<ServiceCategoryScalarWhereInput>>;
}

export interface ServiceCategoryUpdateManyWithWhereNestedInput {
  where: ServiceCategoryScalarWhereInput;
  data: ServiceCategoryUpdateManyDataInput;
}

export interface ServiceCategoryUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ServiceCategoryUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface ServiceCategoryUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Services?: Maybe<ServiceUpdateManyWithoutCategoryInput>;
  Parent?: Maybe<ServiceCategoryUpdateOneWithoutChildsInput>;
}

export interface ServiceCategoryUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Services?: Maybe<ServiceUpdateManyWithoutCategoryInput>;
  Childs?: Maybe<ServiceCategoryUpdateManyWithoutParentInput>;
}

export interface ServiceCategoryUpdateWithoutServicesDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Parent?: Maybe<ServiceCategoryUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCategoryUpdateManyWithoutParentInput>;
}

export interface ServiceCategoryUpdateWithWhereUniqueWithoutParentInput {
  where: ServiceCategoryWhereUniqueInput;
  data: ServiceCategoryUpdateWithoutParentDataInput;
}

export interface ServiceCategoryUpsertWithWhereUniqueWithoutParentInput {
  where: ServiceCategoryWhereUniqueInput;
}

export interface ServiceCreateWithoutCategoryInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCreateManyWithoutParentInput>;
  Resource: ResourceCreateOneWithoutServiceInput;
}

export interface ServiceCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceCreateOneWithoutChildsInput>;
  Category?: Maybe<ServiceCategoryCreateOneWithoutServicesInput>;
  Resource: ResourceCreateOneWithoutServiceInput;
}

export interface ServiceCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutServicesInput>;
  Childs?: Maybe<ServiceCreateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryCreateOneWithoutServicesInput>;
  Resource: ResourceCreateOneWithoutServiceInput;
}

export interface ServiceCreateWithoutProjectsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Parent?: Maybe<ServiceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCreateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryCreateOneWithoutServicesInput>;
  Resource: ResourceCreateOneWithoutServiceInput;
}

export interface ServiceCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceCreateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceCreateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryCreateOneWithoutServicesInput>;
}

export interface ServiceUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface ServiceUpdateWithoutCategoryDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceUpdateManyWithoutParentInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutServiceInput>;
}

export interface ServiceUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceUpdateOneWithoutChildsInput>;
  Category?: Maybe<ServiceCategoryUpdateOneWithoutServicesInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutServiceInput>;
}

export interface ServiceUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutServicesInput>;
  Childs?: Maybe<ServiceUpdateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryUpdateOneWithoutServicesInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutServiceInput>;
}

export interface ServiceUpdateWithoutProjectsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Parent?: Maybe<ServiceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceUpdateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryUpdateOneWithoutServicesInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutServiceInput>;
}

export interface ServiceUpdateWithoutResourceDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  rank?: Maybe<Scalars['Int']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutServicesInput>;
  Parent?: Maybe<ServiceUpdateOneWithoutChildsInput>;
  Childs?: Maybe<ServiceUpdateManyWithoutParentInput>;
  Category?: Maybe<ServiceCategoryUpdateOneWithoutServicesInput>;
}

export interface ServiceUpdateWithWhereUniqueWithoutCategoryInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutCategoryDataInput;
}

export interface ServiceUpdateWithWhereUniqueWithoutParentInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutParentDataInput;
}

export interface ServiceUpdateWithWhereUniqueWithoutProjectsInput {
  where: ServiceWhereUniqueInput;
  data: ServiceUpdateWithoutProjectsDataInput;
}

export interface ServiceUpsertWithWhereUniqueWithoutCategoryInput {
  where: ServiceWhereUniqueInput;
}

export interface ServiceUpsertWithWhereUniqueWithoutParentInput {
  where: ServiceWhereUniqueInput;
}

export interface ServiceUpsertWithWhereUniqueWithoutProjectsInput {
  where: ServiceWhereUniqueInput;
}

/** A connection to a list of items. */
export interface SettingsConnection {
  __typename?: 'SettingsConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<SettingsEdge>>;
  aggregate: AggregateSettings;
}

/** An edge in a connection. */
export interface SettingsEdge {
  __typename?: 'SettingsEdge';
  /** The item at the end of the edge. */
  node: Settings;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface SettingsCreateOneWithoutUserInput {
  connect?: Maybe<SettingsWhereUniqueInput>;
}

export interface SettingsCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  renderDistance?: Maybe<Scalars['Int']>;
}

export enum SettingsOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  RENDERDISTANCE_ASC = 'renderDistance_ASC',
  RENDERDISTANCE_DESC = 'renderDistance_DESC'
}

export interface SettingsPreviousValues {
  __typename?: 'SettingsPreviousValues';
  id: Scalars['ID'];
  renderDistance: Scalars['Int'];
}

export interface SettingsSubscriptionPayload {
  __typename?: 'SettingsSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Settings>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<SettingsPreviousValues>;
}

export interface SettingsSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SettingsSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SettingsSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SettingsSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<SettingsWhereInput>;
}

export interface SettingsUpdateManyMutationInput {
  renderDistance?: Maybe<Scalars['Int']>;
}

export interface SettingsUpdateOneWithoutUserInput {
  connect?: Maybe<SettingsWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface SettingsUpdateWithoutUserDataInput {
  renderDistance?: Maybe<Scalars['Int']>;
}

/** A connection to a list of items. */
export interface SmsMessageConnection {
  __typename?: 'SmsMessageConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<SmsMessageEdge>>;
  aggregate: AggregateSmsMessage;
}

/** An edge in a connection. */
export interface SmsMessageEdge {
  __typename?: 'SmsMessageEdge';
  /** The item at the end of the edge. */
  node: SmsMessage;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface SmsMessageCreateWithoutStatusInput {
  id?: Maybe<Scalars['ID']>;
  from: Scalars['String'];
  text: Scalars['String'];
  deletOnSend?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<SmsMessageCreaterecipientsInput>;
  Provider: SmsProviderCreateOneInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export enum SmsMessageOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  FROM_ASC = 'from_ASC',
  FROM_DESC = 'from_DESC',
  TEXT_ASC = 'text_ASC',
  TEXT_DESC = 'text_DESC',
  DELETONSEND_ASC = 'deletOnSend_ASC',
  DELETONSEND_DESC = 'deletOnSend_DESC'
}

export interface SmsMessagePreviousValues {
  __typename?: 'SmsMessagePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  from: Scalars['String'];
  text: Scalars['String'];
  recipients: Array<Scalars['String']>;
  deletOnSend?: Maybe<Scalars['Boolean']>;
}

export interface SmsMessageSubscriptionPayload {
  __typename?: 'SmsMessageSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<SmsMessage>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<SmsMessagePreviousValues>;
}

export interface SmsMessageSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SmsMessageSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SmsMessageSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SmsMessageSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<SmsMessageWhereInput>;
}

export interface SmsMessageUpdateInput {
  from?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  deletOnSend?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<SmsMessageUpdaterecipientsInput>;
  Provider?: Maybe<SmsProviderUpdateOneRequiredInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Status?: Maybe<LetsadsSmsMessageStatusUpdateOneWithoutSmsMessageInput>;
}

export interface SmsMessageUpdaterecipientsInput {
  set?: Maybe<Array<Scalars['String']>>;
}

export interface SmsProviderUpdateOneRequiredInput {
  connect?: Maybe<SmsProviderWhereUniqueInput>;
}

export interface SmsMessageUpdateManyMutationInput {
  from?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  deletOnSend?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<SmsMessageUpdaterecipientsInput>;
}

export interface SmsMessageUpdateWithoutStatusDataInput {
  from?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  deletOnSend?: Maybe<Scalars['Boolean']>;
  recipients?: Maybe<SmsMessageUpdaterecipientsInput>;
  Provider?: Maybe<SmsProviderUpdateOneRequiredInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

/** A connection to a list of items. */
export interface SmsProviderConnection {
  __typename?: 'SmsProviderConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<SmsProviderEdge>>;
  aggregate: AggregateSmsProvider;
}

/** An edge in a connection. */
export interface SmsProviderEdge {
  __typename?: 'SmsProviderEdge';
  /** The item at the end of the edge. */
  node: SmsProvider;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export enum SmsProviderOrderByInput {
  ID_ASC = 'id_ASC',
  ID_DESC = 'id_DESC',
  CREATEDAT_ASC = 'createdAt_ASC',
  CREATEDAT_DESC = 'createdAt_DESC',
  UPDATEDAT_ASC = 'updatedAt_ASC',
  UPDATEDAT_DESC = 'updatedAt_DESC',
  NAME_ASC = 'name_ASC',
  NAME_DESC = 'name_DESC',
  CREDENTIALS_ASC = 'credentials_ASC',
  CREDENTIALS_DESC = 'credentials_DESC'
}

export interface SmsProviderPreviousValues {
  __typename?: 'SmsProviderPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  credentials?: Maybe<Scalars['Json']>;
}

export interface SmsProviderSubscriptionPayload {
  __typename?: 'SmsProviderSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<SmsProvider>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<SmsProviderPreviousValues>;
}

export interface SmsProviderSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<SmsProviderSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<SmsProviderSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<SmsProviderSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<SmsProviderWhereInput>;
}

export interface SmsProviderUpdateDataInput {
  name?: Maybe<Scalars['String']>;
  credentials?: Maybe<Scalars['Json']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface SmsProviderUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  credentials?: Maybe<Scalars['Json']>;
}

export interface TagCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
  Resources?: Maybe<ResourceTagCreateManyWithoutTagInput>;
  CreatedBy: UserCreateOneWithoutTagsInput;
}

export interface UserCreateOneWithoutTagsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TagCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TagWhereUniqueInput>>;
}

export interface TagCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
  Resources?: Maybe<ResourceTagCreateManyWithoutTagInput>;
}

export interface TagCreateWithoutResourcesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TagStatus>;
  CreatedBy: UserCreateOneWithoutTagsInput;
}

export interface TagPreviousValues {
  __typename?: 'TagPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
  status: TagStatus;
}

export interface TagScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TagScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TagScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TagScalarWhereInput>>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
  /** All values that are not equal to given value. */
  status_not?: Maybe<TagStatus>;
  /** All values that are contained in given list. */
  status_in?: Maybe<Array<TagStatus>>;
  /** All values that are not contained in given list. */
  status_not_in?: Maybe<Array<TagStatus>>;
}

export interface TagSubscriptionPayload {
  __typename?: 'TagSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Tag>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TagPreviousValues>;
}

export interface TagSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TagSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TagSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TagSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TagWhereInput>;
}

export interface TagUpdateInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
  Resources?: Maybe<ResourceTagUpdateManyWithoutTagInput>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutTagsInput>;
}

export interface UserUpdateOneRequiredWithoutTagsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TagUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
}

export interface TagUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
}

export interface TagUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TagWhereUniqueInput>>;
  set?: Maybe<Array<TagWhereUniqueInput>>;
  disconnect?: Maybe<Array<TagWhereUniqueInput>>;
  updateMany?: Maybe<Array<TagUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TagScalarWhereInput>>;
}

export interface TagUpdateManyWithWhereNestedInput {
  where: TagScalarWhereInput;
  data: TagUpdateManyDataInput;
}

export interface TagUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
  Resources?: Maybe<ResourceTagUpdateManyWithoutTagInput>;
}

export interface TagUpdateWithoutResourcesDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TagStatus>;
  CreatedBy?: Maybe<UserUpdateOneRequiredWithoutTagsInput>;
}

export interface TagUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput;
  data: TagUpdateWithoutCreatedByDataInput;
}

export interface TagUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TagWhereUniqueInput;
}

export interface TaskCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
}

export interface TaskCreateOneWithoutMembersInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface TaskCreateWithoutChatRoomInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutCodeChallengeCompletionInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutCommentsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutMembersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutReactionsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutRelatedFromInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutRelatedToInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutTaskProjectsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutTaskTechnologiesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerCreateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

export interface TaskCreateWithoutTimersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskCreateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberCreateManyWithoutTaskInput>;
  Parent?: Maybe<TaskCreateOneWithoutChildsInput>;
  Childs?: Maybe<TaskCreateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskCreateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskCreateManyWithoutRelatedFromInput>;
  Reactions?: Maybe<TaskReactionCreateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomCreateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionCreateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceCreateManyWithoutTaskInput>;
}

/** A connection to a list of items. */
export interface TaskMemberConnection {
  __typename?: 'TaskMemberConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TaskMemberEdge>>;
  aggregate: AggregateTaskMember;
}

/** An edge in a connection. */
export interface TaskMemberEdge {
  __typename?: 'TaskMemberEdge';
  /** The item at the end of the edge. */
  node: TaskMember;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface TaskMemberCreateInput {
  id?: Maybe<Scalars['ID']>;
  status: TaskMemberStatus;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Task: TaskCreateOneWithoutMembersInput;
  User: UserCreateOneWithoutTasksInput;
}

export interface UserCreateOneWithoutTasksInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskMemberCreateManyWithoutUserInput {
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
}

export interface TaskMemberCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  status: TaskMemberStatus;
  CreatedBy?: Maybe<UserCreateOneInput>;
  User: UserCreateOneWithoutTasksInput;
}

export interface TaskMemberCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  status: TaskMemberStatus;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Task: TaskCreateOneWithoutMembersInput;
}

export interface TaskMemberPreviousValues {
  __typename?: 'TaskMemberPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  status: TaskMemberStatus;
}

export interface TaskMemberSubscriptionPayload {
  __typename?: 'TaskMemberSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TaskMember>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TaskMemberPreviousValues>;
}

export interface TaskMemberSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TaskMemberSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TaskMemberSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TaskMemberSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TaskMemberWhereInput>;
}

export interface TaskMemberUpdateInput {
  status?: Maybe<TaskMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutMembersInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutTasksInput>;
}

export interface TaskUpdateOneRequiredWithoutMembersInput {
  connect?: Maybe<TaskWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutTasksInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface TaskMemberUpdateManyMutationInput {
  status?: Maybe<TaskMemberStatus>;
}

export interface TaskMemberUpdateManyWithoutUserInput {
  connect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  set?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskMemberScalarWhereInput>>;
}

export interface TaskMemberUpdateWithoutTaskDataInput {
  status?: Maybe<TaskMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutTasksInput>;
}

export interface TaskMemberUpdateWithoutUserDataInput {
  status?: Maybe<TaskMemberStatus>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutMembersInput>;
}

export interface TaskMemberUpdateWithWhereUniqueWithoutTaskInput {
  where: TaskMemberWhereUniqueInput;
  data: TaskMemberUpdateWithoutTaskDataInput;
}

export interface TaskMemberUpdateWithWhereUniqueWithoutUserInput {
  where: TaskMemberWhereUniqueInput;
  data: TaskMemberUpdateWithoutUserDataInput;
}

export interface TaskMemberUpsertWithWhereUniqueWithoutTaskInput {
  where: TaskMemberWhereUniqueInput;
}

export interface TaskMemberUpsertWithWhereUniqueWithoutUserInput {
  where: TaskMemberWhereUniqueInput;
}

export interface TaskReactionCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
}

export interface TaskReactionCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<TaskReactionType>;
  Task: TaskCreateOneWithoutReactionsInput;
}

export interface TaskReactionCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  type?: Maybe<TaskReactionType>;
  CreatedBy?: Maybe<UserCreateOneWithoutTasksReactionsInput>;
}

export interface TaskReactionUpdateManyMutationInput {
  type?: Maybe<TaskReactionType>;
}

export interface TaskReactionUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  set?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskReactionWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskReactionUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskReactionScalarWhereInput>>;
}

export interface TaskReactionUpdateWithoutCreatedByDataInput {
  type?: Maybe<TaskReactionType>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutReactionsInput>;
}

export interface TaskReactionUpdateWithoutTaskDataInput {
  type?: Maybe<TaskReactionType>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksReactionsInput>;
}

export interface TaskReactionUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TaskReactionWhereUniqueInput;
  data: TaskReactionUpdateWithoutCreatedByDataInput;
}

export interface TaskReactionUpdateWithWhereUniqueWithoutTaskInput {
  where: TaskReactionWhereUniqueInput;
  data: TaskReactionUpdateWithoutTaskDataInput;
}

export interface TaskReactionUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TaskReactionWhereUniqueInput;
}

export interface TaskReactionUpsertWithWhereUniqueWithoutTaskInput {
  where: TaskReactionWhereUniqueInput;
}

export interface TaskTechnologyCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Scalars['Int']>;
  Technology: TechnologyCreateOneWithoutTaskTechnologiesInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TaskTechnologyCreateWithoutTechnologyInput {
  id?: Maybe<Scalars['ID']>;
  level?: Maybe<Scalars['Int']>;
  Task: TaskCreateOneWithoutTaskTechnologiesInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TaskTechnologyUpdateManyMutationInput {
  level?: Maybe<Scalars['Int']>;
}

export interface TaskTechnologyUpdateWithoutTaskDataInput {
  level?: Maybe<Scalars['Int']>;
  Technology?: Maybe<TechnologyUpdateOneRequiredWithoutTaskTechnologiesInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TaskTechnologyUpdateWithoutTechnologyDataInput {
  level?: Maybe<Scalars['Int']>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTaskTechnologiesInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TaskTechnologyUpdateWithWhereUniqueWithoutTaskInput {
  where: TaskTechnologyWhereUniqueInput;
  data: TaskTechnologyUpdateWithoutTaskDataInput;
}

export interface TaskTechnologyUpdateWithWhereUniqueWithoutTechnologyInput {
  where: TaskTechnologyWhereUniqueInput;
  data: TaskTechnologyUpdateWithoutTechnologyDataInput;
}

export interface TaskTechnologyUpsertWithWhereUniqueWithoutTaskInput {
  where: TaskTechnologyWhereUniqueInput;
}

export interface TaskTechnologyUpsertWithWhereUniqueWithoutTechnologyInput {
  where: TaskTechnologyWhereUniqueInput;
}

export interface TaskUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
}

export interface TaskUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TaskWhereUniqueInput>>;
  set?: Maybe<Array<TaskWhereUniqueInput>>;
  disconnect?: Maybe<Array<TaskWhereUniqueInput>>;
  updateMany?: Maybe<Array<TaskUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TaskScalarWhereInput>>;
}

export interface TaskUpdateWithoutChatRoomDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutCodeChallengeCompletionDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutCommentsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutMembersDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutReactionsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutRelatedFromDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutRelatedToDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutTaskProjectsDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutTaskTechnologiesDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Timers?: Maybe<TimerUpdateManyWithoutTaskInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithoutTimersDataInput {
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  content?: Maybe<Scalars['Json']>;
  status?: Maybe<TaskStatus>;
  startDatePlaning?: Maybe<Scalars['DateTime']>;
  endDatePlaning?: Maybe<Scalars['DateTime']>;
  startDate?: Maybe<Scalars['DateTime']>;
  endDate?: Maybe<Scalars['DateTime']>;
  needHelp?: Maybe<Scalars['Boolean']>;
  TaskProjects?: Maybe<ProjectTaskUpdateManyWithoutTaskInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTasksCreatedInput>;
  Members?: Maybe<TaskMemberUpdateManyWithoutTaskInput>;
  Parent?: Maybe<TaskUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TaskUpdateManyWithoutParentInput>;
  RelatedFrom?: Maybe<TaskUpdateManyWithoutRelatedToInput>;
  RelatedTo?: Maybe<TaskUpdateManyWithoutRelatedFromInput>;
  Reactions?: Maybe<TaskReactionUpdateManyWithoutTaskInput>;
  ChatRoom?: Maybe<ChatRoomUpdateOneWithoutTaskInput>;
  CodeChallengeCompletion?: Maybe<CodeChallengeCompletionUpdateOneWithoutTaskInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTaskInput>;
  Comments?: Maybe<ResourceUpdateManyWithoutTaskInput>;
}

export interface TaskUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutCreatedByDataInput;
}

export interface TaskUpdateWithWhereUniqueWithoutParentInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutParentDataInput;
}

export interface TaskUpdateWithWhereUniqueWithoutRelatedFromInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutRelatedFromDataInput;
}

export interface TaskUpdateWithWhereUniqueWithoutRelatedToInput {
  where: TaskWhereUniqueInput;
  data: TaskUpdateWithoutRelatedToDataInput;
}

export interface TaskUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TaskWhereUniqueInput;
}

export interface TaskUpsertWithWhereUniqueWithoutParentInput {
  where: TaskWhereUniqueInput;
}

export interface TaskUpsertWithWhereUniqueWithoutRelatedFromInput {
  where: TaskWhereUniqueInput;
}

export interface TaskUpsertWithWhereUniqueWithoutRelatedToInput {
  where: TaskWhereUniqueInput;
}

export interface TeamCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
}

export interface TeamCreateWithoutChildsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutMembersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutOrderedProjectsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutParentInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutProjectsInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
  Resource: ResourceCreateOneWithoutTeamInput;
}

export interface TeamCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamCreateOneWithoutChildsInput>;
  Childs?: Maybe<TeamCreateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberCreateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectCreateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectCreateManyWithoutCustomersInput>;
}

export interface TeamMemberCreateManyWithoutUserInput {
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
}

export interface TeamMemberCreateWithoutTeamInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TeamMemberStatus>;
  User: UserCreateOneWithoutTeamsInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TeamMemberCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TeamMemberStatus>;
  Team: TeamCreateOneWithoutMembersInput;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TeamMemberUpdateManyMutationInput {
  status?: Maybe<TeamMemberStatus>;
}

export interface TeamMemberUpdateManyWithoutUserInput {
  connect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  set?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamMemberWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamMemberUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamMemberScalarWhereInput>>;
}

export interface TeamMemberUpdateWithoutTeamDataInput {
  status?: Maybe<TeamMemberStatus>;
  User?: Maybe<UserUpdateOneRequiredWithoutTeamsInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TeamMemberUpdateWithoutUserDataInput {
  status?: Maybe<TeamMemberStatus>;
  Team?: Maybe<TeamUpdateOneRequiredWithoutMembersInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TeamMemberUpdateWithWhereUniqueWithoutTeamInput {
  where: TeamMemberWhereUniqueInput;
  data: TeamMemberUpdateWithoutTeamDataInput;
}

export interface TeamMemberUpdateWithWhereUniqueWithoutUserInput {
  where: TeamMemberWhereUniqueInput;
  data: TeamMemberUpdateWithoutUserDataInput;
}

export interface TeamMemberUpsertWithWhereUniqueWithoutTeamInput {
  where: TeamMemberWhereUniqueInput;
}

export interface TeamMemberUpsertWithWhereUniqueWithoutUserInput {
  where: TeamMemberWhereUniqueInput;
}

export interface TeamUpdateDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
}

export interface TeamUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TeamWhereUniqueInput>>;
  set?: Maybe<Array<TeamWhereUniqueInput>>;
  disconnect?: Maybe<Array<TeamWhereUniqueInput>>;
  updateMany?: Maybe<Array<TeamUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TeamScalarWhereInput>>;
}

export interface TeamUpdateWithoutChildsDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutMembersDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutOrderedProjectsDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutParentDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutProjectsDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutTeamInput>;
}

export interface TeamUpdateWithoutResourceDataInput {
  name?: Maybe<Scalars['String']>;
  status?: Maybe<TeamStatus>;
  oldID?: Maybe<Scalars['Int']>;
  address?: Maybe<Scalars['String']>;
  website?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  Parent?: Maybe<TeamUpdateOneWithoutChildsInput>;
  Childs?: Maybe<TeamUpdateManyWithoutParentInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTeamsCreatedInput>;
  Members?: Maybe<TeamMemberUpdateManyWithoutTeamInput>;
  Projects?: Maybe<ProjectUpdateManyWithoutTeamInput>;
  OrderedProjects?: Maybe<ProjectUpdateManyWithoutCustomersInput>;
}

export interface TeamUpdateWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateDataInput;
}

export interface TeamUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutCreatedByDataInput;
}

export interface TeamUpdateWithWhereUniqueWithoutOrderedProjectsInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutOrderedProjectsDataInput;
}

export interface TeamUpdateWithWhereUniqueWithoutParentInput {
  where: TeamWhereUniqueInput;
  data: TeamUpdateWithoutParentDataInput;
}

export interface TeamUpsertWithWhereUniqueNestedInput {
  where: TeamWhereUniqueInput;
}

export interface TeamUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TeamWhereUniqueInput;
}

export interface TeamUpsertWithWhereUniqueWithoutOrderedProjectsInput {
  where: TeamWhereUniqueInput;
}

export interface TeamUpsertWithWhereUniqueWithoutParentInput {
  where: TeamWhereUniqueInput;
}

export interface TechnologyCreateWithoutTaskTechnologiesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutTechnologyInput>;
}

export interface TechnologyCreateWithoutUserTechnologiesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  TaskTechnologies?: Maybe<TaskTechnologyCreateManyWithoutTechnologyInput>;
}

export interface TechnologyLessonCreateWithoutCommentsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyCreateOneInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Users?: Maybe<TechnologyLessonUserCreateManyWithoutLessonInput>;
}

export interface TechnologyLessonCreateWithoutUsersInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyCreateOneInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Comments?: Maybe<CommentCreateManyWithoutTechnologyLessonInput>;
}

export interface TechnologyLessonUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
}

export interface TechnologyLessonUpdateOneWithoutCommentsInput {
  connect?: Maybe<TechnologyLessonWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface TechnologyLessonUpdateWithoutCommentsDataInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Users?: Maybe<TechnologyLessonUserUpdateManyWithoutLessonInput>;
}

export interface TechnologyLessonUpdateWithoutUsersDataInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  Technology?: Maybe<TechnologyUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Comments?: Maybe<CommentUpdateManyWithoutTechnologyLessonInput>;
}

export interface TechnologyLessonUserCreateWithoutLessonInput {
  id?: Maybe<Scalars['ID']>;
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TechnologyLessonUserUpdateManyMutationInput {
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
}

export interface TechnologyLessonUserUpdateWithoutLessonDataInput {
  status?: Maybe<TechnologyLessonUserStatus>;
  completedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TechnologyLessonUserUpdateWithWhereUniqueWithoutLessonInput {
  where: TechnologyLessonUserWhereUniqueInput;
  data: TechnologyLessonUserUpdateWithoutLessonDataInput;
}

export interface TechnologyLessonUserUpsertWithWhereUniqueWithoutLessonInput {
  where: TechnologyLessonUserWhereUniqueInput;
}

export interface TechnologyUpdateDataInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutTechnologyInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTechnologyInput>;
}

export interface TechnologyUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
}

export interface TechnologyUpdateWithoutTaskTechnologiesDataInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutTechnologyInput>;
}

export interface TechnologyUpdateWithoutUserTechnologiesDataInput {
  name?: Maybe<Scalars['String']>;
  components?: Maybe<Scalars['Json']>;
  contentText?: Maybe<Scalars['String']>;
  site_url?: Maybe<Scalars['String']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  TaskTechnologies?: Maybe<TaskTechnologyUpdateManyWithoutTechnologyInput>;
}

export interface TemplateCreateWithoutPrismaProjectInput {
  id?: Maybe<Scalars['ID']>;
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateCreateOneInput>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Project?: Maybe<ProjectCreateOneInput>;
}

export interface TemplateUpdateDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneInput>;
  PrismaProject?: Maybe<ProjectUpdateOneWithoutPrismaTemplatesInput>;
}

export interface TemplateUpdateManyMutationInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
}

export interface TemplateUpdateWithoutPrismaProjectDataInput {
  externalKey?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  description?: Maybe<Scalars['String']>;
  component?: Maybe<Scalars['String']>;
  props?: Maybe<Scalars['Json']>;
  components?: Maybe<Scalars['Json']>;
  vars?: Maybe<Scalars['Json']>;
  rank?: Maybe<Scalars['Int']>;
  Parent?: Maybe<TemplateUpdateOneInput>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Project?: Maybe<ProjectUpdateOneInput>;
}

export interface TemplateUpdateWithWhereUniqueWithoutPrismaProjectInput {
  where: TemplateWhereUniqueInput;
  data: TemplateUpdateWithoutPrismaProjectDataInput;
}

export interface TemplateUpsertWithWhereUniqueWithoutPrismaProjectInput {
  where: TemplateWhereUniqueInput;
}

export interface TestPreviousValues {
  __typename?: 'TestPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
}

export interface TestSubscriptionPayload {
  __typename?: 'TestSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Test>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TestPreviousValues>;
}

export interface TestSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TestSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TestSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TestSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TestWhereInput>;
}

export interface TestUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  text?: Maybe<Scalars['String']>;
  quantity?: Maybe<Scalars['Float']>;
  date?: Maybe<Scalars['DateTime']>;
}

export interface TimerCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
}

export interface TimerCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  Task: TaskCreateOneWithoutTimersInput;
}

export interface TimerCreateWithoutTaskInput {
  id?: Maybe<Scalars['ID']>;
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneWithoutTimersInput>;
}

export interface TimerUpdateManyMutationInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
}

export interface TimerUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<TimerWhereUniqueInput>>;
  set?: Maybe<Array<TimerWhereUniqueInput>>;
  disconnect?: Maybe<Array<TimerWhereUniqueInput>>;
  updateMany?: Maybe<Array<TimerUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<TimerScalarWhereInput>>;
}

export interface TimerUpdateWithoutCreatedByDataInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
  Task?: Maybe<TaskUpdateOneRequiredWithoutTimersInput>;
}

export interface TimerUpdateWithoutTaskDataInput {
  stopedAt?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutTimersInput>;
}

export interface TimerUpdateWithWhereUniqueWithoutCreatedByInput {
  where: TimerWhereUniqueInput;
  data: TimerUpdateWithoutCreatedByDataInput;
}

export interface TimerUpdateWithWhereUniqueWithoutTaskInput {
  where: TimerWhereUniqueInput;
  data: TimerUpdateWithoutTaskDataInput;
}

export interface TimerUpsertWithWhereUniqueWithoutCreatedByInput {
  where: TimerWhereUniqueInput;
}

export interface TimerUpsertWithWhereUniqueWithoutTaskInput {
  where: TimerWhereUniqueInput;
}

export interface TournamentCreateWithoutGroupInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tourneys?: Maybe<TourneyCreateManyWithoutTournamentInput>;
}

export interface TournamentCreateWithoutTourneysInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Group?: Maybe<TournamentGroupCreateOneWithoutTournamentsInput>;
}

export interface TournamentGroupCreateWithoutTournamentsInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
}

export interface TournamentGroupUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TournamentGroupUpdateWithoutTournamentsDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
}

export interface TournamentUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
}

export interface TournamentUpdateWithoutGroupDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tourneys?: Maybe<TourneyUpdateManyWithoutTournamentInput>;
}

export interface TournamentUpdateWithoutTourneysDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Group?: Maybe<TournamentGroupUpdateOneWithoutTournamentsInput>;
}

export interface TournamentUpdateWithWhereUniqueWithoutGroupInput {
  where: TournamentWhereUniqueInput;
  data: TournamentUpdateWithoutGroupDataInput;
}

export interface TournamentUpsertWithWhereUniqueWithoutGroupInput {
  where: TournamentWhereUniqueInput;
}

export interface TourneyCreateOneWithoutPlayersInput {
  connect?: Maybe<TourneyWhereUniqueInput>;
}

export interface TourneyCreateWithoutGamesInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tournament?: Maybe<TournamentCreateOneWithoutTourneysInput>;
  Players?: Maybe<TourneyPlayerCreateManyWithoutTourneyInput>;
}

export interface TourneyCreateWithoutPlayersInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Tournament?: Maybe<TournamentCreateOneWithoutTourneysInput>;
  Games?: Maybe<GameCreateManyWithoutTourneyInput>;
}

export interface TourneyCreateWithoutTournamentInput {
  id?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserCreateOneInput>;
  Players?: Maybe<TourneyPlayerCreateManyWithoutTourneyInput>;
  Games?: Maybe<GameCreateManyWithoutTourneyInput>;
}

/** A connection to a list of items. */
export interface TourneyPlayerConnection {
  __typename?: 'TourneyPlayerConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<TourneyPlayerEdge>>;
  aggregate: AggregateTourneyPlayer;
}

/** An edge in a connection. */
export interface TourneyPlayerEdge {
  __typename?: 'TourneyPlayerEdge';
  /** The item at the end of the edge. */
  node: TourneyPlayer;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface TourneyPlayerCreateInput {
  id?: Maybe<Scalars['ID']>;
  Tourney: TourneyCreateOneWithoutPlayersInput;
  User: UserCreateOneInput;
}

export interface TourneyPlayerCreateWithoutTourneyInput {
  id?: Maybe<Scalars['ID']>;
  User: UserCreateOneInput;
}

export interface TourneyPlayerPreviousValues {
  __typename?: 'TourneyPlayerPreviousValues';
  id: Scalars['ID'];
}

export interface TourneyPlayerSubscriptionPayload {
  __typename?: 'TourneyPlayerSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<TourneyPlayer>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<TourneyPlayerPreviousValues>;
}

export interface TourneyPlayerSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<TourneyPlayerSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<TourneyPlayerSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<TourneyPlayerSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<TourneyPlayerWhereInput>;
}

export interface TourneyPlayerUpdateInput {
  Tourney?: Maybe<TourneyUpdateOneRequiredWithoutPlayersInput>;
  User?: Maybe<UserUpdateOneRequiredInput>;
}

export interface TourneyUpdateOneRequiredWithoutPlayersInput {
  connect?: Maybe<TourneyWhereUniqueInput>;
}

export interface TourneyPlayerUpdateWithoutTourneyDataInput {
  User?: Maybe<UserUpdateOneRequiredInput>;
}

export interface TourneyPlayerUpdateWithWhereUniqueWithoutTourneyInput {
  where: TourneyPlayerWhereUniqueInput;
  data: TourneyPlayerUpdateWithoutTourneyDataInput;
}

export interface TourneyPlayerUpsertWithWhereUniqueWithoutTourneyInput {
  where: TourneyPlayerWhereUniqueInput;
}

export interface TourneyUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
}

export interface TourneyUpdateWithoutGamesDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tournament?: Maybe<TournamentUpdateOneWithoutTourneysInput>;
  Players?: Maybe<TourneyPlayerUpdateManyWithoutTourneyInput>;
}

export interface TourneyUpdateWithoutPlayersDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Tournament?: Maybe<TournamentUpdateOneWithoutTourneysInput>;
  Games?: Maybe<GameUpdateManyWithoutTourneyInput>;
}

export interface TourneyUpdateWithoutTournamentDataInput {
  name?: Maybe<Scalars['String']>;
  code?: Maybe<Scalars['ID']>;
  date?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneInput>;
  Players?: Maybe<TourneyPlayerUpdateManyWithoutTourneyInput>;
  Games?: Maybe<GameUpdateManyWithoutTourneyInput>;
}

export interface TourneyUpdateWithWhereUniqueWithoutTournamentInput {
  where: TourneyWhereUniqueInput;
  data: TourneyUpdateWithoutTournamentDataInput;
}

export interface TourneyUpsertWithWhereUniqueWithoutTournamentInput {
  where: TourneyWhereUniqueInput;
}

export interface UserCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateManyWithoutGroupsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
}

export interface UserCreateOneWithoutCareerInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutCreatedUsersInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutSettingsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutUserTechnologiesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateOneWithoutVotesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutCareerInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserGroupCreateManyWithoutUsersInput {
  connect?: Maybe<Array<UserGroupWhereUniqueInput>>;
}

export interface WorldCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<WorldWhereUniqueInput>>;
}

export interface VoteCreateManyWithoutUserInput {
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
}

export interface UserTechnologyCreateManyWithoutCreatedByInput {
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
}

export interface UserCreateWithoutCodeChallengeCompletionsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutCreatedRoomsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutCreatedUsersInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutEthAccountAuthedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutEthAccountsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutEthContractSourcesCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutFilesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutGroupsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutImportsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutLettersCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutLogedInsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutMessagesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutNoticesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutNotificationTypesCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutNotificationTypesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutPositionsCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutPositionsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutPrismaProjectsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutProjectsCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutProjectsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutReadedMessagesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutResourcesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutResourceTagsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutRoomsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutSettingsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTagsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTasksCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTasksInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTasksReactionsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTeamsCreatedInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTeamsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutTimersInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutUserTechnologiesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutVotesInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

export interface UserCreateWithoutWorldsInput {
  id?: Maybe<Scalars['ID']>;
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupCreateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserCreateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserCreateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInCreateManyWithoutUserInput>;
  Files?: Maybe<FileCreateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsCreateOneWithoutUserInput>;
  Resources?: Maybe<ResourceCreateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteCreateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeCreateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeCreateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagCreateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagCreateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomCreateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomCreateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageCreateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedCreateManyWithoutUserInput>;
  Notices?: Maybe<NoticeCreateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceCreateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountCreateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberCreateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamCreateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberCreateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectCreateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberCreateManyWithoutUserInput>;
  Timers?: Maybe<TimerCreateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionCreateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionCreateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionCreateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterCreateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountCreateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionCreateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectCreateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportCreateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerCreateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyCreateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskCreateManyWithoutCreatedByInput>;
}

/** A connection to a list of items. */
export interface UserGroupConnection {
  __typename?: 'UserGroupConnection';
  /** Information to aid in pagination. */
  pageInfo: PageInfo;
  /** A list of edges. */
  edges: Array<Maybe<UserGroupEdge>>;
  aggregate: AggregateUserGroup;
}

/** An edge in a connection. */
export interface UserGroupEdge {
  __typename?: 'UserGroupEdge';
  /** The item at the end of the edge. */
  node: UserGroup;
  /** A cursor for use in pagination. */
  cursor: Scalars['String'];
}

export interface UserGroupCreateInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  Users?: Maybe<UserCreateManyWithoutGroupsInput>;
}

export interface UserGroupCreateWithoutUsersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
}

export interface UserGroupPreviousValues {
  __typename?: 'UserGroupPreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  name: Scalars['String'];
}

export interface UserGroupSubscriptionPayload {
  __typename?: 'UserGroupSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<UserGroup>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<UserGroupPreviousValues>;
}

export interface UserGroupSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<UserGroupSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<UserGroupSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<UserGroupSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<UserGroupWhereInput>;
}

export interface UserGroupUpdateInput {
  name?: Maybe<Scalars['String']>;
  Users?: Maybe<UserUpdateManyWithoutGroupsInput>;
}

export interface UserUpdateManyWithoutGroupsInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface UserGroupUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
}

export interface UserGroupUpdateWithoutUsersDataInput {
  name?: Maybe<Scalars['String']>;
}

export interface UserGroupUpdateWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput;
  data: UserGroupUpdateWithoutUsersDataInput;
}

export interface UserGroupUpsertWithWhereUniqueWithoutUsersInput {
  where: UserGroupWhereUniqueInput;
}

export interface UserTechnologyCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
  Technology: TechnologyCreateOneWithoutUserTechnologiesInput;
}

export interface UserTechnologyCreateWithoutTechnologyInput {
  id?: Maybe<Scalars['ID']>;
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserCreateOneWithoutUserTechnologiesInput>;
}

export interface UserTechnologyUpdateManyMutationInput {
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
}

export interface UserTechnologyUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  set?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserTechnologyWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserTechnologyUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserTechnologyScalarWhereInput>>;
}

export interface UserTechnologyUpdateWithoutCreatedByDataInput {
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
  Technology?: Maybe<TechnologyUpdateOneRequiredWithoutUserTechnologiesInput>;
}

export interface UserTechnologyUpdateWithoutTechnologyDataInput {
  components?: Maybe<Scalars['Json']>;
  date_from?: Maybe<Scalars['DateTime']>;
  date_till?: Maybe<Scalars['DateTime']>;
  status?: Maybe<UserTechnologyStatus>;
  level?: Maybe<Scalars['Int']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutUserTechnologiesInput>;
}

export interface UserUpdateOneWithoutUserTechnologiesInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface UserTechnologyUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserTechnologyWhereUniqueInput;
  data: UserTechnologyUpdateWithoutCreatedByDataInput;
}

export interface UserTechnologyUpdateWithWhereUniqueWithoutTechnologyInput {
  where: UserTechnologyWhereUniqueInput;
  data: UserTechnologyUpdateWithoutTechnologyDataInput;
}

export interface UserTechnologyUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserTechnologyWhereUniqueInput;
}

export interface UserTechnologyUpsertWithWhereUniqueWithoutTechnologyInput {
  where: UserTechnologyWhereUniqueInput;
}

export interface UserUpdateDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<UserWhereUniqueInput>>;
  set?: Maybe<Array<UserWhereUniqueInput>>;
  disconnect?: Maybe<Array<UserWhereUniqueInput>>;
  updateMany?: Maybe<Array<UserUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<UserScalarWhereInput>>;
}

export interface UserUpdateOneWithoutCreatedUsersInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface WorldUpdateManyWithoutCreatedByInput {
  connect?: Maybe<Array<WorldWhereUniqueInput>>;
  set?: Maybe<Array<WorldWhereUniqueInput>>;
  disconnect?: Maybe<Array<WorldWhereUniqueInput>>;
  updateMany?: Maybe<Array<WorldUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<WorldScalarWhereInput>>;
}

export interface WorldUpdateManyWithWhereNestedInput {
  where: WorldScalarWhereInput;
  data: WorldUpdateManyDataInput;
}

export interface WorldScalarWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<WorldScalarWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<WorldScalarWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<WorldScalarWhereInput>>;
  createdAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  createdAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  createdAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  createdAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  createdAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  createdAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  createdAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  createdAt_gte?: Maybe<Scalars['DateTime']>;
  updatedAt?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  updatedAt_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  updatedAt_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  updatedAt_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  updatedAt_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  updatedAt_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  updatedAt_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  updatedAt_gte?: Maybe<Scalars['DateTime']>;
  id?: Maybe<Scalars['ID']>;
  /** All values that are not equal to given value. */
  id_not?: Maybe<Scalars['ID']>;
  /** All values that are contained in given list. */
  id_in?: Maybe<Array<Scalars['ID']>>;
  /** All values that are not contained in given list. */
  id_not_in?: Maybe<Array<Scalars['ID']>>;
  /** All values less than the given value. */
  id_lt?: Maybe<Scalars['ID']>;
  /** All values less than or equal the given value. */
  id_lte?: Maybe<Scalars['ID']>;
  /** All values greater than the given value. */
  id_gt?: Maybe<Scalars['ID']>;
  /** All values greater than or equal the given value. */
  id_gte?: Maybe<Scalars['ID']>;
  /** All values containing the given string. */
  id_contains?: Maybe<Scalars['ID']>;
  /** All values not containing the given string. */
  id_not_contains?: Maybe<Scalars['ID']>;
  /** All values starting with the given string. */
  id_starts_with?: Maybe<Scalars['ID']>;
  /** All values not starting with the given string. */
  id_not_starts_with?: Maybe<Scalars['ID']>;
  /** All values ending with the given string. */
  id_ends_with?: Maybe<Scalars['ID']>;
  /** All values not ending with the given string. */
  id_not_ends_with?: Maybe<Scalars['ID']>;
  name?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  name_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  name_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  name_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  name_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  name_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  name_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  name_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  name_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  name_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  name_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  name_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  name_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  name_not_ends_with?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  /** All values that are not equal to given value. */
  seed_not?: Maybe<Scalars['String']>;
  /** All values that are contained in given list. */
  seed_in?: Maybe<Array<Scalars['String']>>;
  /** All values that are not contained in given list. */
  seed_not_in?: Maybe<Array<Scalars['String']>>;
  /** All values less than the given value. */
  seed_lt?: Maybe<Scalars['String']>;
  /** All values less than or equal the given value. */
  seed_lte?: Maybe<Scalars['String']>;
  /** All values greater than the given value. */
  seed_gt?: Maybe<Scalars['String']>;
  /** All values greater than or equal the given value. */
  seed_gte?: Maybe<Scalars['String']>;
  /** All values containing the given string. */
  seed_contains?: Maybe<Scalars['String']>;
  /** All values not containing the given string. */
  seed_not_contains?: Maybe<Scalars['String']>;
  /** All values starting with the given string. */
  seed_starts_with?: Maybe<Scalars['String']>;
  /** All values not starting with the given string. */
  seed_not_starts_with?: Maybe<Scalars['String']>;
  /** All values ending with the given string. */
  seed_ends_with?: Maybe<Scalars['String']>;
  /** All values not ending with the given string. */
  seed_not_ends_with?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  /** All values that are not equal to given value. */
  type_not?: Maybe<WorldType>;
  /** All values that are contained in given list. */
  type_in?: Maybe<Array<WorldType>>;
  /** All values that are not contained in given list. */
  type_not_in?: Maybe<Array<WorldType>>;
  time?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  time_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  time_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  time_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  time_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  time_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  time_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  time_gte?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  /** All values that are not equal to given value. */
  timeChanger_not?: Maybe<Scalars['Float']>;
  /** All values that are contained in given list. */
  timeChanger_in?: Maybe<Array<Scalars['Float']>>;
  /** All values that are not contained in given list. */
  timeChanger_not_in?: Maybe<Array<Scalars['Float']>>;
  /** All values less than the given value. */
  timeChanger_lt?: Maybe<Scalars['Float']>;
  /** All values less than or equal the given value. */
  timeChanger_lte?: Maybe<Scalars['Float']>;
  /** All values greater than the given value. */
  timeChanger_gt?: Maybe<Scalars['Float']>;
  /** All values greater than or equal the given value. */
  timeChanger_gte?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  /** All values that are not equal to given value. */
  days_not?: Maybe<Scalars['Int']>;
  /** All values that are contained in given list. */
  days_in?: Maybe<Array<Scalars['Int']>>;
  /** All values that are not contained in given list. */
  days_not_in?: Maybe<Array<Scalars['Int']>>;
  /** All values less than the given value. */
  days_lt?: Maybe<Scalars['Int']>;
  /** All values less than or equal the given value. */
  days_lte?: Maybe<Scalars['Int']>;
  /** All values greater than the given value. */
  days_gt?: Maybe<Scalars['Int']>;
  /** All values greater than or equal the given value. */
  days_gte?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  /** All values that are not equal to given value. */
  lastPlayed_not?: Maybe<Scalars['DateTime']>;
  /** All values that are contained in given list. */
  lastPlayed_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values that are not contained in given list. */
  lastPlayed_not_in?: Maybe<Array<Scalars['DateTime']>>;
  /** All values less than the given value. */
  lastPlayed_lt?: Maybe<Scalars['DateTime']>;
  /** All values less than or equal the given value. */
  lastPlayed_lte?: Maybe<Scalars['DateTime']>;
  /** All values greater than the given value. */
  lastPlayed_gt?: Maybe<Scalars['DateTime']>;
  /** All values greater than or equal the given value. */
  lastPlayed_gte?: Maybe<Scalars['DateTime']>;
}

export interface WorldUpdateManyDataInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
}

export interface VoteUpdateManyWithoutUserInput {
  connect?: Maybe<Array<VoteWhereUniqueInput>>;
  set?: Maybe<Array<VoteWhereUniqueInput>>;
  disconnect?: Maybe<Array<VoteWhereUniqueInput>>;
  updateMany?: Maybe<Array<VoteUpdateManyWithWhereNestedInput>>;
  deleteMany?: Maybe<Array<VoteScalarWhereInput>>;
}

export interface UserUpdateManyMutationInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
}

export interface UserUpdateOneRequiredWithoutSettingsInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneRequiredWithoutVotesInput {
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateOneWithoutCareerInput {
  connect?: Maybe<UserWhereUniqueInput>;
  disconnect?: Maybe<Scalars['Boolean']>;
}

export interface UserUpdateWithoutCareerDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutCodeChallengeCompletionsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutCreatedByDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutCreatedRoomsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutCreatedUsersDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutEthAccountAuthedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutEthAccountsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutEthContractSourcesCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutFilesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutGroupsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutImportsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutLettersCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutLogedInsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutMessagesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutNoticesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutNotificationTypesCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutNotificationTypesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutPositionsCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutPositionsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutPrismaProjectsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutProjectsCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutProjectsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutReadedMessagesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutResourcesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutResourceTagsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutRoomsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutSettingsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTagsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTasksCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTasksDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTasksReactionsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTeamsCreatedDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTeamsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutTimersDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutUserTechnologiesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutVotesDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  worlds?: Maybe<WorldUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithoutWorldsDataInput {
  username?: Maybe<Scalars['String']>;
  email?: Maybe<Scalars['String']>;
  phone?: Maybe<Scalars['String']>;
  showEmail?: Maybe<Scalars['Boolean']>;
  showPhone?: Maybe<Scalars['Boolean']>;
  password?: Maybe<Scalars['String']>;
  fullname?: Maybe<Scalars['String']>;
  image?: Maybe<Scalars['String']>;
  address?: Maybe<Scalars['String']>;
  active?: Maybe<Scalars['Boolean']>;
  activated?: Maybe<Scalars['Boolean']>;
  deleted?: Maybe<Scalars['Boolean']>;
  hidden?: Maybe<Scalars['Boolean']>;
  sudo?: Maybe<Scalars['Boolean']>;
  marketplaceToken?: Maybe<Scalars['String']>;
  acceptChatMessageAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoomAnonymous?: Maybe<Scalars['Boolean']>;
  acceptNewChatRoom?: Maybe<Scalars['Boolean']>;
  oldID?: Maybe<Scalars['Int']>;
  Groups?: Maybe<UserGroupUpdateManyWithoutUsersInput>;
  CreatedUsers?: Maybe<UserUpdateManyWithoutCreatedByInput>;
  CreatedBy?: Maybe<UserUpdateOneWithoutCreatedUsersInput>;
  LogedIns?: Maybe<LogedInUpdateManyWithoutUserInput>;
  Files?: Maybe<FileUpdateManyWithoutCreatedByInput>;
  settings?: Maybe<SettingsUpdateOneWithoutUserInput>;
  Resources?: Maybe<ResourceUpdateManyWithoutCreatedByInput>;
  Votes?: Maybe<VoteUpdateManyWithoutUserInput>;
  NotificationTypes?: Maybe<NotificationTypeUpdateManyWithoutUsersInput>;
  NotificationTypesCreated?: Maybe<NotificationTypeUpdateManyWithoutCreatedByInput>;
  Tags?: Maybe<TagUpdateManyWithoutCreatedByInput>;
  ResourceTags?: Maybe<ResourceTagUpdateManyWithoutCreatedByInput>;
  Rooms?: Maybe<ChatRoomUpdateManyWithoutMembersInput>;
  CreatedRooms?: Maybe<ChatRoomUpdateManyWithoutCreatedByInput>;
  Messages?: Maybe<ChatMessageUpdateManyWithoutCreatedByInput>;
  ReadedMessages?: Maybe<ChatMessageReadedUpdateManyWithoutUserInput>;
  Notices?: Maybe<NoticeUpdateManyWithoutUserInput>;
  EthContractSourcesCreated?: Maybe<EthContractSourceUpdateManyWithoutCreatedByInput>;
  EthAccounts?: Maybe<EthAccountUpdateManyWithoutCreatedByInput>;
  Teams?: Maybe<TeamMemberUpdateManyWithoutUserInput>;
  TeamsCreated?: Maybe<TeamUpdateManyWithoutCreatedByInput>;
  Projects?: Maybe<ProjectMemberUpdateManyWithoutUserInput>;
  ProjectsCreated?: Maybe<ProjectUpdateManyWithoutCreatedByInput>;
  Tasks?: Maybe<TaskMemberUpdateManyWithoutUserInput>;
  Timers?: Maybe<TimerUpdateManyWithoutCreatedByInput>;
  PositionsCreated?: Maybe<PositionUpdateManyWithoutCreatedByInput>;
  Positions?: Maybe<PositionUpdateManyWithoutUsersInput>;
  TasksReactions?: Maybe<TaskReactionUpdateManyWithoutCreatedByInput>;
  LettersCreated?: Maybe<LetterUpdateManyWithoutUserInput>;
  EthAccountAuthed?: Maybe<EthAccountUpdateOneWithoutUserAuthedInput>;
  CodeChallengeCompletions?: Maybe<CodeChallengeCompletionUpdateManyWithoutCreatedByInput>;
  PrismaProjects?: Maybe<ProjectUpdateManyWithoutPrismaUsersInput>;
  Imports?: Maybe<ImportUpdateManyWithoutCreatedByInput>;
  Career?: Maybe<CareerUpdateOneWithoutCreatedByInput>;
  UserTechnologies?: Maybe<UserTechnologyUpdateManyWithoutCreatedByInput>;
  TasksCreated?: Maybe<TaskUpdateManyWithoutCreatedByInput>;
}

export interface UserUpdateWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
  data: UserUpdateDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutCreatedByDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutGroupsDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutNotificationTypesDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutPositionsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPositionsDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutPrismaProjectsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutPrismaProjectsDataInput;
}

export interface UserUpdateWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutRoomsDataInput;
}

export interface UserUpsertWithWhereUniqueNestedInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutCreatedByInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutNotificationTypesInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutPositionsInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutPrismaProjectsInput {
  where: UserWhereUniqueInput;
}

export interface UserUpsertWithWhereUniqueWithoutRoomsInput {
  where: UserWhereUniqueInput;
}

export interface VoteCreateInput {
  id?: Maybe<Scalars['ID']>;
  value: Scalars['Float'];
  Resource: ResourceCreateOneWithoutVotesInput;
  User: UserCreateOneWithoutVotesInput;
}

export interface VoteCreateWithoutResourceInput {
  id?: Maybe<Scalars['ID']>;
  value: Scalars['Float'];
  User: UserCreateOneWithoutVotesInput;
}

export interface VoteCreateWithoutUserInput {
  id?: Maybe<Scalars['ID']>;
  value: Scalars['Float'];
  Resource: ResourceCreateOneWithoutVotesInput;
}

export interface VotePreviousValues {
  __typename?: 'VotePreviousValues';
  id: Scalars['ID'];
  createdAt: Scalars['DateTime'];
  updatedAt: Scalars['DateTime'];
  value: Scalars['Float'];
}

export interface VoteSubscriptionPayload {
  __typename?: 'VoteSubscriptionPayload';
  mutation: MutationType;
  node?: Maybe<Vote>;
  updatedFields?: Maybe<Array<Scalars['String']>>;
  previousValues?: Maybe<VotePreviousValues>;
}

export interface VoteSubscriptionWhereInput {
  /** Logical AND on all given filters. */
  AND?: Maybe<Array<VoteSubscriptionWhereInput>>;
  /** Logical OR on all given filters. */
  OR?: Maybe<Array<VoteSubscriptionWhereInput>>;
  /** Logical NOT on all given filters combined by AND. */
  NOT?: Maybe<Array<VoteSubscriptionWhereInput>>;
  /** The subscription event gets dispatched when it's listed in mutation_in */
  mutation_in?: Maybe<Array<MutationType>>;
  /** The subscription event gets only dispatched when one of the updated fields names is included in this list */
  updatedFields_contains?: Maybe<Scalars['String']>;
  /** The subscription event gets only dispatched when all of the field names included in this list have been updated */
  updatedFields_contains_every?: Maybe<Array<Scalars['String']>>;
  /** The subscription event gets only dispatched when some of the field names included in this list have been updated */
  updatedFields_contains_some?: Maybe<Array<Scalars['String']>>;
  node?: Maybe<VoteWhereInput>;
}

export interface VoteUpdateInput {
  value?: Maybe<Scalars['Float']>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutVotesInput>;
  User?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateManyMutationInput {
  value?: Maybe<Scalars['Float']>;
}

export interface VoteUpdateWithoutResourceDataInput {
  value?: Maybe<Scalars['Float']>;
  User?: Maybe<UserUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateWithoutUserDataInput {
  value?: Maybe<Scalars['Float']>;
  Resource?: Maybe<ResourceUpdateOneRequiredWithoutVotesInput>;
}

export interface VoteUpdateWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutResourceDataInput;
}

export interface VoteUpdateWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
  data: VoteUpdateWithoutUserDataInput;
}

export interface VoteUpsertWithWhereUniqueWithoutResourceInput {
  where: VoteWhereUniqueInput;
}

export interface VoteUpsertWithWhereUniqueWithoutUserInput {
  where: VoteWhereUniqueInput;
}

export interface WorldCreateWithoutChangedBlocksInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  CreatedBy?: Maybe<UserCreateOneWithoutWorldsInput>;
  players?: Maybe<PlayerCreateManyWithoutWorldInput>;
  messages?: Maybe<MessageCreateManyWithoutWorldInput>;
}

export interface WorldCreateWithoutCreatedByInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  changedBlocks?: Maybe<BlockCreateManyWithoutWorldInput>;
  players?: Maybe<PlayerCreateManyWithoutWorldInput>;
  messages?: Maybe<MessageCreateManyWithoutWorldInput>;
}

export interface WorldCreateWithoutMessagesInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  CreatedBy?: Maybe<UserCreateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockCreateManyWithoutWorldInput>;
  players?: Maybe<PlayerCreateManyWithoutWorldInput>;
}

export interface WorldCreateWithoutPlayersInput {
  id?: Maybe<Scalars['ID']>;
  name: Scalars['String'];
  seed: Scalars['String'];
  type: WorldType;
  time: Scalars['Float'];
  timeChanger?: Maybe<Scalars['Float']>;
  days: Scalars['Int'];
  lastPlayed: Scalars['DateTime'];
  CreatedBy?: Maybe<UserCreateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockCreateManyWithoutWorldInput>;
  messages?: Maybe<MessageCreateManyWithoutWorldInput>;
}

export interface WorldUpdateManyMutationInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
}

export interface WorldUpdateWithoutChangedBlocksDataInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutWorldsInput>;
  players?: Maybe<PlayerUpdateManyWithoutWorldInput>;
  messages?: Maybe<MessageUpdateManyWithoutWorldInput>;
}

export interface WorldUpdateWithoutCreatedByDataInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  changedBlocks?: Maybe<BlockUpdateManyWithoutWorldInput>;
  players?: Maybe<PlayerUpdateManyWithoutWorldInput>;
  messages?: Maybe<MessageUpdateManyWithoutWorldInput>;
}

export interface WorldUpdateWithoutMessagesDataInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockUpdateManyWithoutWorldInput>;
  players?: Maybe<PlayerUpdateManyWithoutWorldInput>;
}

export interface WorldUpdateWithoutPlayersDataInput {
  name?: Maybe<Scalars['String']>;
  seed?: Maybe<Scalars['String']>;
  type?: Maybe<WorldType>;
  time?: Maybe<Scalars['Float']>;
  timeChanger?: Maybe<Scalars['Float']>;
  days?: Maybe<Scalars['Int']>;
  lastPlayed?: Maybe<Scalars['DateTime']>;
  CreatedBy?: Maybe<UserUpdateOneWithoutWorldsInput>;
  changedBlocks?: Maybe<BlockUpdateManyWithoutWorldInput>;
  messages?: Maybe<MessageUpdateManyWithoutWorldInput>;
}

export interface WorldUpdateWithWhereUniqueWithoutCreatedByInput {
  where: WorldWhereUniqueInput;
  data: WorldUpdateWithoutCreatedByDataInput;
}

export interface WorldUpsertWithWhereUniqueWithoutCreatedByInput {
  where: WorldWhereUniqueInput;
}

export interface MarketplaceAuthResponse {
  __typename?: 'MarketplaceAuthResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<Scalars['String']>;
}

export interface EthBlockResponse {
  __typename?: 'EthBlockResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<EthBlock>;
}

export interface EthContractSourceDeployInput {
  password?: Maybe<Scalars['String']>;
  params?: Maybe<Scalars['Json']>;
  gas?: Maybe<Scalars['Int']>;
  gasPrice?: Maybe<Scalars['Int']>;
}

export interface EthPersonalAccountCreateInput {
  password: Scalars['String'];
}

export interface EthPersonalAccountResponse {
  __typename?: 'EthPersonalAccountResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<EthPersonalAccount>;
}

export interface AnswerInput {
  offer?: Maybe<Scalars['Json']>;
  answer?: Maybe<Scalars['Json']>;
  sdp?: Maybe<Scalars['Json']>;
}

export interface CallRequestDataInput {
  status?: Maybe<CallRequestStatus>;
}

export interface CallRequestUpdateDataInput {
  status?: Maybe<CallRequestStatus>;
  answer?: Maybe<AnswerInput>;
}

export interface IceCandidate {
  __typename?: 'IceCandidate';
  from: Scalars['String'];
  to: Scalars['String'];
  sdp: Scalars['Json'];
  callRequestId: Scalars['String'];
}

export interface ServiceCategoryResponse {
  __typename?: 'ServiceCategoryResponse';
  success: Scalars['Boolean'];
  message?: Maybe<Scalars['String']>;
  errors: Array<Error>;
  data?: Maybe<ServiceCategory>;
}
